cscope 15 $HOME/Public/FreeRTOS---ARM-Cortex-A9-VersatileExpress-Quad-Core-port               0000758726
	@Demo/Common/Minimal/BlockQ.c

87 
	~<°dlib.h
>

90 
	~"FªeRTOS.h
"

91 
	~"èsk.h
"

92 
	~"queue.h
"

95 
	~"BlockQ.h
"

97 
	#blckqSTACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

98 
	#blckqNUM_TASK_SETS
 ( 3 )

	)

101 
	sBLOCKING_QUEUE_PARAMETERS


103 
xQueueH™dÀ
 
	mxQueue
;

104 
p‹tTickTy≥
 
	mxBlockTime
;

105 vﬁ©ûê*
	mpsCheckV¨übÀ
;

106 } 
	txBlockögQueueP¨amëîs
;

109 
p‹tTASK_FUNCTION_PROTO
–
vBlockögQueueProdu˚r
, 
pvP¨amëîs
 );

113 
p‹tTASK_FUNCTION_PROTO
–
vBlockögQueueC⁄sumî
, 
pvP¨amëîs
 );

118 vﬁ©ûê
	gsBlockögC⁄sumîCou¡
[ 
blckqNUM_TASK_SETS
 ] = { ( ) 0, ( ) 0, ( ) 0 };

122 vﬁ©ûê
	gsBlockögProdu˚rCou¡
[ 
blckqNUM_TASK_SETS
 ] = { ( ) 0, ( ) 0, ( ) 0 };

126 
	$vSèπBlockögQueueTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 )

128 
xBlockögQueueP¨amëîs
 *
pxQueueP¨amëîs1
, *
pxQueueP¨amëîs2
;

129 
xBlockögQueueP¨amëîs
 *
pxQueueP¨amëîs3
, *
pxQueueP¨amëîs4
;

130 
xBlockögQueueP¨amëîs
 *
pxQueueP¨amëîs5
, *
pxQueueP¨amëîs6
;

131 c⁄° 
p‹tBASE_TYPE
 
uxQueueSize1
 = 1, 
uxQueueSize5
 = 5;

132 c⁄° 
p‹tTickTy≥
 
xBlockTime
 = (Ö‹tTickTy≥ ) 1000 / 
p‹tTICK_RATE_MS
;

133 c⁄° 
p‹tTickTy≥
 
xD⁄tBlock
 = (ÖortTickType ) 0;

138 
pxQueueP¨amëîs1
 = ( 
xBlockögQueueP¨amëîs
 * ) 
	`pvP‹tMÆloc
( ( xBlockingQueueParameters ) );

142 
pxQueueP¨amëîs1
->
xQueue
 = 
	`xQueueCª©e
–
uxQueueSize1
, ( 
p‹tBASE_TYPE
 ) ( ) );

145 
pxQueueP¨amëîs1
->
xBlockTime
 = xBlockTime;

149 
pxQueueP¨amëîs1
->
psCheckV¨übÀ
 = &–
sBlockögC⁄sumîCou¡
[ 0 ] );

152 
pxQueueP¨amëîs2
 = ( 
xBlockögQueueP¨amëîs
 * ) 
	`pvP‹tMÆloc
( ( xBlockingQueueParameters ) );

155 
pxQueueP¨amëîs2
->
xQueue
 = 
pxQueueP¨amëîs1
->xQueue;

159 
pxQueueP¨amëîs2
->
xBlockTime
 = 
xD⁄tBlock
;

163 
pxQueueP¨amëîs2
->
psCheckV¨übÀ
 = &–
sBlockögProdu˚rCou¡
[ 0 ] );

168 
	`xTaskCª©e
–
vBlockögQueueC⁄sumî
, ( sig√d * ) "QC⁄sB1", 
blckqSTACK_SIZE
, ( * ) 
pxQueueP¨amëîs1
, 
uxPri‹ôy
, 
NULL
 );

169 
	`xTaskCª©e
–
vBlockögQueueProdu˚r
, ( sig√d * ) "QProdB2", 
blckqSTACK_SIZE
, ( * ) 
pxQueueP¨amëîs2
, 
tskIDLE_PRIORITY
, 
NULL
 );

176 
pxQueueP¨amëîs3
 = ( 
xBlockögQueueP¨amëîs
 * ) 
	`pvP‹tMÆloc
( ( xBlockingQueueParameters ) );

177 
pxQueueP¨amëîs3
->
xQueue
 = 
	`xQueueCª©e
–
uxQueueSize1
, ( 
p‹tBASE_TYPE
 ) ( ) );

178 
pxQueueP¨amëîs3
->
xBlockTime
 = 
xD⁄tBlock
;

179 
pxQueueP¨amëîs3
->
psCheckV¨übÀ
 = &–
sBlockögProdu˚rCou¡
[ 1 ] );

181 
pxQueueP¨amëîs4
 = ( 
xBlockögQueueP¨amëîs
 * ) 
	`pvP‹tMÆloc
( ( xBlockingQueueParameters ) );

182 
pxQueueP¨amëîs4
->
xQueue
 = 
pxQueueP¨amëîs3
->xQueue;

183 
pxQueueP¨amëîs4
->
xBlockTime
 = xBlockTime;

184 
pxQueueP¨amëîs4
->
psCheckV¨übÀ
 = &–
sBlockögC⁄sumîCou¡
[ 1 ] );

186 
	`xTaskCª©e
–
vBlockögQueueC⁄sumî
, ( sig√d * ) "QProdB3", 
blckqSTACK_SIZE
, ( * ) 
pxQueueP¨amëîs3
, 
tskIDLE_PRIORITY
, 
NULL
 );

187 
	`xTaskCª©e
–
vBlockögQueueProdu˚r
, ( sig√d * ) "QC⁄sB4", 
blckqSTACK_SIZE
, ( * ) 
pxQueueP¨amëîs4
, 
uxPri‹ôy
, 
NULL
 );

193 
pxQueueP¨amëîs5
 = ( 
xBlockögQueueP¨amëîs
 * ) 
	`pvP‹tMÆloc
( ( xBlockingQueueParameters ) );

194 
pxQueueP¨amëîs5
->
xQueue
 = 
	`xQueueCª©e
–
uxQueueSize5
, ( 
p‹tBASE_TYPE
 ) ( ) );

195 
pxQueueP¨amëîs5
->
xBlockTime
 = xBlockTime;

196 
pxQueueP¨amëîs5
->
psCheckV¨übÀ
 = &–
sBlockögProdu˚rCou¡
[ 2 ] );

198 
pxQueueP¨amëîs6
 = ( 
xBlockögQueueP¨amëîs
 * ) 
	`pvP‹tMÆloc
( ( xBlockingQueueParameters ) );

199 
pxQueueP¨amëîs6
->
xQueue
 = 
pxQueueP¨amëîs5
->xQueue;

200 
pxQueueP¨amëîs6
->
xBlockTime
 = xBlockTime;

201 
pxQueueP¨amëîs6
->
psCheckV¨übÀ
 = &–
sBlockögC⁄sumîCou¡
[ 2 ] );

203 
	`xTaskCª©e
–
vBlockögQueueProdu˚r
, ( sig√d * ) "QProdB5", 
blckqSTACK_SIZE
, ( * ) 
pxQueueP¨amëîs5
, 
tskIDLE_PRIORITY
, 
NULL
 );

204 
	`xTaskCª©e
–
vBlockögQueueC⁄sumî
, ( sig√d * ) "QC⁄sB6", 
blckqSTACK_SIZE
, ( * ) 
pxQueueP¨amëîs6
, 
tskIDLE_PRIORITY
, 
NULL
 );

205 
	}
}

208 
	$p‹tTASK_FUNCTION
–
vBlockögQueueProdu˚r
, 
pvP¨amëîs
 )

210 
usVÆue
 = 0;

211 
xBlockögQueueP¨amëîs
 *
pxQueueP¨amëîs
;

212 
sEº‹EvîOccuºed
 = 
pdFALSE
;

214 
pxQueueP¨amëîs
 = ( 
xBlockögQueueP¨amëîs
 * ) 
pvP¨amëîs
;

218 if–
	`xQueueSíd
–
pxQueueP¨amëîs
->
xQueue
, ( * ) &
usVÆue
,ÖxQueueP¨amëîs->
xBlockTime
 ) !
pdPASS
 )

220 
sEº‹EvîOccuºed
 = 
pdTRUE
;

226 if–
sEº‹EvîOccuºed
 =
pdFALSE
 )

228 –*
pxQueueP¨amëîs
->
psCheckV¨übÀ
 )++;

233 ++
usVÆue
;

236 
	}
}

239 
	$p‹tTASK_FUNCTION
–
vBlockögQueueC⁄sumî
, 
pvP¨amëîs
 )

241 
usD©a
, 
usEx≥˘edVÆue
 = 0;

242 
xBlockögQueueP¨amëîs
 *
pxQueueP¨amëîs
;

243 
sEº‹EvîOccuºed
 = 
pdFALSE
;

245 
pxQueueP¨amëîs
 = ( 
xBlockögQueueP¨amëîs
 * ) 
pvP¨amëîs
;

249 if–
	`xQueueRe˚ive
–
pxQueueP¨amëîs
->
xQueue
, &
usD©a
,ÖxQueueP¨amëîs->
xBlockTime
 ) =
pdPASS
 )

251 if–
usD©a
 !
usEx≥˘edVÆue
 )

254 
usEx≥˘edVÆue
 = 
usD©a
;

256 
sEº‹EvîOccuºed
 = 
pdTRUE
;

262 if–
sEº‹EvîOccuºed
 =
pdFALSE
 )

264 –*
pxQueueP¨amëîs
->
psCheckV¨übÀ
 )++;

269 ++
usEx≥˘edVÆue
;

273 
	}
}

277 
p‹tBASE_TYPE
 
	$xAªBlockögQueuesStûlRu¬ög
( )

279 
sLa°BlockögC⁄sumîCou¡
[ 
blckqNUM_TASK_SETS
 ] = { ( ) 0, ( ) 0, ( ) 0 };

280 
sLa°BlockögProdu˚rCou¡
[ 
blckqNUM_TASK_SETS
 ] = { ( ) 0, ( ) 0, ( ) 0 };

281 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdPASS
, 
xTasks
;

290  
xTasks
 = 0; xTask†< 
blckqNUM_TASK_SETS
; xTasks++ )

292 if–
sBlockögC⁄sumîCou¡
[ 
xTasks
 ] =
sLa°BlockögC⁄sumîCou¡
[ xTasks ] )

294 
xRëu∫
 = 
pdFALSE
;

296 
sLa°BlockögC⁄sumîCou¡
[ 
xTasks
 ] = 
sBlockögC⁄sumîCou¡
[ xTasks ];

299 if–
sBlockögProdu˚rCou¡
[ 
xTasks
 ] =
sLa°BlockögProdu˚rCou¡
[ xTasks ] )

301 
xRëu∫
 = 
pdFALSE
;

303 
sLa°BlockögProdu˚rCou¡
[ 
xTasks
 ] = 
sBlockögProdu˚rCou¡
[ xTasks ];

306  
xRëu∫
;

307 
	}
}

	@Demo/Common/Minimal/GenQTest.c

65 
	~<°dlib.h
>

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

70 
	~"queue.h
"

71 
	~"£mphr.h
"

74 
	~"GíQTe°.h
"

76 
	#gíqQUEUE_LENGTH
 ( 5 )

	)

77 
	#gíqNO_BLOCK
 ( 0 )

	)

79 
	#gíqMUTEX_LOW_PRIORITY
 ( 
tskIDLE_PRIORITY
 )

	)

80 
	#gíqMUTEX_TEST_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 1 )

	)

81 
	#gíqMUTEX_MEDIUM_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 2 )

	)

82 
	#gíqMUTEX_HIGH_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 3 )

	)

92 
¥vSídFr⁄tAndBackTe°
–*
pvP¨amëîs
 );

108 
¥vLowPri‹ôyMuãxTask
–*
pvP¨amëîs
 );

109 
¥vMediumPri‹ôyMuãxTask
–*
pvP¨amëîs
 );

110 
¥vHighPri‹ôyMuãxTask
–*
pvP¨amëîs
 );

116 
p‹tBASE_TYPE
 
	gxEº‹Dëe˘ed
 = 
pdFALSE
;

120 vﬁ©ûê
p‹tLONG
 
	gulLo›Cou¡î
 = 0;

121 vﬁ©ûê
p‹tLONG
 
	gulLo›Cou¡î2
 = 0;

124 vﬁ©ûê
p‹tLONG
 
	gulGu¨dedV¨übÀ
 = 0;

128 
xTaskH™dÀ
 
	gxHighPri‹ôyMuãxTask
, 
	gxMediumPri‹ôyMuãxTask
;

132 
	$vSèπGíîicQueueTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 )

134 
xQueueH™dÀ
 
xQueue
;

135 
xSem≠h‹eH™dÀ
 
xMuãx
;

139 
xQueue
 = 
	`xQueueCª©e
–
gíqQUEUE_LENGTH
, –
p‹tLONG
 ) );

147 
	`vQueueAddToRegi°ry
–
xQueue
, ( sig√d 
p‹tCHAR
 * ) "Gen_Queue_Test" );

152 
	`xTaskCª©e
–
¥vSídFr⁄tAndBackTe°
, ( sig√d 
p‹tCHAR
 * )"GíQ", 
c⁄figMINIMAL_STACK_SIZE
, ( * ) 
xQueue
, 
uxPri‹ôy
, 
NULL
 );

155 
xMuãx
 = 
	`xSem≠h‹eCª©eMuãx
();

163 
	`vQueueAddToRegi°ry
––
xQueueH™dÀ
 ) 
xMuãx
, ( sig√d 
p‹tCHAR
 * ) "Gen_Queue_Mutex" );

168 
	`xTaskCª©e
–
¥vLowPri‹ôyMuãxTask
, ( sig√d 
p‹tCHAR
 * )"MuLow", 
c⁄figMINIMAL_STACK_SIZE
, ( * ) 
xMuãx
, 
gíqMUTEX_LOW_PRIORITY
, 
NULL
 );

169 
	`xTaskCª©e
–
¥vMediumPri‹ôyMuãxTask
, ( sig√d 
p‹tCHAR
 * )"MuMed", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
gíqMUTEX_MEDIUM_PRIORITY
, &
xMediumPri‹ôyMuãxTask
 );

170 
	`xTaskCª©e
–
¥vHighPri‹ôyMuãxTask
, ( sig√d 
p‹tCHAR
 * )"MuHigh", 
c⁄figMINIMAL_STACK_SIZE
, ( * ) 
xMuãx
, 
gíqMUTEX_HIGH_PRIORITY
, &
xHighPri‹ôyMuãxTask
 );

171 
	}
}

174 
	$¥vSídFr⁄tAndBackTe°
–*
pvP¨amëîs
 )

176 
p‹tLONG
 
ulD©a
, 
ulD©a2
;

177 
xQueueH™dÀ
 
xQueue
;

179 #ifde‡
USE_STDIO


180 
	`vPrötDi•œyMesßge
–c⁄° 
p‹tCHAR
 * c⁄° * 
µcMesßgeToSíd
 );

182 c⁄° 
p‹tCHAR
 * c⁄° 
pcTaskSèπMsg
 = "Queue SendToFront/SendToBack/PeekÅest started.\r\n";

185 
	`vPrötDi•œyMesßge
–&
pcTaskSèπMsg
 );

188 
xQueue
 = ( 
xQueueH™dÀ
 ) 
pvP¨amëîs
;

196 
	`xQueueSídToFr⁄t
–
xQueue
, ( * ) &
ulLo›Cou¡î
, 
gíqNO_BLOCK
 );

198 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 1 )

200 
xEº‹Dëe˘ed
 = 
pdTRUE
;

203 if–
	`xQueueRe˚ive
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 ) !
pdPASS
 )

205 
xEº‹Dëe˘ed
 = 
pdTRUE
;

210 if–
ulLo›Cou¡î
 !
ulD©a
 )

212 
xEº‹Dëe˘ed
 = 
pdTRUE
;

217 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 0 )

219 
xEº‹Dëe˘ed
 = 
pdTRUE
;

222 
	`xQueueSídToBack
–
xQueue
, ( * ) &
ulLo›Cou¡î
, 
gíqNO_BLOCK
 );

224 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 1 )

226 
xEº‹Dëe˘ed
 = 
pdTRUE
;

229 if–
	`xQueueRe˚ive
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 ) !
pdPASS
 )

231 
xEº‹Dëe˘ed
 = 
pdTRUE
;

234 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 0 )

236 
xEº‹Dëe˘ed
 = 
pdTRUE
;

241 if–
ulLo›Cou¡î
 !
ulD©a
 )

243 
xEº‹Dëe˘ed
 = 
pdTRUE
;

246 #i‡
c⁄figUSE_PREEMPTION
 == 0

247 
	`èskYIELD
();

253  
ulD©a
 = 2; ulData < 5; ulData++ )

255 
	`xQueueSídToBack
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 );

260 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 3 )

262 
xEº‹Dëe˘ed
 = 
pdTRUE
;

264 
ulD©a
 = 1;

265 
	`xQueueSídToFr⁄t
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 );

266 
ulD©a
 = 0;

267 
	`xQueueSídToFr⁄t
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 );

271 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 5 )

273 
xEº‹Dëe˘ed
 = 
pdTRUE
;

276 if–
	`xQueueSídToFr⁄t
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 ) !
îrQUEUE_FULL
 )

278 
xEº‹Dëe˘ed
 = 
pdTRUE
;

281 if–
	`xQueueSídToBack
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 ) !
îrQUEUE_FULL
 )

283 
xEº‹Dëe˘ed
 = 
pdTRUE
;

286 #i‡
c⁄figUSE_PREEMPTION
 == 0

287 
	`èskYIELD
();

291  
ulD©a
 = 0; ulD©®< 
gíqQUEUE_LENGTH
; ulData++ )

294 if–
	`xQueuePìk
–
xQueue
, &
ulD©a2
, 
gíqNO_BLOCK
 ) !
pdPASS
 )

296 
xEº‹Dëe˘ed
 = 
pdTRUE
;

299 if–
ulD©a
 !
ulD©a2
 )

301 
xEº‹Dëe˘ed
 = 
pdTRUE
;

307 
ulD©a2
 = ~ulData2;

308 if–
	`xQueueRe˚ive
–
xQueue
, &
ulD©a2
, 
gíqNO_BLOCK
 ) !
pdPASS
 )

310 
xEº‹Dëe˘ed
 = 
pdTRUE
;

313 if–
ulD©a
 !
ulD©a2
 )

315 
xEº‹Dëe˘ed
 = 
pdTRUE
;

320 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 0 )

322 
xEº‹Dëe˘ed
 = 
pdTRUE
;

325 #i‡
c⁄figUSE_PREEMPTION
 == 0

326 
	`èskYIELD
();

331 
ulD©a
 = 10;

332 if–
	`xQueueSíd
–
xQueue
, &
ulD©a
, 
gíqNO_BLOCK
 ) !
pdPASS
 )

334 
xEº‹Dëe˘ed
 = 
pdTRUE
;

336 
ulD©a
 = 11;

337 if–
	`xQueueSíd
–
xQueue
, &
ulD©a
, 
gíqNO_BLOCK
 ) !
pdPASS
 )

339 
xEº‹Dëe˘ed
 = 
pdTRUE
;

342 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 2 )

344 
xEº‹Dëe˘ed
 = 
pdTRUE
;

349  
ulD©a
 = 9; ulData >= 7; ulData-- )

351 if–
	`xQueueSídToFr⁄t
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 ) !
pdPASS
 )

353 
xEº‹Dëe˘ed
 = 
pdTRUE
;

359 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 5 )

361 
xEº‹Dëe˘ed
 = 
pdTRUE
;

364 if–
	`xQueueSídToFr⁄t
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 ) !
îrQUEUE_FULL
 )

366 
xEº‹Dëe˘ed
 = 
pdTRUE
;

369 if–
	`xQueueSídToBack
–
xQueue
, ( * ) &
ulD©a
, 
gíqNO_BLOCK
 ) !
îrQUEUE_FULL
 )

371 
xEº‹Dëe˘ed
 = 
pdTRUE
;

374 #i‡
c⁄figUSE_PREEMPTION
 == 0

375 
	`èskYIELD
();

379  
ulD©a
 = 7; ulD©®< ( 7 + 
gíqQUEUE_LENGTH
 ); ulData++ )

381 if–
	`xQueueRe˚ive
–
xQueue
, &
ulD©a2
, 
gíqNO_BLOCK
 ) !
pdPASS
 )

383 
xEº‹Dëe˘ed
 = 
pdTRUE
;

386 if–
ulD©a
 !
ulD©a2
 )

388 
xEº‹Dëe˘ed
 = 
pdTRUE
;

392 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 0 )

394 
xEº‹Dëe˘ed
 = 
pdTRUE
;

397 
ulLo›Cou¡î
++;

399 
	}
}

402 
	$¥vLowPri‹ôyMuãxTask
–*
pvP¨amëîs
 )

404 
xSem≠h‹eH™dÀ
 
xMuãx
 = ( xSem≠h‹eH™dÀ ) 
pvP¨amëîs
;

406 #ifde‡
USE_STDIO


407 
	`vPrötDi•œyMesßge
–c⁄° 
p‹tCHAR
 * c⁄° * 
µcMesßgeToSíd
 );

409 c⁄° 
p‹tCHAR
 * c⁄° 
pcTaskSèπMsg
 = "Mutex withÖriority inheritanceÅest started.\r\n";

412 
	`vPrötDi•œyMesßge
–&
pcTaskSèπMsg
 );

418 if–
	`xSem≠h‹eTake
–
xMuãx
, 
gíqNO_BLOCK
 ) !
pdPASS
 )

420 
xEº‹Dëe˘ed
 = 
pdTRUE
;

424 
ulGu¨dedV¨übÀ
 = 0;

428 if–
	`uxTaskPri‹ôyGë
–
NULL
 ) !
gíqMUTEX_LOW_PRIORITY
 )

430 
xEº‹Dëe˘ed
 = 
pdTRUE
;

435 
	`vTaskResume
–
xHighPri‹ôyMuãxTask
 );

439 if–
	`uxTaskPri‹ôyGë
–
NULL
 ) !
gíqMUTEX_HIGH_PRIORITY
 )

441 
xEº‹Dëe˘ed
 = 
pdTRUE
;

447 
	`vTaskPri‹ôySë
–
NULL
, 
gíqMUTEX_TEST_PRIORITY
 );

448 if–
	`uxTaskPri‹ôyGë
–
NULL
 ) !
gíqMUTEX_HIGH_PRIORITY
 )

450 
xEº‹Dëe˘ed
 = 
pdTRUE
;

455 
	`vTaskResume
–
xMediumPri‹ôyMuãxTask
 );

458 if–
ulGu¨dedV¨übÀ
 != 0 )

460 
xEº‹Dëe˘ed
 = 
pdTRUE
;

468 if–
	`xSem≠h‹eGive
–
xMuãx
 ) !
pdPASS
 )

470 
xEº‹Dëe˘ed
 = 
pdTRUE
;

474 if–
ulGu¨dedV¨übÀ
 != 1 )

476 
xEº‹Dëe˘ed
 = 
pdTRUE
;

481 if–
	`uxTaskPri‹ôyGë
–
NULL
 ) !
gíqMUTEX_TEST_PRIORITY
 )

483 
xEº‹Dëe˘ed
 = 
pdTRUE
;

488 
	`vTaskPri‹ôySë
–
NULL
, 
gíqMUTEX_LOW_PRIORITY
 );

491 
ulLo›Cou¡î2
++;

493 #i‡
c⁄figUSE_PREEMPTION
 == 0

494 
	`èskYIELD
();

497 
	}
}

500 
	$¥vMediumPri‹ôyMuãxTask
–*
pvP¨amëîs
 )

502 –Ë
pvP¨amëîs
;

508 
	`vTaskSu•íd
–
NULL
 );

513 
ulGu¨dedV¨übÀ
++;

515 
	}
}

518 
	$¥vHighPri‹ôyMuãxTask
–*
pvP¨amëîs
 )

520 
xSem≠h‹eH™dÀ
 
xMuãx
 = ( xSem≠h‹eH™dÀ ) 
pvP¨amëîs
;

526 
	`vTaskSu•íd
–
NULL
 );

531 if–
	`xSem≠h‹eTake
–
xMuãx
, 
p‹tMAX_DELAY
 ) !
pdPASS
 )

533 
xEº‹Dëe˘ed
 = 
pdTRUE
;

538 if–
	`xSem≠h‹eGive
–
xMuãx
 ) !
pdPASS
 )

540 
xEº‹Dëe˘ed
 = 
pdTRUE
;

543 
	}
}

547 
p‹tBASE_TYPE
 
	$xAªGíîicQueueTasksStûlRu¬ög
( )

549 
p‹tLONG
 
ulLa°Lo›Cou¡î
 = 0, 
ulLa°Lo›Cou¡î2
 = 0;

553 if–
ulLa°Lo›Cou¡î
 =
ulLo›Cou¡î
 )

555 
xEº‹Dëe˘ed
 = 
pdTRUE
;

558 if–
ulLa°Lo›Cou¡î2
 =
ulLo›Cou¡î2
 )

560 
xEº‹Dëe˘ed
 = 
pdTRUE
;

563 
ulLa°Lo›Cou¡î
 = 
ulLo›Cou¡î
;

564 
ulLa°Lo›Cou¡î2
 = 
ulLo›Cou¡î2
;

569  !
xEº‹Dëe˘ed
;

570 
	}
}

	@Demo/Common/Minimal/PollQ.c

84 
	~<°dlib.h
>

87 
	~"FªeRTOS.h
"

88 
	~"èsk.h
"

89 
	~"queue.h
"

92 
	~"PﬁlQ.h
"

94 
	#pﬁlqSTACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

95 
	#pﬁlqQUEUE_SIZE
 ( 10 )

	)

96 
	#pﬁlqPRODUCER_DELAY
 ( ( 
p‹tTickTy≥
 ) 200 / 
p‹tTICK_RATE_MS
 )

	)

97 
	#pﬁlqCONSUMER_DELAY
 ( 
pﬁlqPRODUCER_DELAY
 - ( 
p‹tTickTy≥
 ) ( 20 / 
p‹tTICK_RATE_MS
 ) )

	)

98 
	#pﬁlqNO_DELAY
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

99 
	#pﬁlqVALUES_TO_PRODUCE
 ( ( sig√d 
p‹tBASE_TYPE
 ) 3 )

	)

100 
	#pﬁlqINITIAL_VALUE
 ( ( sig√d 
p‹tBASE_TYPE
 ) 0 )

	)

103 
p‹tTASK_FUNCTION_PROTO
–
vPﬁÀdQueueProdu˚r
, 
pvP¨amëîs
 );

106 
p‹tTASK_FUNCTION_PROTO
–
vPﬁÀdQueueC⁄sumî
, 
pvP¨amëîs
 );

110 vﬁ©ûêsig√d 
p‹tBASE_TYPE
 
	gxPﬁlögC⁄sumîCou¡
 = 
pﬁlqINITIAL_VALUE
, 
	gxPﬁlögProdu˚rCou¡
 =ÖollqINITIAL_VALUE;

114 
	$vSèπPﬁÀdQueueTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 )

116 
xQueueH™dÀ
 
xPﬁÀdQueue
;

119 
xPﬁÀdQueue
 = 
	`xQueueCª©e
–
pﬁlqQUEUE_SIZE
, ( 
p‹tBASE_TYPE
 ) ( ) );

127 
	`vQueueAddToRegi°ry
–
xPﬁÀdQueue
, ( signed * ) "Poll_Test_Queue" );

130 
	`xTaskCª©e
–
vPﬁÀdQueueC⁄sumî
, ( sig√d * ) "QC⁄sNB", 
pﬁlqSTACK_SIZE
, ( * ) &
xPﬁÀdQueue
, 
uxPri‹ôy
, ( 
xTaskH™dÀ
 * ) 
NULL
 );

131 
	`xTaskCª©e
–
vPﬁÀdQueueProdu˚r
, ( sig√d * ) "QProdNB", 
pﬁlqSTACK_SIZE
, ( * ) &
xPﬁÀdQueue
, 
uxPri‹ôy
, ( 
xTaskH™dÀ
 * ) 
NULL
 );

132 
	}
}

135 
	$p‹tTASK_FUNCTION
–
vPﬁÀdQueueProdu˚r
, 
pvP¨amëîs
 )

137 
usVÆue
 = ( ) 0;

138 sig√d 
p‹tBASE_TYPE
 
xEº‹
 = 
pdFALSE
, 
xLo›
;

142  
xLo›
 = 0; xLo› < 
pﬁlqVALUES_TO_PRODUCE
; xLoop++ )

145 if–
	`xQueueSíd
–*––
xQueueH™dÀ
 * ) 
pvP¨amëîs
 ), ( * ) &
usVÆue
, 
pﬁlqNO_DELAY
 ) !
pdPASS
 )

149 
xEº‹
 = 
pdTRUE
;

153 if–
xEº‹
 =
pdFALSE
 )

157 
	`p‹tENTER_CRITICAL
();

158 
xPﬁlögProdu˚rCou¡
++;

159 
	`p‹tEXIT_CRITICAL
();

163 
usVÆue
++;

169 
	`vTaskDñay
–
pﬁlqPRODUCER_DELAY
 );

171 
	}
}

174 
	$p‹tTASK_FUNCTION
–
vPﬁÀdQueueC⁄sumî
, 
pvP¨amëîs
 )

176 
usD©a
, 
usEx≥˘edVÆue
 = ( ) 0;

177 sig√d 
p‹tBASE_TYPE
 
xEº‹
 = 
pdFALSE
;

182  
	`uxQueueMesßgesWaôög
–*––
xQueueH™dÀ
 * ) 
pvP¨amëîs
 ) ) )

184 if–
	`xQueueRe˚ive
–*––
xQueueH™dÀ
 * ) 
pvP¨amëîs
 ), &
usD©a
, 
pﬁlqNO_DELAY
 ) =
pdPASS
 )

186 if–
usD©a
 !
usEx≥˘edVÆue
 )

190 
xEº‹
 = 
pdTRUE
;

194 
usEx≥˘edVÆue
 = 
usD©a
;

198 if–
xEº‹
 =
pdFALSE
 )

202 
	`p‹tENTER_CRITICAL
();

203 
xPﬁlögC⁄sumîCou¡
++;

204 
	`p‹tEXIT_CRITICAL
();

209 
usEx≥˘edVÆue
++;

215 
	`vTaskDñay
–
pﬁlqCONSUMER_DELAY
 );

217 
	}
}

221 
p‹tBASE_TYPE
 
	$xAªPﬁlögQueuesStûlRu¬ög
( )

223 
p‹tBASE_TYPE
 
xRëu∫
;

229 if––
xPﬁlögC⁄sumîCou¡
 =
pﬁlqINITIAL_VALUE
 ) ||

230 –
xPﬁlögProdu˚rCou¡
 =
pﬁlqINITIAL_VALUE
 )

233 
xRëu∫
 = 
pdFALSE
;

237 
xRëu∫
 = 
pdTRUE
;

242 
xPﬁlögC⁄sumîCou¡
 = 
pﬁlqINITIAL_VALUE
;

243 
xPﬁlögProdu˚rCou¡
 = 
pﬁlqINITIAL_VALUE
;

245  
xRëu∫
;

246 
	}
}

	@Demo/Common/Minimal/QPeek.c

61 
	~<°dlib.h
>

64 
	~"FªeRTOS.h
"

65 
	~"èsk.h
"

66 
	~"queue.h
"

67 
	~"£mphr.h
"

70 
	~"QPìk.h
"

72 
	#q≥ekQUEUE_LENGTH
 ( 5 )

	)

73 
	#q≥ekNO_BLOCK
 ( 0 )

	)

74 
	#q≥ekSHORT_DELAY
 ( 10 )

	)

76 
	#q≥ekLOW_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 0 )

	)

77 
	#q≥ekMEDIUM_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 1 )

	)

78 
	#q≥ekHIGH_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 2 )

	)

79 
	#q≥ekHIGHEST_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 3 )

	)

88 
¥vLowPri‹ôyPìkTask
–*
pvP¨amëîs
 );

89 
¥vMediumPri‹ôyPìkTask
–*
pvP¨amëîs
 );

90 
¥vHighPri‹ôyPìkTask
–*
pvP¨amëîs
 );

91 
¥vHighe°Pri‹ôyPìkTask
–*
pvP¨amëîs
 );

97 vﬁ©ûê
p‹tBASE_TYPE
 
	gxEº‹Dëe˘ed
 = 
pdFALSE
;

101 vﬁ©ûê
p‹tLONG
 
	gulLo›Cou¡î
 = 0;

104 
xTaskH™dÀ
 
	gxMediumPri‹ôyTask
, 
	gxHighPri‹ôyTask
, 
	gxHighe°Pri‹ôyTask
;

107 
	$vSèπQueuePìkTasks
( )

109 
xQueueH™dÀ
 
xQueue
;

112 
xQueue
 = 
	`xQueueCª©e
–
q≥ekQUEUE_LENGTH
, –
p‹tLONG
 ) );

120 
	`vQueueAddToRegi°ry
–
xQueue
, ( sig√d 
p‹tCHAR
 * ) "QPeek_Test_Queue" );

125 
	`xTaskCª©e
–
¥vLowPri‹ôyPìkTask
, ( sig√d 
p‹tCHAR
 * )"PìkL", 
c⁄figMINIMAL_STACK_SIZE
, ( * ) 
xQueue
, 
q≥ekLOW_PRIORITY
, 
NULL
 );

126 
	`xTaskCª©e
–
¥vMediumPri‹ôyPìkTask
, ( sig√d 
p‹tCHAR
 * )"PìkM", 
c⁄figMINIMAL_STACK_SIZE
, ( * ) 
xQueue
, 
q≥ekMEDIUM_PRIORITY
, &
xMediumPri‹ôyTask
 );

127 
	`xTaskCª©e
–
¥vHighPri‹ôyPìkTask
, ( sig√d 
p‹tCHAR
 * )"PìkH1", 
c⁄figMINIMAL_STACK_SIZE
, ( * ) 
xQueue
, 
q≥ekHIGH_PRIORITY
, &
xHighPri‹ôyTask
 );

128 
	`xTaskCª©e
–
¥vHighe°Pri‹ôyPìkTask
, ( sig√d 
p‹tCHAR
 * )"PìkH2", 
c⁄figMINIMAL_STACK_SIZE
, ( * ) 
xQueue
, 
q≥ekHIGHEST_PRIORITY
, &
xHighe°Pri‹ôyTask
 );

129 
	}
}

132 
	$¥vHighe°Pri‹ôyPìkTask
–*
pvP¨amëîs
 )

134 
xQueueH™dÀ
 
xQueue
 = ( xQueueH™dÀ ) 
pvP¨amëîs
;

135 
p‹tLONG
 
ulVÆue
;

137 #ifde‡
USE_STDIO


139 
	`vPrötDi•œyMesßge
–c⁄° 
p‹tCHAR
 * c⁄° * 
µcMesßgeToSíd
 );

141 c⁄° 
p‹tCHAR
 * c⁄° 
pcTaskSèπMsg
 = "QueueÖeekÅest started.\r\n";

144 
	`vPrötDi•œyMesßge
–&
pcTaskSèπMsg
 );

152 if–
	`xQueuePìk
–
xQueue
, &
ulVÆue
, 
p‹tMAX_DELAY
 ) !
pdPASS
 )

155 
xEº‹Dëe˘ed
 = 
pdTRUE
;

164 if–
ulVÆue
 != 0x11223344 )

167 
xEº‹Dëe˘ed
 = 
pdTRUE
;

170 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 1 )

173 
xEº‹Dëe˘ed
 = 
pdTRUE
;

179 
ulVÆue
 = 0;

180 if–
	`xQueueRe˚ive
–
xQueue
, &
ulVÆue
, 
q≥ekNO_BLOCK
 ) !
pdPASS
 )

183 
xEº‹Dëe˘ed
 = 
pdTRUE
;

186 if–
ulVÆue
 != 0x11223344 )

190 
xEº‹Dëe˘ed
 = 
pdTRUE
;

195 if–
	`xQueuePìk
–
xQueue
, &
ulVÆue
, 
p‹tMAX_DELAY
 ) !
pdPASS
 )

198 
xEº‹Dëe˘ed
 = 
pdTRUE
;

203 if–
ulVÆue
 != 0x01234567 )

206 
xEº‹Dëe˘ed
 = 
pdTRUE
;

209 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 1 )

212 
xEº‹Dëe˘ed
 = 
pdTRUE
;

219 
	`vTaskSu•íd
–
NULL
 );

226 if–
	`xQueuePìk
–
xQueue
, &
ulVÆue
, 
p‹tMAX_DELAY
 ) !
pdPASS
 )

228 
xEº‹Dëe˘ed
 = 
pdTRUE
;

231 if–
ulVÆue
 != 0xaabbaabb )

233 
xEº‹Dëe˘ed
 = 
pdTRUE
;

236 
	`vTaskSu•íd
–
NULL
 );

238 
	}
}

241 
	$¥vHighPri‹ôyPìkTask
–*
pvP¨amëîs
 )

243 
xQueueH™dÀ
 
xQueue
 = ( xQueueH™dÀ ) 
pvP¨amëîs
;

244 
p‹tLONG
 
ulVÆue
;

251 if–
	`xQueuePìk
–
xQueue
, &
ulVÆue
, 
p‹tMAX_DELAY
 ) !
pdPASS
 )

254 
xEº‹Dëe˘ed
 = 
pdTRUE
;

260 if–
ulVÆue
 != 0x01234567 )

263 
xEº‹Dëe˘ed
 = 
pdTRUE
;

266 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 1 )

269 
xEº‹Dëe˘ed
 = 
pdTRUE
;

276 
	`vTaskSu•íd
–
NULL
 );

281 if–
	`xQueueRe˚ive
–
xQueue
, &
ulVÆue
, 
p‹tMAX_DELAY
 ) !
pdPASS
 )

283 
xEº‹Dëe˘ed
 = 
pdTRUE
;

286 if–
ulVÆue
 != 0xaabbaabb )

288 
xEº‹Dëe˘ed
 = 
pdTRUE
;

291 
	`vTaskSu•íd
–
NULL
 );

293 
	}
}

296 
	$¥vMediumPri‹ôyPìkTask
–*
pvP¨amëîs
 )

298 
xQueueH™dÀ
 
xQueue
 = ( xQueueH™dÀ ) 
pvP¨amëîs
;

299 
p‹tLONG
 
ulVÆue
;

306 if–
	`xQueuePìk
–
xQueue
, &
ulVÆue
, 
p‹tMAX_DELAY
 ) !
pdPASS
 )

309 
xEº‹Dëe˘ed
 = 
pdTRUE
;

315 if–
ulVÆue
 != 0x01234567 )

318 
xEº‹Dëe˘ed
 = 
pdTRUE
;

321 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 1 )

324 
xEº‹Dëe˘ed
 = 
pdTRUE
;

328 
ulLo›Cou¡î
++;

332 
	`vTaskSu•íd
–
NULL
 );

334 
	}
}

337 
	$¥vLowPri‹ôyPìkTask
–*
pvP¨amëîs
 )

339 
xQueueH™dÀ
 
xQueue
 = ( xQueueH™dÀ ) 
pvP¨amëîs
;

340 
p‹tLONG
 
ulVÆue
;

346 
ulVÆue
 = 0x11223344;

347 if–
	`xQueueSídToBack
–
xQueue
, &
ulVÆue
, 
q≥ekNO_BLOCK
 ) !
pdPASS
 )

351 
xEº‹Dëe˘ed
 = 
pdTRUE
;

356 if–
	`uxQueueMesßgesWaôög
–
xQueue
 ) != 0 )

358 
xEº‹Dëe˘ed
 = 
pdTRUE
;

363 
ulVÆue
 = 0x01234567;

364 if–
	`xQueueSídToBack
–
xQueue
, &
ulVÆue
, 
q≥ekNO_BLOCK
 ) !
pdPASS
 )

368 
xEº‹Dëe˘ed
 = 
pdTRUE
;

373 
ulVÆue
 = 0;

374 if–
	`xQueueRe˚ive
–
xQueue
, &
ulVÆue
, 
q≥ekNO_BLOCK
 ) !
pdPASS
 )

377 
xEº‹Dëe˘ed
 = 
pdTRUE
;

380 if–
ulVÆue
 != 0x01234567 )

387 
	`vTaskDñay
–
q≥ekSHORT_DELAY
 );

394 
	`vTaskResume
–
xMediumPri‹ôyTask
 );

395 
	`vTaskResume
–
xHighPri‹ôyTask
 );

396 
	`vTaskResume
–
xHighe°Pri‹ôyTask
 );

398 
ulVÆue
 = 0xaabbaabb;

399 if–
	`xQueueSídToFr⁄t
–
xQueue
, &
ulVÆue
, 
q≥ekNO_BLOCK
 ) !
pdPASS
 )

403 
xEº‹Dëe˘ed
 = 
pdTRUE
;

408 if–
	`xQueuePìk
–
xQueue
, &
ulVÆue
, 
q≥ekNO_BLOCK
 ) !
îrQUEUE_EMPTY
 )

411 
xEº‹Dëe˘ed
 = 
pdTRUE
;

417 
	`vTaskResume
–
xHighPri‹ôyTask
 );

418 
	`vTaskResume
–
xHighe°Pri‹ôyTask
 );

422 
	`vTaskDñay
–
q≥ekSHORT_DELAY
 );

424 
	}
}

428 
p‹tBASE_TYPE
 
	$xAªQueuePìkTasksStûlRu¬ög
( )

430 
p‹tLONG
 
ulLa°Lo›Cou¡î
 = 0;

434 if–
ulLa°Lo›Cou¡î
 =
ulLo›Cou¡î
 )

436 
xEº‹Dëe˘ed
 = 
pdTRUE
;

439 
ulLa°Lo›Cou¡î
 = 
ulLo›Cou¡î
;

444  !
xEº‹Dëe˘ed
;

445 
	}
}

	@Demo/Common/Minimal/TimerDemo.c

61 
	~<°rög.h
>

64 
	~"FªeRTOS.h
"

65 
	~"èsk.h
"

66 
	~"timîs.h
"

69 
	~"TimîDemo.h
"

71 #i‡–
c⁄figTIMER_TASK_PRIORITY
 < 1 )

72 #îr‹ 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
be
 
£t
 
to
 
©
 
Àa°
 1 
this
 
ã°
/
demo
Åÿ
fun˘i⁄
 
c‹ª˘ly
.

75 
	#tmrdemoDONT_BLOCK
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

76 
	#tmrdemoONE_SHOT_TIMER_PERIOD
 ( 
xBa£Pîiod
 * ( 
p‹tTickTy≥
 ) 3 )

	)

77 
	#åmdemoNUM_TIMER_RESETS
 ( ( Ë10 )

	)

88 
¥vAutoRñﬂdTimîCÆlback
–
xTimîH™dÀ
 
pxExpúedTimî
 );

89 
¥vO√ShŸTimîCÆlback
–
xTimîH™dÀ
 
pxExpúedTimî
 );

90 
¥vTimîTe°Task
–*
pvP¨amëîs
 );

91 
¥vISRAutoRñﬂdTimîCÆlback
–
xTimîH™dÀ
 
pxExpúedTimî
 );

92 
¥vISRO√ShŸTimîCÆlback
–
xTimîH™dÀ
 
pxExpúedTimî
 );

97 
¥vTe°1_Cª©eTimîsWôhoutScheduÀrRu¬ög
( );

98 
¥vTe°2_CheckTaskAndTimîsInôülSèã
( );

99 
¥vTe°3_CheckAutoRñﬂdExpúeR©es
( );

100 
¥vTe°4_CheckAutoRñﬂdTimîsC™BeSt›≥d
( );

101 
¥vTe°5_CheckBasicO√ShŸTimîBehaviour
( );

102 
¥vTe°6_CheckAutoRñﬂdRe£tBehaviour
( );

103 
¥vRe£tSèπC⁄dôi⁄sF‹NextIãøti⁄
( );

109 vﬁ©ûê
p‹tBASE_TYPE
 
	gxTe°Sètus
 = 
pdPASS
;

113 vﬁ©ûê
	gulLo›Cou¡î
 = 0;

119 
xTimîH™dÀ
 
	gxAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 + 1 ] = { 0 };

120 
	gucAutoRñﬂdTimîCou¡îs
[ 
c⁄figTIMER_QUEUE_LENGTH
 + 1 ] = { 0 };

124 
xTimîH™dÀ
 
	gxO√ShŸTimî
 = 
NULL
;

125 
	gucO√ShŸTimîCou¡î
 = ( ) 0;

130 
xTimîH™dÀ
 
	gxISRAutoRñﬂdTimî
 = 
NULL
;

131 
	gucISRAutoRñﬂdTimîCou¡î
 = ( ) 0;

136 
xTimîH™dÀ
 
	gxISRO√ShŸTimî
 = 
NULL
;

137 
	gucISRO√ShŸTimîCou¡î
 = ( ) 0;

141 
p‹tTickTy≥
 
	gxBa£Pîiod
 = 0;

145 
	$vSèπTimîDemoTask
–
p‹tTickTy≥
 
xBa£PîiodIn
 )

149 
	`mem£t
–
ucAutoRñﬂdTimîCou¡îs
, 0x00, ( ucAutoReloadTimerCounters ) );

150 
	`mem£t
–
xAutoRñﬂdTimîs
, 0x00, ( xAutoReloadTimers ) );

154 
xBa£Pîiod
 = 
xBa£PîiodIn
;

157 
	`¥vTe°1_Cª©eTimîsWôhoutScheduÀrRu¬ög
();

164 if–
xTe°Sètus
 !
pdFAIL
 )

166 
	`xTaskCª©e
–
¥vTimîTe°Task
, ( sig√d 
p‹tCHAR
 * ) "Tm∏T°", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
c⁄figTIMER_TASK_PRIORITY
 - 1, NULL );

168 
	}
}

171 
	$¥vTimîTe°Task
–*
pvP¨amëîs
 )

173 –Ë
pvP¨amëîs
;

176 
xO√ShŸTimî
 = 
	`xTimîCª©e
( ( const signed * ) "Oneshot Timer",

177 
tmrdemoONE_SHOT_TIMER_PERIOD
,

178 
pdFALSE
,

180 
¥vO√ShŸTimîCÆlback
 );

182 if–
xO√ShŸTimî
 =
NULL
 )

184 
xTe°Sètus
 = 
pdFAIL
;

185 
	`c⁄figASSERT
–
xTe°Sètus
 );

191 
	`¥vTe°2_CheckTaskAndTimîsInôülSèã
();

196 
	`¥vTe°3_CheckAutoRñﬂdExpúeR©es
();

200 
	`¥vTe°4_CheckAutoRñﬂdTimîsC™BeSt›≥d
();

204 
	`¥vTe°5_CheckBasicO√ShŸTimîBehaviour
();

207 
	`¥vTe°6_CheckAutoRñﬂdRe£tBehaviour
();

210 
	`¥vRe£tSèπC⁄dôi⁄sF‹NextIãøti⁄
();

212 
	}
}

217 
p‹tBASE_TYPE
 
	$xAªTimîDemoTasksStûlRu¬ög
–
p‹tTickTy≥
 
xCy˛eFªquícy
 )

219 
ulLa°Lo›Cou¡î
 = 0UL;

220 
p‹tTickTy≥
 
xMaxBlockTimeU£dByThe£Te°s
, 
xLo›Cou¡îIn¸emítTimeMax
;

221 
p‹tTickTy≥
 
xIãøti⁄sWôhoutCou¡îIn¸emít
 = (Ö‹tTickTy≥ ) 0, 
xLa°Cy˛eFªquícy
;

223 if–
xLa°Cy˛eFªquícy
 !
xCy˛eFªquícy
 )

227 
xIãøti⁄sWôhoutCou¡îIn¸emít
 = ( 
p‹tTickTy≥
 ) 0;

228 
xLa°Cy˛eFªquícy
 = 
xCy˛eFªquícy
;

235 
xMaxBlockTimeU£dByThe£Te°s
 = ( ( 
p‹tTickTy≥
 ) 
c⁄figTIMER_QUEUE_LENGTH
 ) * 
xBa£Pîiod
;

236 
xLo›Cou¡îIn¸emítTimeMax
 = 
xMaxBlockTimeU£dByThe£Te°s
 / 
xCy˛eFªquícy
;

240 if–
ulLa°Lo›Cou¡î
 =
ulLo›Cou¡î
 )

242 
xIãøti⁄sWôhoutCou¡îIn¸emít
++;

243 if–
xIãøti⁄sWôhoutCou¡îIn¸emít
 > 
xLo›Cou¡îIn¸emítTimeMax
 )

246 
xTe°Sètus
 = 
pdFAIL
;

247 
	`c⁄figASSERT
–
xTe°Sètus
 );

254 
xIãøti⁄sWôhoutCou¡îIn¸emít
 = ( 
p‹tTickTy≥
 ) 0;

257 
ulLa°Lo›Cou¡î
 = 
ulLo›Cou¡î
;

262  
xTe°Sètus
;

263 
	}
}

266 
	$¥vTe°1_Cª©eTimîsWôhoutScheduÀrRu¬ög
( )

268 
p‹tBASE_TYPE
 
xTimî
;

270  
xTimî
 = 0; xTimî < 
c⁄figTIMER_QUEUE_LENGTH
; xTimer++ )

276 
xAutoRñﬂdTimîs
[ 
xTimî
 ] = 
	`xTimîCª©e
( ( const signed * )"FR Timer",

277 ––
xTimî
 + ( 
p‹tTickTy≥
 ) 1 ) * 
xBa£Pîiod
 ),

278 
pdTRUE
,

279 –* ) 
xTimî
,

280 
¥vAutoRñﬂdTimîCÆlback
 );

282 if–
xAutoRñﬂdTimîs
[ 
xTimî
 ] =
NULL
 )

284 
xTe°Sètus
 = 
pdFAIL
;

285 
	`c⁄figASSERT
–
xTe°Sètus
 );

293 if–
	`xTimîSèπ
–
xAutoRñﬂdTimîs
[ 
xTimî
 ], 
p‹tMAX_DELAY
 ) !
pdPASS
 )

295 
xTe°Sètus
 = 
pdFAIL
;

296 
	`c⁄figASSERT
–
xTe°Sètus
 );

304 
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 ] = 
	`xTimîCª©e
( ( const signed * ) "FR Timer",

305 –
c⁄figTIMER_QUEUE_LENGTH
 * 
xBa£Pîiod
 ),

306 
pdTRUE
,

307 –* ) 
xTimî
,

308 
¥vAutoRñﬂdTimîCÆlback
 );

310 if–
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 ] =
NULL
 )

312 
xTe°Sètus
 = 
pdFAIL
;

313 
	`c⁄figASSERT
–
xTe°Sètus
 );

317 if–
	`xTimîSèπ
–
xAutoRñﬂdTimîs
[ 
xTimî
 ], 
p‹tMAX_DELAY
 ) =
pdPASS
 )

321 
xTe°Sètus
 = 
pdFAIL
;

322 
	`c⁄figASSERT
–
xTe°Sètus
 );

328 
xISRAutoRñﬂdTimî
 = 
	`xTimîCª©e
( ( const signed * ) "ISR AR",

330 
pdTRUE
,

331 –* ) 
NULL
,

332 
¥vISRAutoRñﬂdTimîCÆlback
 );

334 
xISRO√ShŸTimî
 = 
	`xTimîCª©e
( ( const signed * ) "ISR OS",

336 
pdFALSE
,

337 –* ) 
NULL
,

338 
¥vISRO√ShŸTimîCÆlback
 );

340 if––
xISRAutoRñﬂdTimî
 =
NULL
 ) || ( 
xISRO√ShŸTimî
 == NULL ) )

342 
xTe°Sètus
 = 
pdFAIL
;

343 
	`c⁄figASSERT
–
xTe°Sètus
 );

345 
	}
}

348 
	$¥vTe°2_CheckTaskAndTimîsInôülSèã
( )

350 
ucTimî
;

359  
ucTimî
 = 0; ucTimî < ( Ë
c⁄figTIMER_QUEUE_LENGTH
; ucTimer++ )

361 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
ucTimî
 ] ) =
pdFALSE
 )

363 
xTe°Sètus
 = 
pdFAIL
;

364 
	`c⁄figASSERT
–
xTe°Sètus
 );

368 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 ] ) !
pdFALSE
 )

370 
xTe°Sètus
 = 
pdFAIL
;

371 
	`c⁄figASSERT
–
xTe°Sètus
 );

373 
	}
}

376 
	$¥vTe°3_CheckAutoRñﬂdExpúeR©es
( )

378 
ucMaxAŒowabÀVÆue
, 
ucMöAŒowabÀVÆue
, 
ucTimî
;

379 
p‹tTickTy≥
 
xBlockPîiod
, 
xTimîPîiod
, 
xEx≥˘edNumbî
;

386 
xBlockPîiod
 = ( ( 
p‹tTickTy≥
 ) 
c⁄figTIMER_QUEUE_LENGTH
 ) * 
xBa£Pîiod
;

387 
	`vTaskDñay
–
xBlockPîiod
 );

391  
ucTimî
 = 0; ucTimî < ( Ë
c⁄figTIMER_QUEUE_LENGTH
; ucTimer++ )

395 
xTimîPîiod
 = ( ( ( 
p‹tTickTy≥
 ) 
ucTimî
 + (Ö‹tTickTy≥ ) 1 ) * 
xBa£Pîiod
 );

396 
xEx≥˘edNumbî
 = 
xBlockPîiod
 / 
xTimîPîiod
;

398 
ucMaxAŒowabÀVÆue
 = ( ( Ë
xEx≥˘edNumbî
 ) ;

399 
ucMöAŒowabÀVÆue
 = ( ( Ë
xEx≥˘edNumbî
 - ( ) 1 );

401 if––
ucAutoRñﬂdTimîCou¡îs
[ 
ucTimî
 ] < 
ucMöAŒowabÀVÆue
 ) ||

402 –
ucAutoRñﬂdTimîCou¡îs
[ 
ucTimî
 ] > 
ucMaxAŒowabÀVÆue
 )

405 
xTe°Sètus
 = 
pdFAIL
;

406 
	`c⁄figASSERT
–
xTe°Sètus
 );

410 if–
xTe°Sètus
 =
pdPASS
 )

414 
ulLo›Cou¡î
++;

416 
	}
}

419 
	$¥vTe°4_CheckAutoRñﬂdTimîsC™BeSt›≥d
( )

421 
ucTimî
;

427  
ucTimî
 = 0; ucTimî < ( Ë
c⁄figTIMER_QUEUE_LENGTH
; ucTimer++ )

430 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
ucTimî
 ] ) =
pdFALSE
 )

432 
xTe°Sètus
 = 
pdFAIL
;

433 
	`c⁄figASSERT
–
xTe°Sètus
 );

439 
	`xTimîSt›
–
xAutoRñﬂdTimîs
[ 
ucTimî
 ], 
tmrdemoDONT_BLOCK
 );

442 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
ucTimî
 ] ) !
pdFALSE
 )

444 
xTe°Sètus
 = 
pdFAIL
;

445 
	`c⁄figASSERT
–
xTe°Sètus
 );

449 
	`èskENTER_CRITICAL
();

455 if–
ucAutoRñﬂdTimîCou¡îs
[ 
c⁄figTIMER_QUEUE_LENGTH
 ] != ( ) 0 )

457 
xTe°Sètus
 = 
pdFAIL
;

458 
	`c⁄figASSERT
–
xTe°Sètus
 );

462 
	`mem£t
––* ) 
ucAutoRñﬂdTimîCou¡îs
, 0, ( ucAutoReloadTimerCounters ) );

464 
	`èskEXIT_CRITICAL
();

468 
	`vTaskDñay
–––
p‹tTickTy≥
 ) 
c⁄figTIMER_QUEUE_LENGTH
 ) * 
xBa£Pîiod
 );

469  
ucTimî
 = 0; ucTimî < ( Ë
c⁄figTIMER_QUEUE_LENGTH
; ucTimer++ )

471 if–
ucAutoRñﬂdTimîCou¡îs
[ 
ucTimî
 ] != ( ) 0 )

473 
xTe°Sètus
 = 
pdFAIL
;

474 
	`c⁄figASSERT
–
xTe°Sètus
 );

478 if–
xTe°Sètus
 =
pdPASS
 )

482 
ulLo›Cou¡î
++;

484 
	}
}

487 
	$¥vTe°5_CheckBasicO√ShŸTimîBehaviour
( )

493 if–
	`xTimîIsTimîA˘ive
–
xO√ShŸTimî
 ) !
pdFALSE
 )

495 
xTe°Sètus
 = 
pdFAIL
;

496 
	`c⁄figASSERT
–
xTe°Sètus
 );

499 if–
ucO√ShŸTimîCou¡î
 != ( ) 0 )

501 
xTe°Sètus
 = 
pdFAIL
;

502 
	`c⁄figASSERT
–
xTe°Sètus
 );

506 
	`xTimîSèπ
–
xO√ShŸTimî
, 
tmrdemoDONT_BLOCK
 );

507 if–
	`xTimîIsTimîA˘ive
–
xO√ShŸTimî
 ) =
pdFALSE
 )

509 
xTe°Sètus
 = 
pdFAIL
;

510 
	`c⁄figASSERT
–
xTe°Sètus
 );

516 
	`vTaskDñay
–
tmrdemoONE_SHOT_TIMER_PERIOD
 * ( 
p‹tTickTy≥
 ) 3 );

518 if–
	`xTimîIsTimîA˘ive
–
xO√ShŸTimî
 ) !
pdFALSE
 )

520 
xTe°Sètus
 = 
pdFAIL
;

521 
	`c⁄figASSERT
–
xTe°Sètus
 );

524 if–
ucO√ShŸTimîCou¡î
 != ( ) 1 )

526 
xTe°Sètus
 = 
pdFAIL
;

527 
	`c⁄figASSERT
–
xTe°Sètus
 );

532 
ucO√ShŸTimîCou¡î
 = ( ) 0;

535 if–
xTe°Sètus
 =
pdPASS
 )

539 
ulLo›Cou¡î
++;

541 
	}
}

544 
	$¥vTe°6_CheckAutoRñﬂdRe£tBehaviour
( )

546 
ucTimî
;

551 
	`xTimîSèπ
–
xO√ShŸTimî
, 
tmrdemoDONT_BLOCK
 );

552 if–
	`xTimîIsTimîA˘ive
–
xO√ShŸTimî
 ) =
pdFALSE
 )

554 
xTe°Sètus
 = 
pdFAIL
;

555 
	`c⁄figASSERT
–
xTe°Sètus
 );

560 
	`xTimîSèπ
–
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ], 
tmrdemoDONT_BLOCK
 );

561 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ] ) =
pdFALSE
 )

563 
xTe°Sètus
 = 
pdFAIL
;

564 
	`c⁄figASSERT
–
xTe°Sètus
 );

567  
ucTimî
 = 0; ucTimî < 
åmdemoNUM_TIMER_RESETS
; ucTimer++ )

572 
	`vTaskDñay
–
tmrdemoONE_SHOT_TIMER_PERIOD
 / 2 );

576 if–
	`xTimîIsTimîA˘ive
–
xO√ShŸTimî
 ) =
pdFALSE
 )

578 
xTe°Sètus
 = 
pdFAIL
;

579 
	`c⁄figASSERT
–
xTe°Sètus
 );

582 if–
ucO√ShŸTimîCou¡î
 != ( ) 0 )

584 
xTe°Sètus
 = 
pdFAIL
;

585 
	`c⁄figASSERT
–
xTe°Sètus
 );

588 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ] ) =
pdFALSE
 )

590 
xTe°Sètus
 = 
pdFAIL
;

591 
	`c⁄figASSERT
–
xTe°Sètus
 );

594 if–
ucAutoRñﬂdTimîCou¡îs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ] != ( ) 0 )

596 
xTe°Sètus
 = 
pdFAIL
;

597 
	`c⁄figASSERT
–
xTe°Sètus
 );

601 
	`xTimîRe£t
–
xO√ShŸTimî
, 
tmrdemoDONT_BLOCK
 );

602 
	`xTimîRe£t
–
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ], 
tmrdemoDONT_BLOCK
 );

604 if–
xTe°Sètus
 =
pdPASS
 )

608 
ulLo›Cou¡î
++;

613 
	`vTaskDñay
–––
p‹tTickTy≥
 ) 
c⁄figTIMER_QUEUE_LENGTH
 ) * 
xBa£Pîiod
 );

617 if–
ucO√ShŸTimîCou¡î
 != ( ) 1 )

619 
xTe°Sètus
 = 
pdFAIL
;

620 
	`c⁄figASSERT
–
xTe°Sètus
 );

623 if–
ucAutoRñﬂdTimîCou¡îs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ] == 0 )

625 
xTe°Sètus
 = 
pdFAIL
;

626 
	`c⁄figASSERT
–
xTe°Sètus
 );

631 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ] ) =
pdFALSE
 )

633 
xTe°Sètus
 = 
pdFAIL
;

634 
	`c⁄figASSERT
–
xTe°Sètus
 );

637 if–
	`xTimîIsTimîA˘ive
–
xO√ShŸTimî
 ) =
pdTRUE
 )

639 
xTe°Sètus
 = 
pdFAIL
;

640 
	`c⁄figASSERT
–
xTe°Sètus
 );

644 
	`xTimîSt›
–
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ], 
tmrdemoDONT_BLOCK
 );

646 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ] ) !
pdFALSE
 )

648 
xTe°Sètus
 = 
pdFAIL
;

649 
	`c⁄figASSERT
–
xTe°Sètus
 );

654 
ucAutoRñﬂdTimîCou¡îs
[ 
c⁄figTIMER_QUEUE_LENGTH
 - 1 ] = ( ) 0;

655 
ucO√ShŸTimîCou¡î
 = ( ) 0;

657 if–
xTe°Sètus
 =
pdPASS
 )

661 
ulLo›Cou¡î
++;

663 
	}
}

666 
	$¥vRe£tSèπC⁄dôi⁄sF‹NextIãøti⁄
( )

668 
ucTimî
;

673  
ucTimî
 = 0; ucTimî < ( Ë
c⁄figTIMER_QUEUE_LENGTH
; ucTimer++ )

676 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
ucTimî
 ] ) !
pdFALSE
 )

678 
xTe°Sètus
 = 
pdFAIL
;

679 
	`c⁄figASSERT
–
xTe°Sètus
 );

685 
	`xTimîSèπ
–
xAutoRñﬂdTimîs
[ 
ucTimî
 ], 
tmrdemoDONT_BLOCK
 );

688 if–
	`xTimîIsTimîA˘ive
–
xAutoRñﬂdTimîs
[ 
ucTimî
 ] ) =
pdFALSE
 )

690 
xTe°Sètus
 = 
pdFAIL
;

691 
	`c⁄figASSERT
–
xTe°Sètus
 );

695 if–
xTe°Sètus
 =
pdPASS
 )

699 
ulLo›Cou¡î
++;

701 
	}
}

704 
	$vTimîPîiodicISRTe°s
( )

706 
p‹tTickTy≥
 
uxTick
 = (ÖortTickType ) -1;

711 
p‹tBASE_TYPE
 
xHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

712 
p‹tTickTy≥
 
xM¨gö
;

714 if–
c⁄figTIMER_TASK_PRIORITY
 !–
c⁄figMAX_PRIORITIES
 - 1 ) )

722 
xM¨gö
 = 5;

726 
xM¨gö
 = 1;

736 if–
	`xTaskGëScheduÀrSèã
(Ë!
èskSCHEDULER_RUNNING
 )

738 
uxTick
 = ( 
p‹tTickTy≥
 ) -1;

742 
uxTick
++;

745 if–
uxTick
 == 0 )

749 
ucISRAutoRñﬂdTimîCou¡î
 = 0;

750 
ucISRO√ShŸTimîCou¡î
 = 0;

751 
	`xTimîCh™gePîiodFromISR
–
xISRAutoRñﬂdTimî
, 
xBa£Pîiod
, &
xHighîPri‹ôyTaskWokí
 );

752 
	`xTimîCh™gePîiodFromISR
–
xISRO√ShŸTimî
, 
xBa£Pîiod
, &
xHighîPri‹ôyTaskWokí
 );

754 if–
uxTick
 =
xBa£Pîiod
 )

757 if––
ucISRAutoRñﬂdTimîCou¡î
 !0 ) || ( 
ucISRO√ShŸTimîCou¡î
 != 0 ) )

759 
xTe°Sètus
 = 
pdFAIL
;

760 
	`c⁄figASSERT
–
xTe°Sètus
 );

763 if–
uxTick
 =–
xBa£Pîiod
 + 
xM¨gö
 ) )

767 if––
ucISRAutoRñﬂdTimîCou¡î
 !1 ) || ( 
ucISRO√ShŸTimîCou¡î
 != 1 ) )

769 
xTe°Sètus
 = 
pdFAIL
;

770 
	`c⁄figASSERT
–
xTe°Sètus
 );

773 if–
uxTick
 =–2 * 
xBa£Pîiod
 ) )

778 if––
ucISRAutoRñﬂdTimîCou¡î
 !1 ) || ( 
ucISRO√ShŸTimîCou¡î
 != 1 ) )

780 
xTe°Sètus
 = 
pdFAIL
;

781 
	`c⁄figASSERT
–
xTe°Sètus
 );

784 if–
uxTick
 =––2 * 
xBa£Pîiod
 ) + 
xM¨gö
 ) )

789 if–
ucISRAutoRñﬂdTimîCou¡î
 != 2 )

791 
xTe°Sètus
 = 
pdFAIL
;

792 
	`c⁄figASSERT
–
xTe°Sètus
 );

795 if–
ucISRO√ShŸTimîCou¡î
 != 1 )

797 
xTe°Sètus
 = 
pdFAIL
;

798 
	`c⁄figASSERT
–
xTe°Sètus
 );

801 if–
uxTick
 =––2 * 
xBa£Pîiod
 ) + ( xBa£Pîiod >> ( 
p‹tTickTy≥
 ) 2U ) ) )

806 if–
ucISRAutoRñﬂdTimîCou¡î
 != 2 )

808 
xTe°Sètus
 = 
pdFAIL
;

809 
	`c⁄figASSERT
–
xTe°Sètus
 );

812 if–
ucISRO√ShŸTimîCou¡î
 != 1 )

814 
xTe°Sètus
 = 
pdFAIL
;

815 
	`c⁄figASSERT
–
xTe°Sètus
 );

818 if–
uxTick
 =–3 * 
xBa£Pîiod
 ) )

821 
	`xTimîSèπFromISR
–
xISRO√ShŸTimî
, &
xHighîPri‹ôyTaskWokí
 );

823 if–
uxTick
 =––3 * 
xBa£Pîiod
 ) + 
xM¨gö
 ) )

828 if–
ucISRAutoRñﬂdTimîCou¡î
 != 3 )

830 
xTe°Sètus
 = 
pdFAIL
;

831 
	`c⁄figASSERT
–
xTe°Sètus
 );

834 if–
ucISRO√ShŸTimîCou¡î
 != 1 )

836 
xTe°Sètus
 = 
pdFAIL
;

837 
	`c⁄figASSERT
–
xTe°Sètus
 );

842 
	`xTimîSt›FromISR
–
xISRAutoRñﬂdTimî
, &
xHighîPri‹ôyTaskWokí
 );

844 if–
uxTick
 =–4 * 
xBa£Pîiod
 ) )

849 if–
ucISRAutoRñﬂdTimîCou¡î
 != 3 )

851 
xTe°Sètus
 = 
pdFAIL
;

852 
	`c⁄figASSERT
–
xTe°Sètus
 );

855 if–
ucISRO√ShŸTimîCou¡î
 != 1 )

857 
xTe°Sètus
 = 
pdFAIL
;

858 
	`c⁄figASSERT
–
xTe°Sètus
 );

861 if–
uxTick
 =––4 * 
xBa£Pîiod
 ) + 
xM¨gö
 ) )

866 if–
ucISRAutoRñﬂdTimîCou¡î
 != 3 )

868 
xTe°Sètus
 = 
pdFAIL
;

869 
	`c⁄figASSERT
–
xTe°Sètus
 );

872 if–
ucISRO√ShŸTimîCou¡î
 != 2 )

874 
xTe°Sètus
 = 
pdFAIL
;

875 
	`c⁄figASSERT
–
xTe°Sètus
 );

878 if–
uxTick
 =––8 * 
xBa£Pîiod
 ) + 
xM¨gö
 ) )

883 if–
ucISRAutoRñﬂdTimîCou¡î
 != 3 )

885 
xTe°Sètus
 = 
pdFAIL
;

886 
	`c⁄figASSERT
–
xTe°Sètus
 );

889 if–
ucISRO√ShŸTimîCou¡î
 != 2 )

891 
xTe°Sètus
 = 
pdFAIL
;

892 
	`c⁄figASSERT
–
xTe°Sètus
 );

896 
	`xTimîRe£tFromISR
–
xISRO√ShŸTimî
, &
xHighîPri‹ôyTaskWokí
 );

898 if–
uxTick
 =–9 * 
xBa£Pîiod
 ) )

903 if–
ucISRAutoRñﬂdTimîCou¡î
 != 3 )

905 
xTe°Sètus
 = 
pdFAIL
;

906 
	`c⁄figASSERT
–
xTe°Sètus
 );

909 if–
ucISRO√ShŸTimîCou¡î
 != 2 )

911 
xTe°Sètus
 = 
pdFAIL
;

912 
	`c⁄figASSERT
–
xTe°Sètus
 );

915 
	`xTimîRe£tFromISR
–
xISRO√ShŸTimî
, &
xHighîPri‹ôyTaskWokí
 );

917 if–
uxTick
 =–10 * 
xBa£Pîiod
 ) )

922 if–
ucISRAutoRñﬂdTimîCou¡î
 != 3 )

924 
xTe°Sètus
 = 
pdFAIL
;

925 
	`c⁄figASSERT
–
xTe°Sètus
 );

928 if–
ucISRO√ShŸTimîCou¡î
 != 2 )

930 
xTe°Sètus
 = 
pdFAIL
;

931 
	`c⁄figASSERT
–
xTe°Sètus
 );

934 
	`xTimîRe£tFromISR
–
xISRO√ShŸTimî
, &
xHighîPri‹ôyTaskWokí
 );

936 if–
uxTick
 =–11 * 
xBa£Pîiod
 ) )

941 if–
ucISRAutoRñﬂdTimîCou¡î
 != 3 )

943 
xTe°Sètus
 = 
pdFAIL
;

944 
	`c⁄figASSERT
–
xTe°Sètus
 );

947 if–
ucISRO√ShŸTimîCou¡î
 != 2 )

949 
xTe°Sètus
 = 
pdFAIL
;

950 
	`c⁄figASSERT
–
xTe°Sètus
 );

953 
	`xTimîRe£tFromISR
–
xISRO√ShŸTimî
, &
xHighîPri‹ôyTaskWokí
 );

955 if–
uxTick
 =––12 * 
xBa£Pîiod
 ) + 
xM¨gö
 ) )

962 if–
ucISRAutoRñﬂdTimîCou¡î
 != 3 )

964 
xTe°Sètus
 = 
pdFAIL
;

965 
	`c⁄figASSERT
–
xTe°Sètus
 );

968 if–
ucISRO√ShŸTimîCou¡î
 != 3 )

970 
xTe°Sètus
 = 
pdFAIL
;

971 
	`c⁄figASSERT
–
xTe°Sètus
 );

974 if–
uxTick
 =–15 * 
xBa£Pîiod
 ) )

979 if–
ucISRAutoRñﬂdTimîCou¡î
 != 3 )

981 
xTe°Sètus
 = 
pdFAIL
;

982 
	`c⁄figASSERT
–
xTe°Sètus
 );

985 if–
ucISRO√ShŸTimîCou¡î
 != 3 )

987 
xTe°Sètus
 = 
pdFAIL
;

988 
	`c⁄figASSERT
–
xTe°Sètus
 );

991 
uxTick
 = ( 
p‹tTickTy≥
 ) -1;

993 
	}
}

998 
	$¥vAutoRñﬂdTimîCÆlback
–
xTimîH™dÀ
 
pxExpúedTimî
 )

1000 
p‹tBASE_TYPE
 
xTimîID
;

1002 
xTimîID
 = ( 
p‹tBASE_TYPE
 ) 
	`pvTimîGëTimîID
–
pxExpúedTimî
 );

1003 if–
xTimîID
 <–
c⁄figTIMER_QUEUE_LENGTH
 + 1 ) )

1005 –
ucAutoRñﬂdTimîCou¡îs
[ 
xTimîID
 ] )++;

1010 
xTe°Sètus
 = 
pdFAIL
;

1011 
	`c⁄figASSERT
–
xTe°Sètus
 );

1013 
	}
}

1016 
	$¥vO√ShŸTimîCÆlback
–
xTimîH™dÀ
 
pxExpúedTimî
 )

1020 –Ë
pxExpúedTimî
;

1022 
ucO√ShŸTimîCou¡î
++;

1023 
	}
}

1026 
	$¥vISRAutoRñﬂdTimîCÆlback
–
xTimîH™dÀ
 
pxExpúedTimî
 )

1030 –Ë
pxExpúedTimî
;

1032 
ucISRAutoRñﬂdTimîCou¡î
++;

1033 
	}
}

1036 
	$¥vISRO√ShŸTimîCÆlback
–
xTimîH™dÀ
 
pxExpúedTimî
 )

1040 –Ë
pxExpúedTimî
;

1042 
ucISRO√ShŸTimîCou¡î
++;

1043 
	}
}

	@Demo/Common/Minimal/blocktim.c

61 
	~"FªeRTOS.h
"

62 
	~"èsk.h
"

63 
	~"queue.h
"

66 
	~"blocktim.h
"

69 #i‚de‡
bktPRIMARY_PRIORITY


70 
	#bktPRIMARY_PRIORITY
 ( 
c⁄figMAX_PRIORITIES
 - 3 )

	)

73 #i‚de‡
bktSECONDARY_PRIORITY


74 
	#bktSECONDARY_PRIORITY
 ( 
c⁄figMAX_PRIORITIES
 - 4 )

	)

78 
	#bktQUEUE_LENGTH
 ( 5 )

	)

79 
	#bktSHORT_WAIT
 ( ( ( 
p‹tTickTy≥
 ) 20 ) / 
p‹tTICK_RATE_MS
 )

	)

80 
	#bktPRIMARY_BLOCK_TIME
 ( 10 )

	)

81 
	#bktALLOWABLE_MARGIN
 ( 15 )

	)

82 
	#bktTIME_TO_BLOCK
 ( 175 )

	)

83 
	#bktDONT_BLOCK
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

84 
	#bktRUN_INDICATOR
 ( ( 
p‹tBASE_TYPE
 ) 0x55 )

	)

87 
xQueueH™dÀ
 
	gxTe°Queue
;

91 
xTaskH™dÀ
 
	gxSec⁄d¨y
;

94 vﬁ©ûê
p‹tBASE_TYPE
 
	gxPrim¨yCy˛es
 = 0, 
	gxSec⁄d¨yCy˛es
 = 0;

95 vﬁ©ûê
p‹tBASE_TYPE
 
	gxEº‹Occuºed
 = 
pdFALSE
;

99 vﬁ©ûê
p‹tBASE_TYPE
 
	gxRunIndiˇt‹
;

102 
vPrim¨yBlockTimeTe°Task
–*
pvP¨amëîs
 );

103 
vSec⁄d¨yBlockTimeTe°Task
–*
pvP¨amëîs
 );

107 
	$vCª©eBlockTimeTasks
( )

110 
xTe°Queue
 = 
	`xQueueCª©e
–
bktQUEUE_LENGTH
, –
p‹tBASE_TYPE
 ) );

118 
	`vQueueAddToRegi°ry
–
xTe°Queue
, ( signed * ) "Block_Time_Queue" );

121 
	`xTaskCª©e
–
vPrim¨yBlockTimeTe°Task
, ( sig√d * )"BTe°1", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
bktPRIMARY_PRIORITY
, NULL );

122 
	`xTaskCª©e
–
vSec⁄d¨yBlockTimeTe°Task
, ( sig√d * )"BTe°2", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
bktSECONDARY_PRIORITY
, &
xSec⁄d¨y
 );

123 
	}
}

126 
	$vPrim¨yBlockTimeTe°Task
–*
pvP¨amëîs
 )

128 
p‹tBASE_TYPE
 
xIãm
, 
xD©a
;

129 
p‹tTickTy≥
 
xTimeWhíBlockög
;

130 
p‹tTickTy≥
 
xTimeToBlock
, 
xBlockedTime
;

132 –Ë
pvP¨amëîs
;

140  
xIãm
 = 0; xIãm < 
bktQUEUE_LENGTH
; xItem++ )

144 
xTimeToBlock
 = 
bktPRIMARY_BLOCK_TIME
 << 
xIãm
;

146 
xTimeWhíBlockög
 = 
	`xTaskGëTickCou¡
();

150 if–
	`xQueueRe˚ive
–
xTe°Queue
, &
xD©a
, 
xTimeToBlock
 ) !
îrQUEUE_EMPTY
 )

152 
xEº‹Occuºed
 = 
pdTRUE
;

156 
xBlockedTime
 = 
	`xTaskGëTickCou¡
(Ë- 
xTimeWhíBlockög
;

158 if–
xBlockedTime
 < 
xTimeToBlock
 )

161 
xEº‹Occuºed
 = 
pdTRUE
;

164 if–
xBlockedTime
 > ( 
xTimeToBlock
 + 
bktALLOWABLE_MARGIN
 ) )

169 
xEº‹Occuºed
 = 
pdTRUE
;

179  
xIãm
 = 0; xIãm < 
bktQUEUE_LENGTH
; xItem++ )

181 if–
	`xQueueSíd
–
xTe°Queue
, &
xIãm
, 
bktDONT_BLOCK
 ) !
pdPASS
 )

183 
xEº‹Occuºed
 = 
pdTRUE
;

186 #i‡
c⁄figUSE_PREEMPTION
 == 0

187 
	`èskYIELD
();

191  
xIãm
 = 0; xIãm < 
bktQUEUE_LENGTH
; xItem++ )

195 
xTimeToBlock
 = 
bktPRIMARY_BLOCK_TIME
 << 
xIãm
;

197 
xTimeWhíBlockög
 = 
	`xTaskGëTickCou¡
();

201 if–
	`xQueueSíd
–
xTe°Queue
, &
xIãm
, 
xTimeToBlock
 ) !
îrQUEUE_FULL
 )

203 
xEº‹Occuºed
 = 
pdTRUE
;

207 
xBlockedTime
 = 
	`xTaskGëTickCou¡
(Ë- 
xTimeWhíBlockög
;

209 if–
xBlockedTime
 < 
xTimeToBlock
 )

212 
xEº‹Occuºed
 = 
pdTRUE
;

215 if–
xBlockedTime
 > ( 
xTimeToBlock
 + 
bktALLOWABLE_MARGIN
 ) )

220 
xEº‹Occuºed
 = 
pdTRUE
;

236 
xRunIndiˇt‹
 = 0;

237 
	`vTaskResume
–
xSec⁄d¨y
 );

240  
xRunIndiˇt‹
 !
bktRUN_INDICATOR
 )

243 
	`vTaskDñay
–
bktSHORT_WAIT
 );

246 
	`vTaskDñay
–
bktSHORT_WAIT
 );

247 
xRunIndiˇt‹
 = 0;

249  
xIãm
 = 0; xIãm < 
bktQUEUE_LENGTH
; xItem++ )

253 if–
	`xQueueRe˚ive
–
xTe°Queue
, &
xD©a
, 
bktDONT_BLOCK
 ) !
pdPASS
 )

255 
xEº‹Occuºed
 = 
pdTRUE
;

261 if–
	`xQueueSíd
–
xTe°Queue
, &
xIãm
, 
bktDONT_BLOCK
 ) !
pdPASS
 )

263 
xEº‹Occuºed
 = 
pdTRUE
;

266 if–
xRunIndiˇt‹
 =
bktRUN_INDICATOR
 )

269 
xEº‹Occuºed
 = 
pdTRUE
;

274 
	`vTaskPri‹ôySë
–
xSec⁄d¨y
, 
bktPRIMARY_PRIORITY
 + 2 );

278 if–
xRunIndiˇt‹
 =
bktRUN_INDICATOR
 )

282 
xEº‹Occuºed
 = 
pdTRUE
;

286 
	`vTaskPri‹ôySë
–
xSec⁄d¨y
, 
bktSECONDARY_PRIORITY
 );

291  
xRunIndiˇt‹
 !
bktRUN_INDICATOR
 )

293 
	`vTaskDñay
–
bktSHORT_WAIT
 );

295 
	`vTaskDñay
–
bktSHORT_WAIT
 );

296 
xRunIndiˇt‹
 = 0;

306  
xIãm
 = 0; xIãm < 
bktQUEUE_LENGTH
; xItem++ )

308 if–
	`xQueueRe˚ive
–
xTe°Queue
, &
xD©a
, 
bktDONT_BLOCK
 ) !
pdPASS
 )

310 
xEº‹Occuºed
 = 
pdTRUE
;

316 
	`vTaskResume
–
xSec⁄d¨y
 );

319  
xRunIndiˇt‹
 !
bktRUN_INDICATOR
 )

321 
	`vTaskDñay
–
bktSHORT_WAIT
 );

323 
	`vTaskDñay
–
bktSHORT_WAIT
 );

324 
xRunIndiˇt‹
 = 0;

326  
xIãm
 = 0; xIãm < 
bktQUEUE_LENGTH
; xItem++ )

330 if–
	`xQueueSíd
–
xTe°Queue
, &
xIãm
, 
bktDONT_BLOCK
 ) !
pdPASS
 )

332 
xEº‹Occuºed
 = 
pdTRUE
;

338 if–
	`xQueueRe˚ive
–
xTe°Queue
, &
xD©a
, 
bktDONT_BLOCK
 ) !
pdPASS
 )

340 
xEº‹Occuºed
 = 
pdTRUE
;

343 if–
xRunIndiˇt‹
 =
bktRUN_INDICATOR
 )

346 
xEº‹Occuºed
 = 
pdTRUE
;

351 
	`vTaskPri‹ôySë
–
xSec⁄d¨y
, 
bktPRIMARY_PRIORITY
 + 2 );

355 if–
xRunIndiˇt‹
 =
bktRUN_INDICATOR
 )

359 
xEº‹Occuºed
 = 
pdTRUE
;

361 
	`vTaskPri‹ôySë
–
xSec⁄d¨y
, 
bktSECONDARY_PRIORITY
 );

366  
xRunIndiˇt‹
 !
bktRUN_INDICATOR
 )

368 
	`vTaskDñay
–
bktSHORT_WAIT
 );

370 
	`vTaskDñay
–
bktSHORT_WAIT
 );

372 
xPrim¨yCy˛es
++;

374 
	}
}

377 
	$vSec⁄d¨yBlockTimeTe°Task
–*
pvP¨amëîs
 )

379 
p‹tTickTy≥
 
xTimeWhíBlockög
, 
xBlockedTime
;

380 
p‹tBASE_TYPE
 
xD©a
;

382 –Ë
pvP¨amëîs
;

390 
	`vTaskSu•íd
–
NULL
 );

398 
xTimeWhíBlockög
 = 
	`xTaskGëTickCou¡
();

402 
xD©a
 = 0;

403 
xRunIndiˇt‹
 = 
bktRUN_INDICATOR
;

404 if–
	`xQueueSíd
–
xTe°Queue
, &
xD©a
, 
bktTIME_TO_BLOCK
 ) !
îrQUEUE_FULL
 )

406 
xEº‹Occuºed
 = 
pdTRUE
;

410 
xBlockedTime
 = 
	`xTaskGëTickCou¡
(Ë- 
xTimeWhíBlockög
;

413 if–
xBlockedTime
 < 
bktTIME_TO_BLOCK
 )

415 
xEº‹Occuºed
 = 
pdTRUE
;

421 if–
xBlockedTime
 > ( 
bktTIME_TO_BLOCK
 + 
bktALLOWABLE_MARGIN
 ) )

423 
xEº‹Occuºed
 = 
pdTRUE
;

427 
xRunIndiˇt‹
 = 
bktRUN_INDICATOR
;

428 
	`vTaskSu•íd
–
NULL
 );

434 
xTimeWhíBlockög
 = 
	`xTaskGëTickCou¡
();

438 
xRunIndiˇt‹
 = 
bktRUN_INDICATOR
;

439 if–
	`xQueueRe˚ive
–
xTe°Queue
, &
xD©a
, 
bktTIME_TO_BLOCK
 ) !
îrQUEUE_EMPTY
 )

441 
xEº‹Occuºed
 = 
pdTRUE
;

444 
xBlockedTime
 = 
	`xTaskGëTickCou¡
(Ë- 
xTimeWhíBlockög
;

447 if–
xBlockedTime
 < 
bktTIME_TO_BLOCK
 )

449 
xEº‹Occuºed
 = 
pdTRUE
;

455 if–
xBlockedTime
 > ( 
bktTIME_TO_BLOCK
 + 
bktALLOWABLE_MARGIN
 ) )

457 
xEº‹Occuºed
 = 
pdTRUE
;

460 
xRunIndiˇt‹
 = 
bktRUN_INDICATOR
;

462 
xSec⁄d¨yCy˛es
++;

464 
	}
}

467 
p‹tBASE_TYPE
 
	$xAªBlockTimeTe°TasksStûlRu¬ög
( )

469 
p‹tBASE_TYPE
 
xLa°Prim¨yCy˛eCou¡
 = 0, 
xLa°Sec⁄d¨yCy˛eCou¡
 = 0;

470 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdPASS
;

474 if–
xPrim¨yCy˛es
 =
xLa°Prim¨yCy˛eCou¡
 )

476 
xRëu∫
 = 
pdFAIL
;

479 if–
xSec⁄d¨yCy˛es
 =
xLa°Sec⁄d¨yCy˛eCou¡
 )

481 
xRëu∫
 = 
pdFAIL
;

484 if–
xEº‹Occuºed
 =
pdTRUE
 )

486 
xRëu∫
 = 
pdFAIL
;

489 
xLa°Sec⁄d¨yCy˛eCou¡
 = 
xSec⁄d¨yCy˛es
;

490 
xLa°Prim¨yCy˛eCou¡
 = 
xPrim¨yCy˛es
;

492  
xRëu∫
;

493 
	}
}

	@Demo/Common/Minimal/comtest.c

87 
	~<°dlib.h
>

88 
	~"FªeRTOS.h
"

89 
	~"èsk.h
"

92 
	~"£rül.h
"

93 
	~"comã°2.h
"

94 
	~"∑πe°.h
"

96 
	#comSTACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

97 
	#comTX_LED_OFFSET
 ( 0 )

	)

98 
	#comRX_LED_OFFSET
 ( 1 )

	)

99 
	#comTOTAL_PERMISSIBLE_ERRORS
 ( 2 )

	)

103 
	#comTX_MAX_BLOCK_TIME
 ( ( 
p‹tTickTy≥
 ) 0x96 )

	)

104 
	#comTX_MIN_BLOCK_TIME
 ( ( 
p‹tTickTy≥
 ) 0x32 )

	)

105 
	#comOFFSET_TIME
 ( ( 
p‹tTickTy≥
 ) 3 )

	)

109 
	#comNO_BLOCK
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

112 
	#comRX_BLOCK_TIME
 ( ( 
p‹tTickTy≥
 ) 0xfff‡)

	)

115 
	#comFIRST_BYTE
 ( 'A' )

	)

116 
	#comLAST_BYTE
 ( 'X' )

	)

118 
	#comBUFFER_LEN
 ( ( 
p‹tBASE_TYPE
 ) ( 
comLAST_BYTE
 - 
comFIRST_BYTE
 ) + ( p‹tBASE_TYPE ) 1 )

	)

119 
	#comINITIAL_RX_COUNT_VALUE
 ( 0 )

	)

122 
xComP‹tH™dÀ
 
	gxP‹t
 = 
NULL
;

125 
p‹tTASK_FUNCTION_PROTO
–
vComTxTask
, 
pvP¨amëîs
 );

128 
p‹tTASK_FUNCTION_PROTO
–
vComRxTask
, 
pvP¨amëîs
 );

133 
p‹tBASE_TYPE
 
	guxBa£LED
 = 0;

138 vﬁ©ûê
p‹tBASE_TYPE
 
	guxRxLo›s
 = 
comINITIAL_RX_COUNT_VALUE
;

142 
	$vA…SèπComTe°Tasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
, 
ulBaudR©e
, p‹tBASE_TYPE 
uxLED
 )

145 
uxBa£LED
 = 
uxLED
;

146 
xP‹t
 = 
	`xSîülP‹tInôMöimÆ
–
ulBaudR©e
, 
comBUFFER_LEN
 );

149 
	`xTaskCª©e
–
vComTxTask
, ( sig√d * ) "COMTx", 
comSTACK_SIZE
, 
NULL
, 
uxPri‹ôy
 - 1, ( 
xTaskH™dÀ
 * ) NULL );

150 
	`xTaskCª©e
–
vComRxTask
, ( sig√d * ) "COMRx", 
comSTACK_SIZE
, 
NULL
, 
uxPri‹ôy
, ( 
xTaskH™dÀ
 * ) NULL );

151 
	}
}

154 
	$p‹tTASK_FUNCTION
–
vComTxTask
, 
pvP¨amëîs
 )

156 sig√d 
cByãToSíd
;

157 
p‹tTickTy≥
 
xTimeToWaô
;

160 –Ë
pvP¨amëîs
;

166  
cByãToSíd
 = 
comFIRST_BYTE
; cByãToSíd <
comLAST_BYTE
; cByteToSend++ )

168 if–
	`xSîülPutCh¨
–
xP‹t
, 
cByãToSíd
, 
comNO_BLOCK
 ) =
pdPASS
 )

180 
xTimeToWaô
 = 
	`xTaskGëTickCou¡
(Ë+ 
comOFFSET_TIME
;

183 
xTimeToWaô
 %
comTX_MAX_BLOCK_TIME
;

186 if–
xTimeToWaô
 < 
comTX_MIN_BLOCK_TIME
 )

188 
xTimeToWaô
 = 
comTX_MIN_BLOCK_TIME
;

191 
	`vTaskDñay
–
xTimeToWaô
 );

193 
	}
}

196 
	$p‹tTASK_FUNCTION
–
vComRxTask
, 
pvP¨amëîs
 )

198 sig√d 
cEx≥˘edByã
, 
cByãRxed
;

199 
p‹tBASE_TYPE
 
xResyncRequúed
 = 
pdFALSE
, 
xEº‹Occuºed
 =ÖdFALSE;

202 –Ë
pvP¨amëîs
;

208  
cEx≥˘edByã
 = 
comFIRST_BYTE
; cEx≥˘edByã <
comLAST_BYTE
; cExpectedByte++ )

212 if–
	`xSîülGëCh¨
–
xP‹t
, &
cByãRxed
, 
comRX_BLOCK_TIME
 ) )

217 if–
cByãRxed
 =
cEx≥˘edByã
 )

223 
xResyncRequúed
 = 
pdTRUE
;

235 if–
xResyncRequúed
 =
pdTRUE
 )

237  
cByãRxed
 !
comLAST_BYTE
 )

240 
	`xSîülGëCh¨
–
xP‹t
, &
cByãRxed
, 
comRX_BLOCK_TIME
 );

247 
xEº‹Occuºed
++;

250 
xResyncRequúed
 = 
pdFALSE
;

254 if–
xEº‹Occuºed
 < 
comTOTAL_PERMISSIBLE_ERRORS
 )

262 
uxRxLo›s
++;

266 
	}
}

269 
p‹tBASE_TYPE
 
	$xAªComTe°TasksStûlRu¬ög
( )

271 
p‹tBASE_TYPE
 
xRëu∫
;

276 if–
uxRxLo›s
 =
comINITIAL_RX_COUNT_VALUE
 )

278 
xRëu∫
 = 
pdFALSE
;

282 
xRëu∫
 = 
pdTRUE
;

287 
uxRxLo›s
 = 
comINITIAL_RX_COUNT_VALUE
;

289  
xRëu∫
;

290 
	}
}

	@Demo/Common/Minimal/countsem.c

60 
	~"FªeRTOS.h
"

61 
	~"èsk.h
"

62 
	~"£mphr.h
"

65 
	~"cou¡£m.h
"

68 
	#cou¡MAX_COUNT_VALUE
 ( 200 )

	)

74 
	#cou¡START_AT_MAX_COUNT
 ( 0xØ )

	)

75 
	#cou¡START_AT_ZERO
 ( 0x55 )

	)

79 
	#cou¡NUM_TEST_TASKS
 ( 2 )

	)

80 
	#cou¡DONT_BLOCK
 ( 0 )

	)

86 vﬁ©ûê
p‹tBASE_TYPE
 
	gxEº‹Dëe˘ed
 = 
pdFALSE
;

96 
¥vCou¡ögSem≠h‹eTask
–*
pvP¨amëîs
 );

102 
¥vIn¸emítSem≠h‹eCou¡
–
xSem≠h‹eH™dÀ
 
xSem≠h‹e
, 
p‹tBASE_TYPE
 *
puxLo›Cou¡î
 );

108 
¥vDe¸emítSem≠h‹eCou¡
–
xSem≠h‹eH™dÀ
 
xSem≠h‹e
, 
p‹tBASE_TYPE
 *
puxLo›Cou¡î
 );

113 
	sCOUNT_SEM_STRUCT


116 
xSem≠h‹eH™dÀ
 
	mxSem≠h‹e
;

121 
p‹tBASE_TYPE
 
	muxEx≥˘edSèπCou¡
;

125 
p‹tBASE_TYPE
 
	muxLo›Cou¡î
;

126 } 
	txCou¡SemSåu˘
;

129 vﬁ©ûê
xCou¡SemSåu˘
 
	gxP¨amëîs
[ 
cou¡NUM_TEST_TASKS
 ];

133 
	$vSèπCou¡ögSem≠h‹eTasks
( )

138 
xP¨amëîs
[ 0 ].
xSem≠h‹e
 = 
	`xSem≠h‹eCª©eCou¡ög
–
cou¡MAX_COUNT_VALUE
, countMAX_COUNT_VALUE );

139 
xP¨amëîs
[ 0 ].
uxEx≥˘edSèπCou¡
 = 
cou¡START_AT_MAX_COUNT
;

140 
xP¨amëîs
[ 0 ].
uxLo›Cou¡î
 = 0;

142 
xP¨amëîs
[ 1 ].
xSem≠h‹e
 = 
	`xSem≠h‹eCª©eCou¡ög
–
cou¡MAX_COUNT_VALUE
, 0 );

143 
xP¨amëîs
[ 1 ].
uxEx≥˘edSèπCou¡
 = 0;

144 
xP¨amëîs
[ 1 ].
uxLo›Cou¡î
 = 0;

152 
	`vQueueAddToRegi°ry
––
xQueueH™dÀ
 ) 
xP¨amëîs
[ 0 ].
xSem≠h‹e
, ( sig√d 
p‹tCHAR
 * ) "Counting_Sem_1" );

153 
	`vQueueAddToRegi°ry
––
xQueueH™dÀ
 ) 
xP¨amëîs
[ 1 ].
xSem≠h‹e
, ( sig√d 
p‹tCHAR
 * ) "Counting_Sem_2" );

157 if––
xP¨amëîs
[ 0 ].
xSem≠h‹e
 !
NULL
 ) || ( xParameters[ 1 ].xSemaphore != NULL ) )

160 
	`xTaskCª©e
–
¥vCou¡ögSem≠h‹eTask
, ( sig√d 
p‹tCHAR
 * ) "CNT1", 
c⁄figMINIMAL_STACK_SIZE
, ( * ) &–
xP¨amëîs
[ 0 ] ), 
tskIDLE_PRIORITY
, 
NULL
 );

161 
	`xTaskCª©e
–
¥vCou¡ögSem≠h‹eTask
, ( sig√d 
p‹tCHAR
 * ) "CNT2", 
c⁄figMINIMAL_STACK_SIZE
, ( * ) &–
xP¨amëîs
[ 1 ] ), 
tskIDLE_PRIORITY
, 
NULL
 );

163 
	}
}

166 
	$¥vDe¸emítSem≠h‹eCou¡
–
xSem≠h‹eH™dÀ
 
xSem≠h‹e
, 
p‹tBASE_TYPE
 *
puxLo›Cou¡î
 )

168 
p‹tBASE_TYPE
 
ux
;

172 if–
	`xSem≠h‹eGive
–
xSem≠h‹e
 ) =
pdPASS
 )

174 
xEº‹Dëe˘ed
 = 
pdTRUE
;

178  
ux
 = 0; ux < 
cou¡MAX_COUNT_VALUE
; ux++ )

180 if–
	`xSem≠h‹eTake
–
xSem≠h‹e
, 
cou¡DONT_BLOCK
 ) !
pdPASS
 )

183 
xEº‹Dëe˘ed
 = 
pdTRUE
;

186 –*
puxLo›Cou¡î
 )++;

189 #i‡
c⁄figUSE_PREEMPTION
 == 0

190 
	`èskYIELD
();

195 if–
	`xSem≠h‹eTake
–
xSem≠h‹e
, 
cou¡DONT_BLOCK
 ) =
pdPASS
 )

197 
xEº‹Dëe˘ed
 = 
pdTRUE
;

199 
	}
}

202 
	$¥vIn¸emítSem≠h‹eCou¡
–
xSem≠h‹eH™dÀ
 
xSem≠h‹e
, 
p‹tBASE_TYPE
 *
puxLo›Cou¡î
 )

204 
p‹tBASE_TYPE
 
ux
;

208 if–
	`xSem≠h‹eTake
–
xSem≠h‹e
, 
cou¡DONT_BLOCK
 ) =
pdPASS
 )

210 
xEº‹Dëe˘ed
 = 
pdTRUE
;

214  
ux
 = 0; ux < 
cou¡MAX_COUNT_VALUE
; ux++ )

216 if–
	`xSem≠h‹eGive
–
xSem≠h‹e
 ) !
pdPASS
 )

219 
xEº‹Dëe˘ed
 = 
pdTRUE
;

222 –*
puxLo›Cou¡î
 )++;

225 #i‡
c⁄figUSE_PREEMPTION
 == 0

226 
	`èskYIELD
();

231 if–
	`xSem≠h‹eGive
–
xSem≠h‹e
 ) =
pdPASS
 )

233 
xEº‹Dëe˘ed
 = 
pdTRUE
;

235 
	}
}

238 
	$¥vCou¡ögSem≠h‹eTask
–*
pvP¨amëîs
 )

240 
xCou¡SemSåu˘
 *
pxP¨amëî
;

242 #ifde‡
USE_STDIO


243 
	`vPrötDi•œyMesßge
–c⁄° 
p‹tCHAR
 * c⁄° * 
µcMesßgeToSíd
 );

245 c⁄° 
p‹tCHAR
 * c⁄° 
pcTaskSèπMsg
 = "Counting semaphore demo started.\r\n";

248 
	`vPrötDi•œyMesßge
–&
pcTaskSèπMsg
 );

252 
pxP¨amëî
 = ( 
xCou¡SemSåu˘
 * ) 
pvP¨amëîs
;

256 if–
pxP¨amëî
->
uxEx≥˘edSèπCou¡
 =
cou¡START_AT_MAX_COUNT
 )

258 
	`¥vDe¸emítSem≠h‹eCou¡
–
pxP¨amëî
->
xSem≠h‹e
, &–pxP¨amëî->
uxLo›Cou¡î
 ) );

263 if–
	`xSem≠h‹eTake
–
pxP¨amëî
->
xSem≠h‹e
, 0 ) =
pdPASS
 )

265 
xEº‹Dëe˘ed
 = 
pdTRUE
;

270 
	`¥vIn¸emítSem≠h‹eCou¡
–
pxP¨amëî
->
xSem≠h‹e
, &–pxP¨amëî->
uxLo›Cou¡î
 ) );

271 
	`¥vDe¸emítSem≠h‹eCou¡
–
pxP¨amëî
->
xSem≠h‹e
, &–pxP¨amëî->
uxLo›Cou¡î
 ) );

273 
	}
}

276 
p‹tBASE_TYPE
 
	$xAªCou¡ögSem≠h‹eTasksStûlRu¬ög
( )

278 
p‹tBASE_TYPE
 
uxLa°Cou¡0
 = 0, 
uxLa°Cou¡1
 = 0;

279 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdPASS
;

283 if–
xEº‹Dëe˘ed
 !
pdFALSE
 )

285 
xRëu∫
 = 
pdFAIL
;

289 if–
uxLa°Cou¡0
 =
xP¨amëîs
[ 0 ].
uxLo›Cou¡î
 )

291 
xRëu∫
 = 
pdFAIL
;

295 
uxLa°Cou¡0
 = 
xP¨amëîs
[ 0 ].
uxLo›Cou¡î
;

298 if–
uxLa°Cou¡1
 =
xP¨amëîs
[ 1 ].
uxLo›Cou¡î
 )

300 
xRëu∫
 = 
pdFAIL
;

304 
uxLa°Cou¡1
 = 
xP¨amëîs
[ 1 ].
uxLo›Cou¡î
;

307  
xRëu∫
;

308 
	}
}

	@Demo/Common/Minimal/death.c

87 
	~<°dlib.h
>

90 
	~"FªeRTOS.h
"

91 
	~"èsk.h
"

94 
	~"dóth.h
"

96 
	#dóthSTACK_SIZE
 ( 
c⁄figMINIMAL_STACK_SIZE
 + 60 )

	)

100 
p‹tTASK_FUNCTION_PROTO
–
vCª©eTasks
, 
pvP¨amëîs
 );

103 
p‹tTASK_FUNCTION_PROTO
–
vSuicidÆTask
, 
pvP¨amëîs
 );

107 vﬁ©ûê
	gusCª©i⁄Cou¡
 = 0;

112 vﬁ©ûê
p‹tBASE_TYPE
 
	guxTasksRu¬ögAtSèπ
 = 0;

117 c⁄° 
p‹tBASE_TYPE
 
	guxMaxNumbîOfExåaTasksRu¬ög
 = 2;

121 
xTaskH™dÀ
 
	gxCª©edTask
;

125 
	$vCª©eSuicidÆTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 )

127 
p‹tBASE_TYPE
 *
puxPri‹ôy
;

131 
puxPri‹ôy
 = ( 
p‹tBASE_TYPE
 * ) 
	`pvP‹tMÆloc
( ( portBASE_TYPE ) );

132 *
puxPri‹ôy
 = 
uxPri‹ôy
;

134 
	`xTaskCª©e
–
vCª©eTasks
, ( sig√d * ) "CREATOR", 
dóthSTACK_SIZE
, ( * ) 
puxPri‹ôy
, 
uxPri‹ôy
, 
NULL
 );

138 
uxTasksRu¬ögAtSèπ
 = ( 
p‹tBASE_TYPE
 ) 
	`uxTaskGëNumbîOfTasks
();

145 
uxTasksRu¬ögAtSèπ
++;

150 #i‡
c⁄figUSE_TIMERS
 == 1

151 
uxTasksRu¬ögAtSèπ
++;

153 
	}
}

156 
	$p‹tTASK_FUNCTION
–
vSuicidÆTask
, 
pvP¨amëîs
 )

158 vﬁ©ûê
l1
, 
l2
;

159 
xTaskH™dÀ
 
xTaskToKûl
;

160 c⁄° 
p‹tTickTy≥
 
xDñay
 = (Ö‹tTickTy≥ ) 200 / 
p‹tTICK_RATE_MS
;

162 if–
pvP¨amëîs
 !
NULL
 )

167 
xTaskToKûl
 = *–
xTaskH™dÀ
* )
pvP¨amëîs
;

171 
xTaskToKûl
 = 
NULL
;

177 
l1
 = 2;

178 
l2
 = 89;

179 
l2
 *
l1
;

180 
	`vTaskDñay
–
xDñay
 );

182 if–
xTaskToKûl
 !
NULL
 )

185 
	`vTaskDñay
––
p‹tTickTy≥
 ) 0 );

188 
	`vTaskDñëe
–
xTaskToKûl
 );

191 
	`vTaskDñëe
–
NULL
 );

194 
	}
}

197 
	$p‹tTASK_FUNCTION
–
vCª©eTasks
, 
pvP¨amëîs
 )

199 c⁄° 
p‹tTickTy≥
 
xDñay
 = (Ö‹tTickTy≥ ) 1000 / 
p‹tTICK_RATE_MS
;

200 
p‹tBASE_TYPE
 
uxPri‹ôy
;

202 
uxPri‹ôy
 = *–
p‹tBASE_TYPE
 * ) 
pvP¨amëîs
;

203 
	`vP‹tFªe
–
pvP¨amëîs
 );

208 
	`vTaskDñay
–
xDñay
 );

210 
xCª©edTask
 = 
NULL
;

212 
	`xTaskCª©e
–
vSuicidÆTask
, ( sig√d * ) "SUICID1", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
uxPri‹ôy
, &
xCª©edTask
 );

213 
	`xTaskCª©e
–
vSuicidÆTask
, ( sig√d * ) "SUICID2", 
c⁄figMINIMAL_STACK_SIZE
, &
xCª©edTask
, 
uxPri‹ôy
, 
NULL
 );

215 ++
usCª©i⁄Cou¡
;

217 
	}
}

222 
p‹tBASE_TYPE
 
	$xIsCª©eTaskStûlRu¬ög
( )

224 
usLa°Cª©i⁄Cou¡
 = 0xfff;

225 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdTRUE
;

226 
p‹tBASE_TYPE
 
uxTasksRu¬ögNow
;

228 if–
usLa°Cª©i⁄Cou¡
 =
usCª©i⁄Cou¡
 )

230 
xRëu∫
 = 
pdFALSE
;

234 
usLa°Cª©i⁄Cou¡
 = 
usCª©i⁄Cou¡
;

237 
uxTasksRu¬ögNow
 = ( 
p‹tBASE_TYPE
 ) 
	`uxTaskGëNumbîOfTasks
();

239 if–
uxTasksRu¬ögNow
 < 
uxTasksRu¬ögAtSèπ
 )

241 
xRëu∫
 = 
pdFALSE
;

243 if––
uxTasksRu¬ögNow
 - 
uxTasksRu¬ögAtSèπ
 ) > 
uxMaxNumbîOfExåaTasksRu¬ög
 )

245 
xRëu∫
 = 
pdFALSE
;

252  
xRëu∫
;

253 
	}
}

	@Demo/Common/Minimal/dynamic.c

111 
	~<°dlib.h
>

114 
	~"FªeRTOS.h
"

115 
	~"èsk.h
"

116 
	~"£mphr.h
"

119 
	~"dy«mic.h
"

122 
p‹tTASK_FUNCTION_PROTO
–
vLimôedIn¸emítTask
, 
pvP¨amëîs
 );

125 
p‹tTASK_FUNCTION_PROTO
–
vC⁄töuousIn¸emítTask
, 
pvP¨amëîs
 );

128 
p‹tTASK_FUNCTION_PROTO
–
vCou¡îC⁄åﬁTask
, 
pvP¨amëîs
 );

130 
p‹tTASK_FUNCTION_PROTO
–
vQueueRe˚iveWhíSu•ídedTask
, 
pvP¨amëîs
 );

131 
p‹tTASK_FUNCTION_PROTO
–
vQueueSídWhíSu•ídedTask
, 
pvP¨amëîs
 );

134 
	#¥iSTACK_SIZE
 ( 
c⁄figMINIMAL_STACK_SIZE
 )

	)

135 
	#¥iSLEEP_TIME
 ( ( 
p‹tTickTy≥
 ) 128 / 
p‹tTICK_RATE_MS
 )

	)

136 
	#¥iLOOPS
 ( 5 )

	)

137 
	#¥iMAX_COUNT
 ( ( Ë0xf‡)

	)

138 
	#¥iNO_BLOCK
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

139 
	#¥iSUSPENDED_QUEUE_LENGTH
 ( 1 )

	)

145 
xTaskH™dÀ
 
	gxC⁄töousIn¸emítH™dÀ
, 
	gxLimôedIn¸emítH™dÀ
;

149 
	gulCou¡î
;

155 vﬁ©ûê
	gusCheckV¨übÀ
 = ( ) 0;

156 vﬁ©ûê
p‹tBASE_TYPE
 
	gxSu•ídedQueueSídEº‹
 = 
pdFALSE
;

157 vﬁ©ûê
p‹tBASE_TYPE
 
	gxSu•ídedQueueRe˚iveEº‹
 = 
pdFALSE
;

160 
xQueueH™dÀ
 
	gxSu•ídedTe°Queue
;

167 
	$vSèπDy«micPri‹ôyTasks
( )

169 
xSu•ídedTe°Queue
 = 
	`xQueueCª©e
–
¥iSUSPENDED_QUEUE_LENGTH
, ( ) );

177 
	`vQueueAddToRegi°ry
–
xSu•ídedTe°Queue
, ( signed * ) "Suspended_Test_Queue" );

179 
	`xTaskCª©e
–
vC⁄töuousIn¸emítTask
, ( sig√d * ) "CNT_INC", 
¥iSTACK_SIZE
, ( * ) &
ulCou¡î
, 
tskIDLE_PRIORITY
, &
xC⁄töousIn¸emítH™dÀ
 );

180 
	`xTaskCª©e
–
vLimôedIn¸emítTask
, ( sig√d * ) "LIM_INC", 
¥iSTACK_SIZE
, ( * ) &
ulCou¡î
, 
tskIDLE_PRIORITY
 + 1, &
xLimôedIn¸emítH™dÀ
 );

181 
	`xTaskCª©e
–
vCou¡îC⁄åﬁTask
, ( sig√d * ) "C_CTRL", 
¥iSTACK_SIZE
, 
NULL
, 
tskIDLE_PRIORITY
, NULL );

182 
	`xTaskCª©e
–
vQueueSídWhíSu•ídedTask
, ( sig√d * ) "SUSP_TX", 
¥iSTACK_SIZE
, 
NULL
, 
tskIDLE_PRIORITY
, NULL );

183 
	`xTaskCª©e
–
vQueueRe˚iveWhíSu•ídedTask
, ( sig√d * ) "SUSP_RX", 
¥iSTACK_SIZE
, 
NULL
, 
tskIDLE_PRIORITY
, NULL );

184 
	}
}

191 
	$p‹tTASK_FUNCTION
–
vLimôedIn¸emítTask
, 
pvP¨amëîs
 )

193 *
pulCou¡î
;

197 
pulCou¡î
 = ( * ) 
pvP¨amëîs
;

201 
	`vTaskSu•íd
–
NULL
 );

206 –*
pulCou¡î
 )++;

208 if–*
pulCou¡î
 >
¥iMAX_COUNT
 )

210 
	`vTaskSu•íd
–
NULL
 );

213 
	}
}

220 
	$p‹tTASK_FUNCTION
–
vC⁄töuousIn¸emítTask
, 
pvP¨amëîs
 )

222 *
pulCou¡î
;

223 
p‹tBASE_TYPE
 
uxOurPri‹ôy
;

227 
pulCou¡î
 = ( * ) 
pvP¨amëîs
;

231 
uxOurPri‹ôy
 = 
	`uxTaskPri‹ôyGë
–
NULL
 );

237 
	`vTaskPri‹ôySë
–
NULL
, 
uxOurPri‹ôy
 + 1 );

238 –*
pulCou¡î
 )++;

239 
	`vTaskPri‹ôySë
–
NULL
, 
uxOurPri‹ôy
 );

241 
	}
}

247 
	$p‹tTASK_FUNCTION
–
vCou¡îC⁄åﬁTask
, 
pvP¨amëîs
 )

249 
ulLa°Cou¡î
;

250 
sLo›s
;

251 
sEº‹
 = 
pdFALSE
;

254 –Ë
pvP¨amëîs
;

259 
ulCou¡î
 = ( ) 0;

264  
sLo›s
 = 0; sLo›†< 
¥iLOOPS
; sLoops++ )

268 
	`vTaskSu•íd
–
xC⁄töousIn¸emítH™dÀ
 );

269 
ulLa°Cou¡î
 = 
ulCou¡î
;

270 
	`vTaskResume
–
xC⁄töousIn¸emítH™dÀ
 );

273 
	`vTaskDñay
–
¥iSLEEP_TIME
 );

278 
	`vTaskSu•ídAŒ
();

280 if–
ulLa°Cou¡î
 =
ulCou¡î
 )

284 
sEº‹
 = 
pdTRUE
;

287 
	`xTaskResumeAŒ
();

294 
	`vTaskSu•íd
–
xC⁄töousIn¸emítH™dÀ
 );

297 
ulCou¡î
 = ( ) 0;

302 
	`vTaskResume
–
xLimôedIn¸emítH™dÀ
 );

305 if–
ulCou¡î
 !
¥iMAX_COUNT
 )

307 
sEº‹
 = 
pdTRUE
;

310 if–
sEº‹
 =
pdFALSE
 )

313 
	`p‹tENTER_CRITICAL
();

314 
usCheckV¨übÀ
++;

315 
	`p‹tEXIT_CRITICAL
();

319 
	`vTaskResume
–
xC⁄töousIn¸emítH™dÀ
 );

321 
	}
}

324 
	$p‹tTASK_FUNCTION
–
vQueueSídWhíSu•ídedTask
, 
pvP¨amëîs
 )

326 
ulVÆueToSíd
 = ( ) 0;

329 –Ë
pvP¨amëîs
;

333 
	`vTaskSu•ídAŒ
();

336 if–
	`xQueueSíd
–
xSu•ídedTe°Queue
, ( * ) &
ulVÆueToSíd
, 
¥iNO_BLOCK
 ) !
pdTRUE
 )

338 
xSu•ídedQueueSídEº‹
 = 
pdTRUE
;

341 
	`xTaskResumeAŒ
();

343 
	`vTaskDñay
–
¥iSLEEP_TIME
 );

345 ++
ulVÆueToSíd
;

347 
	}
}

350 
	$p‹tTASK_FUNCTION
–
vQueueRe˚iveWhíSu•ídedTask
, 
pvP¨amëîs
 )

352 
ulEx≥˘edVÆue
 = ( Ë0, 
ulRe˚ivedVÆue
;

353 
p‹tBASE_TYPE
 
xGŸVÆue
;

356 –Ë
pvP¨amëîs
;

367 
	`vTaskSu•ídAŒ
();

369 
	`vTaskSu•ídAŒ
();

371 
xGŸVÆue
 = 
	`xQueueRe˚ive
–
xSu•ídedTe°Queue
, ( * ) &
ulRe˚ivedVÆue
, 
¥iNO_BLOCK
 );

373 if–
	`xTaskResumeAŒ
() )

375 
xSu•ídedQueueRe˚iveEº‹
 = 
pdTRUE
;

378 
	`xTaskResumeAŒ
();

380 #i‡
c⁄figUSE_PREEMPTION
 == 0

382 
	`èskYIELD
();

386 }  
xGŸVÆue
 =
pdFALSE
 );

388 if–
ulRe˚ivedVÆue
 !
ulEx≥˘edVÆue
 )

390 
xSu•ídedQueueRe˚iveEº‹
 = 
pdTRUE
;

393 ++
ulEx≥˘edVÆue
;

395 
	}
}

399 
p‹tBASE_TYPE
 
	$xAªDy«micPri‹ôyTasksStûlRu¬ög
( )

403 
usLa°TaskCheck
 = ( ) 0;

404 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdTRUE
;

409 if–
usCheckV¨übÀ
 =
usLa°TaskCheck
 )

412 
xRëu∫
 = 
pdFALSE
;

415 if–
xSu•ídedQueueSídEº‹
 =
pdTRUE
 )

417 
xRëu∫
 = 
pdFALSE
;

420 if–
xSu•ídedQueueRe˚iveEº‹
 =
pdTRUE
 )

422 
xRëu∫
 = 
pdFALSE
;

425 
usLa°TaskCheck
 = 
usCheckV¨übÀ
;

426  
xRëu∫
;

427 
	}
}

	@Demo/Common/Minimal/flash.c

68 
	~<°dlib.h
>

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	~"∑πe°.h
"

76 
	~"Êash.h
"

78 
	#ÀdSTACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

79 
	#ÀdNUMBER_OF_LEDS
 ( 3 )

	)

80 
	#ÀdFLASH_RATE_BASE
 ( ( 
p‹tTickTy≥
 ) 333 )

	)

84 vﬁ©ûê
p‹tBASE_TYPE
 
	guxFœshTaskNumbî
 = 0;

87 
p‹tTASK_FUNCTION_PROTO
–
vLEDFœshTask
, 
pvP¨amëîs
 );

91 
	$vSèπLEDFœshTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 )

93 sig√d 
p‹tBASE_TYPE
 
xLEDTask
;

96  
xLEDTask
 = 0; xLEDTask < 
ÀdNUMBER_OF_LEDS
; ++xLEDTask )

99 
	`xTaskCª©e
–
vLEDFœshTask
, ( sig√d * ) "LEDx", 
ÀdSTACK_SIZE
, 
NULL
, 
uxPri‹ôy
, ( 
xTaskH™dÀ
 * ) NULL );

101 
	}
}

104 
	$p‹tTASK_FUNCTION
–
vLEDFœshTask
, 
pvP¨amëîs
 )

106 
p‹tTickTy≥
 
xFœshR©e
, 
xLa°FœshTime
;

107 
p‹tBASE_TYPE
 
uxLED
;

110 –Ë
pvP¨amëîs
;

113 
	`p‹tENTER_CRITICAL
();

116 
uxLED
 = 
uxFœshTaskNumbî
;

119 
uxFœshTaskNumbî
++;

121 
	`p‹tEXIT_CRITICAL
();

123 
xFœshR©e
 = 
ÀdFLASH_RATE_BASE
 + (ÜedFLASH_RATE_BASE * ( 
p‹tTickTy≥
 ) 
uxLED
 );

124 
xFœshR©e
 /
p‹tTICK_RATE_MS
;

128 
xFœshR©e
 /–
p‹tTickTy≥
 ) 2;

132 
xLa°FœshTime
 = 
	`xTaskGëTickCou¡
();

137 
	`vTaskDñayU¡û
–&
xLa°FœshTime
, 
xFœshR©e
 );

138 
	`vP¨Te°ToggÀLED
–
uxLED
 );

141 
	`vTaskDñayU¡û
–&
xLa°FœshTime
, 
xFœshR©e
 );

142 
	`vP¨Te°ToggÀLED
–
uxLED
 );

144 
	}
}

	@Demo/Common/Minimal/flop.c

67 
	~<°dlib.h
>

68 
	~<m©h.h
>

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	~"Ê›.h
"

77 
	#m©hSTACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

78 
	#m©hNUMBER_OF_TASKS
 ( 8 )

	)

82 
p‹tTASK_FUNCTION_PROTO
–
vCom≥tögM©hTask1
, 
pvP¨amëîs
 );

83 
p‹tTASK_FUNCTION_PROTO
–
vCom≥tögM©hTask2
, 
pvP¨amëîs
 );

84 
p‹tTASK_FUNCTION_PROTO
–
vCom≥tögM©hTask3
, 
pvP¨amëîs
 );

85 
p‹tTASK_FUNCTION_PROTO
–
vCom≥tögM©hTask4
, 
pvP¨amëîs
 );

90 vﬁ©ûê
	gusTaskCheck
[ 
m©hNUMBER_OF_TASKS
 ] = { ( ) 0 };

94 
	$vSèπM©hTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 )

96 
	`xTaskCª©e
–
vCom≥tögM©hTask1
, ( sig√d * ) "M©h1", 
m©hSTACK_SIZE
, ( * ) &–
usTaskCheck
[ 0 ] ), 
uxPri‹ôy
, 
NULL
 );

97 
	`xTaskCª©e
–
vCom≥tögM©hTask2
, ( sig√d * ) "M©h2", 
m©hSTACK_SIZE
, ( * ) &–
usTaskCheck
[ 1 ] ), 
uxPri‹ôy
, 
NULL
 );

98 
	`xTaskCª©e
–
vCom≥tögM©hTask3
, ( sig√d * ) "M©h3", 
m©hSTACK_SIZE
, ( * ) &–
usTaskCheck
[ 2 ] ), 
uxPri‹ôy
, 
NULL
 );

99 
	`xTaskCª©e
–
vCom≥tögM©hTask4
, ( sig√d * ) "M©h4", 
m©hSTACK_SIZE
, ( * ) &–
usTaskCheck
[ 3 ] ), 
uxPri‹ôy
, 
NULL
 );

100 
	`xTaskCª©e
–
vCom≥tögM©hTask1
, ( sig√d * ) "M©h5", 
m©hSTACK_SIZE
, ( * ) &–
usTaskCheck
[ 4 ] ), 
uxPri‹ôy
, 
NULL
 );

101 
	`xTaskCª©e
–
vCom≥tögM©hTask2
, ( sig√d * ) "M©h6", 
m©hSTACK_SIZE
, ( * ) &–
usTaskCheck
[ 5 ] ), 
uxPri‹ôy
, 
NULL
 );

102 
	`xTaskCª©e
–
vCom≥tögM©hTask3
, ( sig√d * ) "M©h7", 
m©hSTACK_SIZE
, ( * ) &–
usTaskCheck
[ 6 ] ), 
uxPri‹ôy
, 
NULL
 );

103 
	`xTaskCª©e
–
vCom≥tögM©hTask4
, ( sig√d * ) "M©h8", 
m©hSTACK_SIZE
, ( * ) &–
usTaskCheck
[ 7 ] ), 
uxPri‹ôy
, 
NULL
 );

104 
	}
}

107 
	$p‹tTASK_FUNCTION
–
vCom≥tögM©hTask1
, 
pvP¨amëîs
 )

109 vﬁ©ûê
p‹tDOUBLE
 
d1
, 
d2
, 
d3
, 
d4
;

110 vﬁ©ûê*
pusTaskCheckV¨übÀ
;

111 vﬁ©ûê
p‹tDOUBLE
 
dAnswî
;

112 
sEº‹
 = 
pdFALSE
;

114 
d1
 = 123.4567;

115 
d2
 = 2345.6789;

116 
d3
 = -918.222;

118 
dAnswî
 = ( 
d1
 + 
d2
 ) * 
d3
;

122 
pusTaskCheckV¨übÀ
 = ( * ) 
pvP¨amëîs
;

127 
d1
 = 123.4567;

128 
d2
 = 2345.6789;

129 
d3
 = -918.222;

131 
d4
 = ( 
d1
 + 
d2
 ) * 
d3
;

133 #i‡
c⁄figUSE_PREEMPTION
 == 0

134 
	`èskYIELD
();

139 if–
	`Ábs
–
d4
 - 
dAnswî
 ) > 0.001 )

141 
sEº‹
 = 
pdTRUE
;

144 if–
sEº‹
 =
pdFALSE
 )

148 –*
pusTaskCheckV¨übÀ
 )++;

151 #i‡
c⁄figUSE_PREEMPTION
 == 0

152 
	`èskYIELD
();

156 
	}
}

159 
	$p‹tTASK_FUNCTION
–
vCom≥tögM©hTask2
, 
pvP¨amëîs
 )

161 vﬁ©ûê
p‹tDOUBLE
 
d1
, 
d2
, 
d3
, 
d4
;

162 vﬁ©ûê*
pusTaskCheckV¨übÀ
;

163 vﬁ©ûê
p‹tDOUBLE
 
dAnswî
;

164 
sEº‹
 = 
pdFALSE
;

166 
d1
 = -389.38;

167 
d2
 = 32498.2;

168 
d3
 = -2.0001;

170 
dAnswî
 = ( 
d1
 / 
d2
 ) * 
d3
;

175 
pusTaskCheckV¨übÀ
 = ( * ) 
pvP¨amëîs
;

180 
d1
 = -389.38;

181 
d2
 = 32498.2;

182 
d3
 = -2.0001;

184 
d4
 = ( 
d1
 / 
d2
 ) * 
d3
;

186 #i‡
c⁄figUSE_PREEMPTION
 == 0

187 
	`èskYIELD
();

192 if–
	`Ábs
–
d4
 - 
dAnswî
 ) > 0.001 )

194 
sEº‹
 = 
pdTRUE
;

197 if–
sEº‹
 =
pdFALSE
 )

202 –*
pusTaskCheckV¨übÀ
 )++;

205 #i‡
c⁄figUSE_PREEMPTION
 == 0

206 
	`èskYIELD
();

209 
	}
}

212 
	$p‹tTASK_FUNCTION
–
vCom≥tögM©hTask3
, 
pvP¨amëîs
 )

214 vﬁ©ûê
p‹tDOUBLE
 *
pdAºay
, 
dTŸÆ1
, 
dTŸÆ2
, 
dDif„ªn˚
;

215 vﬁ©ûê*
pusTaskCheckV¨übÀ
;

216 c⁄° 
size_t
 
xAºaySize
 = 10;

217 
size_t
 
xPosôi⁄
;

218 
sEº‹
 = 
pdFALSE
;

222 
pusTaskCheckV¨übÀ
 = ( * ) 
pvP¨amëîs
;

224 
pdAºay
 = ( 
p‹tDOUBLE
 * ) 
	`pvP‹tMÆloc
–
xAºaySize
 * (ÖortDOUBLE ) );

231 
dTŸÆ1
 = 0.0;

232 
dTŸÆ2
 = 0.0;

234  
xPosôi⁄
 = 0; xPosôi⁄ < 
xAºaySize
; xPosition++ )

236 
pdAºay
[ 
xPosôi⁄
 ] = ( 
p‹tDOUBLE
 ) xPosition + 5.5;

237 
dTŸÆ1
 +–
p‹tDOUBLE
 ) 
xPosôi⁄
 + 5.5;

240 #i‡
c⁄figUSE_PREEMPTION
 == 0

241 
	`èskYIELD
();

244  
xPosôi⁄
 = 0; xPosôi⁄ < 
xAºaySize
; xPosition++ )

246 
dTŸÆ2
 +
pdAºay
[ 
xPosôi⁄
 ];

249 
dDif„ªn˚
 = 
dTŸÆ1
 - 
dTŸÆ2
;

250 if–
	`Ábs
–
dDif„ªn˚
 ) > 0.001 )

252 
sEº‹
 = 
pdTRUE
;

255 #i‡
c⁄figUSE_PREEMPTION
 == 0

256 
	`èskYIELD
();

259 if–
sEº‹
 =
pdFALSE
 )

263 –*
pusTaskCheckV¨übÀ
 )++;

266 
	}
}

269 
	$p‹tTASK_FUNCTION
–
vCom≥tögM©hTask4
, 
pvP¨amëîs
 )

271 vﬁ©ûê
p‹tDOUBLE
 *
pdAºay
, 
dTŸÆ1
, 
dTŸÆ2
, 
dDif„ªn˚
;

272 vﬁ©ûê*
pusTaskCheckV¨übÀ
;

273 c⁄° 
size_t
 
xAºaySize
 = 10;

274 
size_t
 
xPosôi⁄
;

275 
sEº‹
 = 
pdFALSE
;

279 
pusTaskCheckV¨übÀ
 = ( * ) 
pvP¨amëîs
;

281 
pdAºay
 = ( 
p‹tDOUBLE
 * ) 
	`pvP‹tMÆloc
–
xAºaySize
 * (ÖortDOUBLE ) );

288 
dTŸÆ1
 = 0.0;

289 
dTŸÆ2
 = 0.0;

291  
xPosôi⁄
 = 0; xPosôi⁄ < 
xAºaySize
; xPosition++ )

293 
pdAºay
[ 
xPosôi⁄
 ] = ( 
p‹tDOUBLE
 ) xPosition * 12.123;

294 
dTŸÆ1
 +–
p‹tDOUBLE
 ) 
xPosôi⁄
 * 12.123;

297 #i‡
c⁄figUSE_PREEMPTION
 == 0

298 
	`èskYIELD
();

301  
xPosôi⁄
 = 0; xPosôi⁄ < 
xAºaySize
; xPosition++ )

303 
dTŸÆ2
 +
pdAºay
[ 
xPosôi⁄
 ];

306 
dDif„ªn˚
 = 
dTŸÆ1
 - 
dTŸÆ2
;

307 if–
	`Ábs
–
dDif„ªn˚
 ) > 0.001 )

309 
sEº‹
 = 
pdTRUE
;

312 #i‡
c⁄figUSE_PREEMPTION
 == 0

313 
	`èskYIELD
();

316 if–
sEº‹
 =
pdFALSE
 )

320 –*
pusTaskCheckV¨übÀ
 )++;

323 
	}
}

327 
p‹tBASE_TYPE
 
	$xAªM©hsTaskStûlRu¬ög
( )

331 
usLa°TaskCheck
[ 
m©hNUMBER_OF_TASKS
 ] = { ( ) 0 };

332 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdTRUE
, 
xTask
;

336  
xTask
 = 0; xTask < 
m©hNUMBER_OF_TASKS
; xTask++ )

338 if–
usTaskCheck
[ 
xTask
 ] =
usLa°TaskCheck
[ xTask ] )

341 
xRëu∫
 = 
pdFALSE
;

344 
usLa°TaskCheck
[ 
xTask
 ] = 
usTaskCheck
[ xTask ];

347  
xRëu∫
;

348 
	}
}

	@Demo/Common/Minimal/integer.c

84 
	~<°dlib.h
>

87 
	~"FªeRTOS.h
"

88 
	~"èsk.h
"

91 
	~"öãgî.h
"

94 
	#ötgCONST1
 ( ( Ë123 )

	)

95 
	#ötgCONST2
 ( ( Ë234567 )

	)

96 
	#ötgCONST3
 ( ( Ë-3 )

	)

97 
	#ötgCONST4
 ( ( Ë7 )

	)

98 
	#ötgEXPECTED_ANSWER
 ( ( ( 
ötgCONST1
 + 
ötgCONST2
 ) * 
ötgCONST3
 ) / 
ötgCONST4
 )

	)

100 
	#ötgSTACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

103 
	#ötgNUMBER_OF_TASKS
 ( 1 )

	)

108 
p‹tTASK_FUNCTION_PROTO
–
vCom≥ãögI¡M©hTask
, 
pvP¨amëîs
 );

114 vﬁ©ûêsig√d 
p‹tBASE_TYPE
 
	gxTaskCheck
[ 
ötgNUMBER_OF_TASKS
 ] = { ( sig√dÖ‹tBASE_TYPE ) 
pdFALSE
 };

118 
	$vSèπI¡egîM©hTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 )

120 
sTask
;

122  
sTask
 = 0; sTask < 
ötgNUMBER_OF_TASKS
; sTask++ )

124 
	`xTaskCª©e
–
vCom≥ãögI¡M©hTask
, ( sig√d * ) "I¡M©h", 
ötgSTACK_SIZE
, ( * ) &–
xTaskCheck
[ 
sTask
 ] ), 
uxPri‹ôy
, ( 
xTaskH™dÀ
 * ) 
NULL
 );

126 
	}
}

129 
	$p‹tTASK_FUNCTION
–
vCom≥ãögI¡M©hTask
, 
pvP¨amëîs
 )

133 vﬁ©ûê
lVÆue
;

134 
sEº‹
 = 
pdFALSE
;

135 vﬁ©ûêsig√d 
p‹tBASE_TYPE
 *
pxTaskHasExecuãd
;

140 
pxTaskHasExecuãd
 = ( vﬁ©ûêsig√d 
p‹tBASE_TYPE
 * ) 
pvP¨amëîs
;

147 
lVÆue
 = 
ötgCONST1
;

148 
lVÆue
 +
ötgCONST2
;

151 #i‡
c⁄figUSE_PREEMPTION
 == 0

153 
	`èskYIELD
();

158 
lVÆue
 *
ötgCONST3
;

159 
lVÆue
 /
ötgCONST4
;

164 if–
lVÆue
 !
ötgEXPECTED_ANSWER
 )

166 
sEº‹
 = 
pdTRUE
;

169 if–
sEº‹
 =
pdFALSE
 )

174 
	`p‹tENTER_CRITICAL
();

175 *
pxTaskHasExecuãd
 = 
pdTRUE
;

176 
	`p‹tEXIT_CRITICAL
();

180 #i‡
c⁄figUSE_PREEMPTION
 == 0

182 
	`èskYIELD
();

186 
	}
}

190 
p‹tBASE_TYPE
 
	$xAªI¡egîM©hsTaskStûlRu¬ög
( )

192 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdTRUE
;

193 
sTask
;

197  
sTask
 = 0; sTask < 
ötgNUMBER_OF_TASKS
; sTask++ )

199 if–
xTaskCheck
[ 
sTask
 ] =
pdFALSE
 )

202 
xRëu∫
 = 
pdFALSE
;

207 
xTaskCheck
[ 
sTask
 ] = 
pdFALSE
;

210  
xRëu∫
;

211 
	}
}

	@Demo/Common/Minimal/recmutex.c

91 
	~"FªeRTOS.h
"

92 
	~"èsk.h
"

93 
	~"£mphr.h
"

96 
	~"ªcmuãx.h
"

99 
	#ªcmuCONTROLLING_TASK_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 2 )

	)

100 
	#ªcmuBLOCKING_TASK_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 1 )

	)

101 
	#ªcmuPOLLING_TASK_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 0 )

	)

104 
	#ªcmuMAX_COUNT
 ( 10 )

	)

107 
	#ªcmuSHORT_DELAY
 ( 20 / 
p‹tTICK_RATE_MS
 )

	)

108 
	#ªcmuNO_DELAY
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

109 
	#ªcmuTWO_TICK_DELAY
 ( ( 
p‹tTickTy≥
 ) 2 )

	)

112 
¥vRecursiveMuãxC⁄åﬁlögTask
–*
pvP¨amëîs
 );

113 
¥vRecursiveMuãxBlockögTask
–*
pvP¨amëîs
 );

114 
¥vRecursiveMuãxPﬁlögTask
–*
pvP¨amëîs
 );

117 
xSem≠h‹eH™dÀ
 
	gxMuãx
;

120 vﬁ©ûê
p‹tBASE_TYPE
 
	gxEº‹Occuºed
 = 
pdFALSE
, 
	gxC⁄åﬁlögIsSu•íded
 =ÖdFALSE, 
	gxBlockögIsSu•íded
 =ÖdFALSE;

121 vﬁ©ûê
p‹tBASE_TYPE
 
	guxC⁄åﬁlögCy˛es
 = 0, 
	guxBlockögCy˛es
 = 0, 
	guxPﬁlögCy˛es
 = 0;

125 
xTaskH™dÀ
 
	gxC⁄åﬁlögTaskH™dÀ
, 
	gxBlockögTaskH™dÀ
;

129 
	$vSèπRecursiveMuãxTasks
( )

133 
xMuãx
 = 
	`xSem≠h‹eCª©eRecursiveMuãx
();

141 
	`vQueueAddToRegi°ry
––
xQueueH™dÀ
 ) 
xMuãx
, ( sig√d 
p‹tCHAR
 * ) "Recursive_Mutex" );

144 if–
xMuãx
 !
NULL
 )

146 
	`xTaskCª©e
–
¥vRecursiveMuãxC⁄åﬁlögTask
, ( sig√d 
p‹tCHAR
 * ) "Rec1", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
ªcmuCONTROLLING_TASK_PRIORITY
, &
xC⁄åﬁlögTaskH™dÀ
 );

147 
	`xTaskCª©e
–
¥vRecursiveMuãxBlockögTask
, ( sig√d 
p‹tCHAR
 * ) "Rec2", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
ªcmuBLOCKING_TASK_PRIORITY
, &
xBlockögTaskH™dÀ
 );

148 
	`xTaskCª©e
–
¥vRecursiveMuãxPﬁlögTask
, ( sig√d 
p‹tCHAR
 * ) "Rec3", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
ªcmuPOLLING_TASK_PRIORITY
, NULL );

150 
	}
}

153 
	$¥vRecursiveMuãxC⁄åﬁlögTask
–*
pvP¨amëîs
 )

155 
p‹tBASE_TYPE
 
ux
;

158 –Ë
pvP¨amëîs
;

166 if–
	`xSem≠h‹eGiveRecursive
–
xMuãx
 ) =
pdPASS
 )

168 
xEº‹Occuºed
 = 
pdTRUE
;

171  
ux
 = 0; ux < 
ªcmuMAX_COUNT
; ux++ )

183 if–
	`xSem≠h‹eTakeRecursive
–
xMuãx
, 
ªcmuTWO_TICK_DELAY
 ) !
pdPASS
 )

185 
xEº‹Occuºed
 = 
pdTRUE
;

192 
	`vTaskDñay
–
ªcmuSHORT_DELAY
 );

196  
ux
 = 0; ux < 
ªcmuMAX_COUNT
; ux++ )

200 
	`vTaskDñay
–
ªcmuSHORT_DELAY
 );

207 if–
	`xSem≠h‹eGiveRecursive
–
xMuãx
 ) !
pdPASS
 )

209 
xEº‹Occuºed
 = 
pdTRUE
;

215 if–
	`xSem≠h‹eGiveRecursive
–
xMuãx
 ) =
pdPASS
 )

217 
xEº‹Occuºed
 = 
pdTRUE
;

222 
uxC⁄åﬁlögCy˛es
++;

225 
xC⁄åﬁlögIsSu•íded
 = 
pdTRUE
;

226 
	`vTaskSu•íd
–
NULL
 );

227 
xC⁄åﬁlögIsSu•íded
 = 
pdFALSE
;

229 
	}
}

232 
	$¥vRecursiveMuãxBlockögTask
–*
pvP¨amëîs
 )

235 –Ë
pvP¨amëîs
;

244 if–
	`xSem≠h‹eTakeRecursive
–
xMuãx
, 
p‹tMAX_DELAY
 ) =
pdPASS
 )

246 if–
xC⁄åﬁlögIsSu•íded
 !
pdTRUE
 )

250 
xEº‹Occuºed
 = 
pdTRUE
;

256 if–
	`xSem≠h‹eGiveRecursive
–
xMuãx
 ) !
pdPASS
 )

258 
xEº‹Occuºed
 = 
pdTRUE
;

261 
xBlockögIsSu•íded
 = 
pdTRUE
;

262 
	`vTaskSu•íd
–
NULL
 );

263 
xBlockögIsSu•íded
 = 
pdFALSE
;

270 
xEº‹Occuºed
 = 
pdTRUE
;

274 if–
uxC⁄åﬁlögCy˛es
 !–
uxBlockögCy˛es
 + 1 ) )

276 
xEº‹Occuºed
 = 
pdTRUE
;

281 
uxBlockögCy˛es
++;

283 
	}
}

286 
	$¥vRecursiveMuãxPﬁlögTask
–*
pvP¨amëîs
 )

289 –Ë
pvP¨amëîs
;

296 if–
	`xSem≠h‹eTakeRecursive
–
xMuãx
, 
ªcmuNO_DELAY
 ) =
pdPASS
 )

299 if––
xBlockögIsSu•íded
 !
pdTRUE
 ) || ( 
xC⁄åﬁlögIsSu•íded
 !=ÖdTRUE ) )

301 
xEº‹Occuºed
 = 
pdTRUE
;

307 
uxPﬁlögCy˛es
++;

318 
	`vTaskResume
–
xBlockögTaskH™dÀ
 );

319 
	`vTaskResume
–
xC⁄åﬁlögTaskH™dÀ
 );

323 if––
xBlockögIsSu•íded
 =
pdTRUE
 ) || ( 
xC⁄åﬁlögIsSu•íded
 ==ÖdTRUE ) )

325 
xEº‹Occuºed
 = 
pdTRUE
;

329 if–
	`xSem≠h‹eGiveRecursive
–
xMuãx
 ) !
pdPASS
 )

331 
xEº‹Occuºed
 = 
pdTRUE
;

336 #i‡
c⁄figUSE_PREEMPTION
 == 0

338 
	`èskYIELD
();

342 
	}
}

346 
p‹tBASE_TYPE
 
	$xAªRecursiveMuãxTasksStûlRu¬ög
( )

348 
p‹tBASE_TYPE
 
xRëu∫
;

349 
p‹tBASE_TYPE
 
uxLa°C⁄åﬁlögCy˛es
 = 0, 
uxLa°BlockögCy˛es
 = 0, 
uxLa°PﬁlögCy˛es
 = 0;

352 if–
uxLa°C⁄åﬁlögCy˛es
 =
uxC⁄åﬁlögCy˛es
 )

354 
xEº‹Occuºed
 = 
pdTRUE
;

358 
uxLa°C⁄åﬁlögCy˛es
 = 
uxC⁄åﬁlögCy˛es
;

362 if–
uxLa°BlockögCy˛es
 =
uxBlockögCy˛es
 )

364 
xEº‹Occuºed
 = 
pdTRUE
;

368 
uxLa°BlockögCy˛es
 = 
uxBlockögCy˛es
;

372 if–
uxLa°PﬁlögCy˛es
 =
uxPﬁlögCy˛es
 )

374 
xEº‹Occuºed
 = 
pdTRUE
;

378 
uxLa°PﬁlögCy˛es
 = 
uxPﬁlögCy˛es
;

381 if–
xEº‹Occuºed
 =
pdTRUE
 )

383 
xRëu∫
 = 
pdFAIL
;

387 
xRëu∫
 = 
pdTRUE
;

390  
xRëu∫
;

391 
	}
}

	@Demo/Common/Minimal/semtest.c

78 
	~<°dlib.h
>

81 
	~"FªeRTOS.h
"

82 
	~"èsk.h
"

83 
	~"£mphr.h
"

86 
	~"£mã°.h
"

89 
	#£mt°BLOCKING_EXPECTED_VALUE
 ( ( Ë0xff‡)

	)

90 
	#£mt°NON_BLOCKING_EXPECTED_VALUE
 ( ( Ë0xf‡)

	)

92 
	#£mt°STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

94 
	#£mt°NUM_TASKS
 ( 4 )

	)

96 
	#£mt°DELAY_FACTOR
 ( ( 
p‹tTickTy≥
 ) 10 )

	)

99 
p‹tTASK_FUNCTION_PROTO
–
¥vSem≠h‹eTe°
, 
pvP¨amëîs
 );

102 
	sSEMAPHORE_PARAMETERS


104 
xSem≠h‹eH™dÀ
 
	mxSem≠h‹e
;

105 vﬁ©ûê*
	mpulSh¨edV¨übÀ
;

106 
p‹tTickTy≥
 
	mxBlockTime
;

107 } 
	txSem≠h‹eP¨amëîs
;

110 vﬁ©ûê
	gsCheckV¨übÀs
[ 
£mt°NUM_TASKS
 ] = { 0 };

111 vﬁ©ûê
	gsNextCheckV¨übÀ
 = 0;

115 
	$vSèπSem≠h‹eTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 )

117 
xSem≠h‹eP¨amëîs
 *
pxFú°Sem≠h‹eP¨amëîs
, *
pxSec⁄dSem≠h‹eP¨amëîs
;

118 c⁄° 
p‹tTickTy≥
 
xBlockTime
 = (ÖortTickType ) 100;

121 
pxFú°Sem≠h‹eP¨amëîs
 = ( 
xSem≠h‹eP¨amëîs
 * ) 
	`pvP‹tMÆloc
( ( xSemaphoreParameters ) );

123 if–
pxFú°Sem≠h‹eP¨amëîs
 !
NULL
 )

126 
	`vSem≠h‹eCª©eBö¨y
–
pxFú°Sem≠h‹eP¨amëîs
->
xSem≠h‹e
 );

128 if–
pxFú°Sem≠h‹eP¨amëîs
->
xSem≠h‹e
 !
NULL
 )

131 
pxFú°Sem≠h‹eP¨amëîs
->
pulSh¨edV¨übÀ
 = ( * ) 
	`pvP‹tMÆloc
( ( ) );

134 *–
pxFú°Sem≠h‹eP¨amëîs
->
pulSh¨edV¨übÀ
 ) = 
£mt°NON_BLOCKING_EXPECTED_VALUE
;

137 
pxFú°Sem≠h‹eP¨amëîs
->
xBlockTime
 = ( 
p‹tTickTy≥
 ) 0;

140 
	`xTaskCª©e
–
¥vSem≠h‹eTe°
, ( sig√d * ) "PﬁSEM1", 
£mt°STACK_SIZE
, ( * ) 
pxFú°Sem≠h‹eP¨amëîs
, 
tskIDLE_PRIORITY
, ( 
xTaskH™dÀ
 * ) 
NULL
 );

141 
	`xTaskCª©e
–
¥vSem≠h‹eTe°
, ( sig√d * ) "PﬁSEM2", 
£mt°STACK_SIZE
, ( * ) 
pxFú°Sem≠h‹eP¨amëîs
, 
tskIDLE_PRIORITY
, ( 
xTaskH™dÀ
 * ) 
NULL
 );

147 
pxSec⁄dSem≠h‹eP¨amëîs
 = ( 
xSem≠h‹eP¨amëîs
 * ) 
	`pvP‹tMÆloc
( ( xSemaphoreParameters ) );

148 if–
pxSec⁄dSem≠h‹eP¨amëîs
 !
NULL
 )

150 
	`vSem≠h‹eCª©eBö¨y
–
pxSec⁄dSem≠h‹eP¨amëîs
->
xSem≠h‹e
 );

152 if–
pxSec⁄dSem≠h‹eP¨amëîs
->
xSem≠h‹e
 !
NULL
 )

154 
pxSec⁄dSem≠h‹eP¨amëîs
->
pulSh¨edV¨übÀ
 = ( * ) 
	`pvP‹tMÆloc
( ( ) );

155 *–
pxSec⁄dSem≠h‹eP¨amëîs
->
pulSh¨edV¨übÀ
 ) = 
£mt°BLOCKING_EXPECTED_VALUE
;

156 
pxSec⁄dSem≠h‹eP¨amëîs
->
xBlockTime
 = xBlockTimê/ 
p‹tTICK_RATE_MS
;

158 
	`xTaskCª©e
–
¥vSem≠h‹eTe°
, ( sig√d * ) "BlkSEM1", 
£mt°STACK_SIZE
, ( * ) 
pxSec⁄dSem≠h‹eP¨amëîs
, 
uxPri‹ôy
, ( 
xTaskH™dÀ
 * ) 
NULL
 );

159 
	`xTaskCª©e
–
¥vSem≠h‹eTe°
, ( sig√d * ) "BlkSEM2", 
£mt°STACK_SIZE
, ( * ) 
pxSec⁄dSem≠h‹eP¨amëîs
, 
uxPri‹ôy
, ( 
xTaskH™dÀ
 * ) 
NULL
 );

169 
	`vQueueAddToRegi°ry
––
xQueueH™dÀ
 ) 
pxFú°Sem≠h‹eP¨amëîs
->
xSem≠h‹e
, ( signed * ) "Counting_Sem_1" );

170 
	`vQueueAddToRegi°ry
––
xQueueH™dÀ
 ) 
pxSec⁄dSem≠h‹eP¨amëîs
->
xSem≠h‹e
, ( signed * ) "Counting_Sem_2" );

171 
	}
}

174 
	$p‹tTASK_FUNCTION
–
¥vSem≠h‹eTe°
, 
pvP¨amëîs
 )

176 
xSem≠h‹eP¨amëîs
 *
pxP¨amëîs
;

177 vﬁ©ûê*
pulSh¨edV¨übÀ
, 
ulEx≥˘edVÆue
;

178 
ulCou¡î
;

179 
sEº‹
 = 
pdFALSE
, 
sCheckV¨übÀToU£
;

183 
	`p‹tENTER_CRITICAL
();

184 
sCheckV¨übÀToU£
 = 
sNextCheckV¨übÀ
;

185 
sNextCheckV¨übÀ
++;

186 
	`p‹tEXIT_CRITICAL
();

190 
pxP¨amëîs
 = ( 
xSem≠h‹eP¨amëîs
 * ) 
pvP¨amëîs
;

191 
pulSh¨edV¨übÀ
 = 
pxP¨amëîs
->pulSharedVariable;

195 if–
pxP¨amëîs
->
xBlockTime
 > ( 
p‹tTickTy≥
 ) 0 )

197 
ulEx≥˘edVÆue
 = 
£mt°BLOCKING_EXPECTED_VALUE
;

201 
ulEx≥˘edVÆue
 = 
£mt°NON_BLOCKING_EXPECTED_VALUE
;

207 if–
	`xSem≠h‹eTake
–
pxP¨amëîs
->
xSem≠h‹e
,ÖxP¨amëîs->
xBlockTime
 ) =
pdPASS
 )

212 if–*
pulSh¨edV¨übÀ
 !
ulEx≥˘edVÆue
 )

214 
sEº‹
 = 
pdTRUE
;

220  
ulCou¡î
 = ( Ë0; ulCou¡î <
ulEx≥˘edVÆue
; ulCounter++ )

222 *
pulSh¨edV¨übÀ
 = 
ulCou¡î
;

223 if–*
pulSh¨edV¨übÀ
 !
ulCou¡î
 )

225 
sEº‹
 = 
pdTRUE
;

231 if–
	`xSem≠h‹eGive
–
pxP¨amëîs
->
xSem≠h‹e
 ) =
pdFALSE
 )

233 
sEº‹
 = 
pdTRUE
;

236 if–
sEº‹
 =
pdFALSE
 )

238 if–
sCheckV¨übÀToU£
 < 
£mt°NUM_TASKS
 )

240 –
sCheckV¨übÀs
[ 
sCheckV¨übÀToU£
 ] )++;

249 
	`vTaskDñay
–
pxP¨amëîs
->
xBlockTime
 * 
£mt°DELAY_FACTOR
 );

253 if–
pxP¨amëîs
->
xBlockTime
 =–
p‹tTickTy≥
 ) 0 )

258 
	`èskYIELD
();

262 
	}
}

266 
p‹tBASE_TYPE
 
	$xAªSem≠h‹eTasksStûlRu¬ög
( )

268 
sLa°CheckV¨übÀs
[ 
£mt°NUM_TASKS
 ] = { 0 };

269 
p‹tBASE_TYPE
 
xTask
, 
xRëu∫
 = 
pdTRUE
;

271  
xTask
 = 0; xTask < 
£mt°NUM_TASKS
; xTask++ )

273 if–
sLa°CheckV¨übÀs
[ 
xTask
 ] =
sCheckV¨übÀs
[ xTask ] )

275 
xRëu∫
 = 
pdFALSE
;

278 
sLa°CheckV¨übÀs
[ 
xTask
 ] = 
sCheckV¨übÀs
[ xTask ];

281  
xRëu∫
;

282 
	}
}

	@Demo/Common/include/BlockQ.h

54 #i‚de‡
BLOCK_Q_H


55 
	#BLOCK_Q_H


	)

57 
vSèπBlockögQueueTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 );

58 
p‹tBASE_TYPE
 
xAªBlockögQueuesStûlRu¬ög
( );

	@Demo/Common/include/GenQTest.h

54 #i‚de‡
GEN_Q_TEST_H


55 
	#GEN_Q_TEST_H


	)

57 
vSèπGíîicQueueTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 );

58 
p‹tBASE_TYPE
 
xAªGíîicQueueTasksStûlRu¬ög
( );

	@Demo/Common/include/PollQ.h

54 #i‚de‡
POLLED_Q_H


55 
	#POLLED_Q_H


	)

57 
vSèπPﬁÀdQueueTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 );

58 
p‹tBASE_TYPE
 
xAªPﬁlögQueuesStûlRu¬ög
( );

	@Demo/Common/include/QPeek.h

54 #i‚de‡
Q_PEEK_TEST_H


55 
	#Q_PEEK_TEST_H


	)

57 
vSèπQueuePìkTasks
( );

58 
p‹tBASE_TYPE
 
xAªQueuePìkTasksStûlRu¬ög
( );

	@Demo/Common/include/TimerDemo.h

54 #i‚de‡
TIMER_DEMO_H


55 
	#TIMER_DEMO_H


	)

57 
vSèπTimîDemoTask
–
p‹tTickTy≥
 
xBa£FªquícyIn
 );

58 
p‹tBASE_TYPE
 
xAªTimîDemoTasksStûlRu¬ög
–
p‹tTickTy≥
 
xCy˛eFªquícy
 );

59 
vTimîPîiodicISRTe°s
( );

	@Demo/Common/include/blocktim.h

54 #i‚de‡
BLOCK_TIME_TEST_H


55 
	#BLOCK_TIME_TEST_H


	)

57 
vCª©eBlockTimeTasks
( );

58 
p‹tBASE_TYPE
 
xAªBlockTimeTe°TasksStûlRu¬ög
( );

	@Demo/Common/include/comtest2.h

54 #i‚de‡
COMTEST_H


55 
	#COMTEST_H


	)

57 
vA…SèπComTe°Tasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
, 
ulBaudR©e
, p‹tBASE_TYPE 
uxLED
 );

58 
p‹tBASE_TYPE
 
xAªComTe°TasksStûlRu¬ög
( );

	@Demo/Common/include/countsem.h

54 #i‚de‡
COUNT_SEMAPHORE_TEST_H


55 
	#COUNT_SEMAPHORE_TEST_H


	)

57 
vSèπCou¡ögSem≠h‹eTasks
( );

58 
p‹tBASE_TYPE
 
xAªCou¡ögSem≠h‹eTasksStûlRu¬ög
( );

	@Demo/Common/include/death.h

54 #i‚de‡
SUICIDE_TASK_H


55 
	#SUICIDE_TASK_H


	)

57 
vCª©eSuicidÆTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 );

58 
p‹tBASE_TYPE
 
xIsCª©eTaskStûlRu¬ög
( );

	@Demo/Common/include/dynamic.h

54 #i‚de‡
DYNAMIC_MANIPULATION_H


55 
	#DYNAMIC_MANIPULATION_H


	)

57 
vSèπDy«micPri‹ôyTasks
( );

58 
p‹tBASE_TYPE
 
xAªDy«micPri‹ôyTasksStûlRu¬ög
( );

	@Demo/Common/include/fileIO.h

54 #i‚de‡
FILE_IO_H


55 
	#FILE_OI_H


	)

57 
vDi•œyMesßge
–c⁄° * c⁄° 
pcMesßgeToPröt
 );

58 
vWrôeMesßgeToDisk
–c⁄° * c⁄° 
pcMesßge
 );

59 
vWrôeBuf„rToDisk
–c⁄° * c⁄° 
pcBuf„r
, 
ulBuf„rLígth
 );

	@Demo/Common/include/flash.h

54 #i‚de‡
FLASH_LED_H


55 
	#FLASH_LED_H


	)

57 
vSèπLEDFœshTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 );

	@Demo/Common/include/flop.h

54 #i‚de‡
FLOP_TASKS_H


55 
	#FLOP_TASKS_H


	)

57 
vSèπM©hTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 );

58 
p‹tBASE_TYPE
 
xAªM©hsTaskStûlRu¬ög
( );

	@Demo/Common/include/integer.h

54 #i‚de‡
INTEGER_TASKS_H


55 
	#INTEGER_TASKS_H


	)

57 
vSèπI¡egîM©hTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 );

58 
p‹tBASE_TYPE
 
xAªI¡egîM©hsTaskStûlRu¬ög
( );

	@Demo/Common/include/mevents.h

54 #i‚de‡
EVENTS_TEST_H


55 
	#EVENTS_TEST_H


	)

57 
vSèπMu…iEvítTasks
( );

58 
p‹tBASE_TYPE
 
xAªMu…iEvítTasksStûlRu¬ög
( );

	@Demo/Common/include/partest.h

54 #i‚de‡
PARTEST_H


55 
	#PARTEST_H


	)

57 
	#∑π°DEFAULT_PORT_ADDRESS
 ( ( Ë0x378 )

	)

59 
vP¨Te°Inôüli£
( );

60 
vP¨Te°SëLED
–
p‹tBASE_TYPE
 
uxLED
, sig√dÖ‹tBASE_TYPE 
xVÆue
 );

61 
vP¨Te°ToggÀLED
–
p‹tBASE_TYPE
 
uxLED
 );

	@Demo/Common/include/print.h

54 #i‚de‡
PRINT_H


55 
	#PRINT_H


	)

57 
vPrötInôüli£
( );

58 
vPrötDi•œyMesßge
–c⁄° * c⁄° * 
pcMesßgeToSíd
 );

59 c⁄° *
pcPrötGëNextMesßge
–
p‹tTickTy≥
 
xPrötR©e
 );

	@Demo/Common/include/recmutex.h

54 #i‚de‡
RECURSIVE_MUTEX_TEST_H


55 
	#RECURSIVE_MUTEX_TEST_H


	)

57 
vSèπRecursiveMuãxTasks
( );

58 
p‹tBASE_TYPE
 
xAªRecursiveMuãxTasksStûlRu¬ög
( );

	@Demo/Common/include/semtest.h

54 #i‚de‡
SEMAPHORE_TEST_H


55 
	#SEMAPHORE_TEST_H


	)

57 
vSèπSem≠h‹eTasks
–
p‹tBASE_TYPE
 
uxPri‹ôy
 );

58 
p‹tBASE_TYPE
 
xAªSem≠h‹eTasksStûlRu¬ög
( );

	@Demo/Common/include/serial.h

54 #i‚de‡
SERIAL_COMMS_H


55 
	#SERIAL_COMMS_H


	)

57 * 
	txComP‹tH™dÀ
;

61 
	m£rCOM1
,

62 
	m£rCOM2
,

63 
	m£rCOM3
,

64 
	m£rCOM4
,

65 
	m£rCOM5
,

66 
	m£rCOM6
,

67 
	m£rCOM7
,

68 
	m£rCOM8


69 } 
	teCOMP‹t
;

73 
	m£rNO_PARITY
,

74 
	m£rODD_PARITY
,

75 
	m£rEVEN_PARITY
,

76 
	m£rMARK_PARITY
,

77 
	m£rSPACE_PARITY


78 } 
	teP¨ôy
;

82 
	m£rSTOP_1
,

83 
	m£rSTOP_2


84 } 
	teSt›Bôs
;

88 
	m£rBITS_5
,

89 
	m£rBITS_6
,

90 
	m£rBITS_7
,

91 
	m£rBITS_8


92 } 
	teD©aBôs
;

96 
	m£r50
,

97 
	m£r75
,

98 
	m£r110
,

99 
	m£r134
,

100 
	m£r150
,

101 
	m£r200
,

102 
	m£r300
,

103 
	m£r600
,

104 
	m£r1200
,

105 
	m£r1800
,

106 
	m£r2400
,

107 
	m£r4800
,

108 
	m£r9600
,

109 
	m£r19200
,

110 
	m£r38400
,

111 
	m£r57600
,

112 
	m£r115200


113 } 
	teBaud
;

115 
xComP‹tH™dÀ
 
xSîülP‹tInôMöimÆ
–
ulW™ãdBaud
, 
p‹tBASE_TYPE
 
uxQueueLígth
 );

116 
xComP‹tH™dÀ
 
xSîülP‹tInô
–
eCOMP‹t
 
eP‹t
, 
eBaud
 
eW™ãdBaud
, 
eP¨ôy
 
eW™ãdP¨ôy
, 
eD©aBôs
 
eW™ãdD©aBôs
, 
eSt›Bôs
 
eW™ãdSt›Bôs
, 
p‹tBASE_TYPE
 
uxBuf„rLígth
 );

117 
vSîülPutSåög
–
xComP‹tH™dÀ
 
pxP‹t
, c⁄° sig√d * c⁄° 
pcSåög
, 
usSåögLígth
 );

118 sig√d 
p‹tBASE_TYPE
 
xSîülGëCh¨
–
xComP‹tH™dÀ
 
pxP‹t
, sig√d *
pcRxedCh¨
, 
p‹tTickTy≥
 
xBlockTime
 );

119 sig√d 
p‹tBASE_TYPE
 
xSîülPutCh¨
–
xComP‹tH™dÀ
 
pxP‹t
, sig√d 
cOutCh¨
, 
p‹tTickTy≥
 
xBlockTime
 );

120 
p‹tBASE_TYPE
 
xSîülWaôF‹Sem≠h‹e
–
xComP‹tH™dÀ
 
xP‹t
 );

121 
vSîülClo£
–
xComP‹tH™dÀ
 
xP‹t
 );

	@Demo/MT3628_Cortex_A9SPCore/FreeRTOSConfig.h

55 #i‚de‡
FREERTOS_CONFIG_H


56 
	#FREERTOS_CONFIG_H


	)

68 
	#c⁄figUSE_PREEMPTION
 1

	)

69 
	#c⁄figUSE_IDLE_HOOK
 1

	)

70 
	#c⁄figUSE_TICK_HOOK
 1

	)

71 
	#c⁄figTICK_RATE_HZ
 ( 1000 )

	)

72 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( 
p‹tSHORT
 ) 256 * 4 )

	)

73 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) 12 * 1024 * 1024 )

	)

74 
	#c⁄figMAX_TASK_NAME_LEN
 ( 12 )

	)

75 
	#c⁄figUSE_TRACE_FACILITY
 1

	)

76 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

77 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

78 
	#c⁄figUSE_CO_ROUTINES
 0

	)

79 
	#c⁄figUSE_MUTEXES
 1

	)

80 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

81 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 1

	)

82 
	#c⁄figUSE_RECURSIVE_MUTEXES
 1

	)

83 
	#c⁄figQUEUE_REGISTRY_SIZE
 0

	)

84 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 1

	)

85 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

86 
	#c⁄figUSE_COUNTING_SEMAPHORES
 1

	)

87 
	#c⁄figUSE_ALTERNATIVE_API
 1

	)

89 
	#c⁄figUSE_TIMERS
 1

	)

90 
	#c⁄figTIMER_TASK_PRIORITY
 2

	)

91 
	#c⁄figTIMER_QUEUE_LENGTH
 20

	)

92 
	#c⁄figTIMER_TASK_STACK_DEPTH
 ( 
c⁄figMINIMAL_STACK_SIZE
 * 2 )

	)

94 
	#c⁄figMAX_PRIORITIES
 ( ( 
p‹tBASE_TYPE
 ) 7 )

	)

95 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

99 
	#c⁄figUSE_CO_ROUTINES
 0

	)

100 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

105 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

106 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

107 
	#INCLUDE_vTaskDñëe
 1

	)

108 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

109 
	#INCLUDE_vTaskSu•íd
 1

	)

110 
	#INCLUDE_vTaskDñayU¡û
 1

	)

111 
	#INCLUDE_vTaskDñay
 1

	)

112 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 1

	)

113 
	#INCLUDE_xTaskGëScheduÀrSèã
 1

	)

114 
	#INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 1

	)

115 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 1

	)

116 
	#INCLUDE_pcTaskGëTaskName
 1

	)

118 
vAs£πCÆÀd
–*
fûe
, 
löe
 );

119 
	#c⁄figASSERT
–
x
 ) if––x ) =0 ) 
	`vAs£πCÆÀd
(
__FILE__
,
__LINE__
)

	)

125 
	#c⁄figLOWEST_INTERRUPT_PRIORITY
 ( 0xFF )

	)

126 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 ( 0xC0 )

	)

127 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ( 0xA0 )

	)

130 
	#c⁄figPLATFORM
 ( 2 )

	)

132 
	#c⁄figCPU_CLOCK_HZ
 ( ( 
p‹tLONG
 ) 2000000 )

	)

133 
	#c⁄figCPU_PERIPH_HZ
 ( 
c⁄figCPU_CLOCK_HZ
 / 2 )

	)

134 
	#c⁄figUART_PORT
 ( 
	`p‹tCORE_ID
(Ë)

	)

	@Demo/MT3628_Cortex_A9SPCore/empty_crt.c

1 
	~<sys/ty≥s.h
>

2 
	~<sys/°©.h
>

3 
	~<uni°d.h
>

5 #ifde‡
__˝lu•lus


7 
ˇddr_t
 
_sbrk
 ( 
ö¸
 );

11 
ˇddr_t
 
	$_sbrk
 ( 
ö¸
 )

13  (
ˇddr_t
) 0;

14 
	}
}

20 #ifde‡
__˝lu•lus


22 
_wrôe
 (
fd
, * 
buf
, 
nbyãs
);

32 
	$_wrôe
 (
fd
, * 
buf
, 
nbyãs
)

36 
	}
}

38 
	$_˛o£
(
fd
)

40 ()
fd
;

42 
	}
}

44 
	$_f°©
(
fd
, 
°©
 *
buf
)

46 ()
fd
;

47 
buf
->
°_mode
 = 
S_IFCHR
;

50 
	}
}

53 
	$_ªad
 (
fd
, * 
buf
, 
nbyãs
)

56 
	}
}

58 
off_t
 
	$_l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
)

60  ((
off_t
)-1);

61 
	}
}

63 
	$_ißây
(
fd
)

65 ()
fd
;

67 
	}
}

	@Demo/MT3628_Cortex_A9SPCore/main.c

61 
	~<°dio.h
>

62 
	~<°rög.h
>

65 
	~"FªeRTOS.h
"

66 
	~"èsk.h
"

67 
	~"queue.h
"

70 
	~"öãgî.h
"

71 
	~"PﬁlQ.h
"

72 
	~"£mã°.h
"

73 
	~"BlockQ.h
"

74 
	~"cou¡£m.h
"

75 
	~"dy«mic.h
"

76 
	~"Ê›.h
"

77 
	~"GíQTe°.h
"

78 
	~"QPìk.h
"

79 
	~"ªcmuãx.h
"

80 
	~"£rül.h
"

81 
	~"comã°2.h
"

85 
	#maöCHECK_DELAY
 ( ( 
p‹tTickTy≥
 ) 5000 / 
p‹tTICK_RATE_MS
 )

	)

88 
	#maöQUEUE_POLL_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 2 )

	)

89 
	#maöCHECK_TASK_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 3 )

	)

90 
	#maöSEM_TEST_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 1 )

	)

91 
	#maöBLOCK_Q_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 2 )

	)

92 
	#maöGEN_Q_PRIORITY
 ( 
tskIDLE_PRIORITY
 )

	)

95 
	#maöQUEUE_SIZE
 ( 3 )

	)

96 
	#maöNO_DELAY
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

98 
	#maöPRINT_PORT
 ( 
c⁄figUART_PORT
 )

	)

99 #i‡
c⁄figPLATFORM
 == 2

100 
	#maöPRINT_BAUDRATE
 ( 38400 )

	)

102 
	#maöPRINT_BAUDRATE
 ( 115200 )

	)

108 
vCheckTask
–*
pvP¨amëîs
 );

117 
vAµliˇti⁄SèckOvîÊowHook
–
xTaskH™dÀ
 *
pxTask
, sig√d *
pcTaskName
 );

119 
	$maö
( )

147 
	}
}

150 
	$vAµliˇti⁄TickHook
( )

153 
	}
}

156 
	$vAµliˇti⁄IdÀHook
( )

158 sig√d 
cCh¨
;

159 i‡–
pdTRUE
 =
	`xSîülGëCh¨
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, &
cCh¨
, 0UL ) )

161 ()
	`xSîülPutCh¨
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, 
cCh¨
, 0UL );

163 
	}
}

166 
	$vAµliˇti⁄SèckOvîÊowHook
–
xTaskH™dÀ
 *
pxTask
, sig√d *
pcTaskName
 )

168 –Ë
pxTask
;

169 –Ë
pcTaskName
;

170 
	`¥ötf
("StackOverflowHook\n");

174 
	}
}

178 
	$vCheckTask
–*
pvP¨amëîs
 )

180 
p‹tBASE_TYPE
 
xEº‹Occuºed
 = 
pdFALSE
;

181 
p‹tTickTy≥
 
xLa°Executi⁄Time
, 
xFaûuªTime
 = 0;

182 sig√d 
cBuf„r
[64];

185 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
maöPRINT_PORT
,(const signed * const)"FTS\r\n", 5 );

189 
xLa°Executi⁄Time
 = 
	`xTaskGëTickCou¡
();

194 
	`vTaskDñayU¡û
–&
xLa°Executi⁄Time
, 
maöCHECK_DELAY
 );

198 if–
	`xAªI¡egîM©hsTaskStûlRu¬ög
(Ë!
pdTRUE
 )

200 
xEº‹Occuºed
 = 
pdTRUE
;

201 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: I¡egî M©hs\r\n", 
	`°æí
( "Fail: Integer Maths\r\n" ) );

204 if–
	`xAªPﬁlögQueuesStûlRu¬ög
(Ë!
pdTRUE
 )

206 
xEº‹Occuºed
 = 
pdTRUE
;

207 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: Pﬁlög Queues\r\n", 
	`°æí
( "Fail: Polling Queues\r\n" ) );

210 if–
	`xAªSem≠h‹eTasksStûlRu¬ög
(Ë!
pdTRUE
 )

212 
xEº‹Occuºed
 = 
pdTRUE
;

213 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: Sem Tasks\r\n", 
	`°æí
( "Fail: Sem Tasks\r\n" ) );

216 if–
	`xAªBlockögQueuesStûlRu¬ög
(Ë!
pdTRUE
 )

218 
xEº‹Occuºed
 = 
pdTRUE
;

219 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: BlockQ\r\n", 
	`°æí
( "Fail: BlockQ\r\n" ) );

222 if–
	`xAªCou¡ögSem≠h‹eTasksStûlRu¬ög
(Ë!
pdTRUE
 )

224 
xEº‹Occuºed
 = 
pdTRUE
;

225 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: SemCou¡\r\n", 
	`°æí
( "Fail: SemCount\r\n" ) );

228 if–
	`xAªDy«micPri‹ôyTasksStûlRu¬ög
(Ë!
pdTRUE
 )

230 
xEº‹Occuºed
 = 
pdTRUE
;

231 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: Dy«micPrio\r\n", 
	`°æí
( "Fail: DynamicPrio\r\n" ) );

234 if–
	`xAªM©hsTaskStûlRu¬ög
(Ë!
pdTRUE
 )

236 
xEº‹Occuºed
 = 
pdTRUE
;

237 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: FlﬂtM©hs\r\n", 
	`°æí
( "Fail: FloatMaths\r\n" ) );

240 if–
	`xAªGíîicQueueTasksStûlRu¬ög
(Ë!
pdTRUE
 )

242 
xEº‹Occuºed
 = 
pdTRUE
;

243 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: GíQ\r\n", 
	`°æí
( "Fail: GenQ\r\n" ) );

246 if–
	`xAªQueuePìkTasksStûlRu¬ög
(Ë!
pdTRUE
 )

248 
xEº‹Occuºed
 = 
pdTRUE
;

249 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: PìkQ\r\n", 
	`°æí
( "Fail: PeekQ\r\n" ) );

252 if–
	`xAªRecursiveMuãxTasksStûlRu¬ög
(Ë!
pdTRUE
 )

254 
xEº‹Occuºed
 = 
pdTRUE
;

255 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: RecMuãx\r\n", 
	`°æí
( "Fail: RecMutex\r\n" ) );

262 if–
xEº‹Occuºed
 =
pdTRUE
 )

264 i‡–0 =
xFaûuªTime
 )

266 
xFaûuªTime
 = 
xLa°Executi⁄Time
;

268 
	`•rötf
–(*)
cBuf„r
, "Faû: %lu\r\n", 
xFaûuªTime
 / 1000 );

272 
	`•rötf
–(*)
cBuf„r
, "Pass: %lu\r\n", 
xLa°Executi⁄Time
 / 1000 );

274 
	`•rötf
–(*)
cBuf„r
, "From C‹e: %ld\r\n", 
	`p‹tCORE_ID
());

277 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)
cBuf„r
, 
	`°æí
((*)cBuffer) );

279 
	}
}

282 #i‡
c⁄figPLATFORM
 == 2

284 
	$¥vRódP15_C1_C0_0
( )

286 vﬁ©ûê
ulRëu∫
 = 0UL;

288 
__asm
 volatile(

290 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

292  
ulRëu∫
;

293 
	}
}

297 
	$¥vRódP15_C1_C0_1
( )

299 vﬁ©ûê
ulRëu∫
 = 0UL;

301 
__asm
 volatile(

303 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

305  
ulRëu∫
;

306 
	}
}

309 
	$¥vRódP15_C1_C0_2
( )

311 vﬁ©ûê
ulRëu∫
 = 0UL;

313 
__asm
 volatile(

315 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

317  
ulRëu∫
;

318 
	}
}

321 
	$¥vRódP15_C1_C1_0
( )

323 vﬁ©ûê
ulRëu∫
 = 0UL;

325 
__asm
 volatile(

327 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

329  
ulRëu∫
;

330 
	}
}

334 
	$¥vRódP15_C1_C1_1
( )

336 vﬁ©ûê
ulRëu∫
 = 0UL;

338 
__asm
 volatile(

340 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

342  
ulRëu∫
;

343 
	}
}

346 
	$¥vRódP15_C1_C1_2
( )

348 vﬁ©ûê
ulRëu∫
 = 0UL;

350 
__asm
 volatile(

352 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

354  
ulRëu∫
;

355 
	}
}

359 
	$¥vRódP15_C12_C0_1
( )

361 vﬁ©ûê
ulRëu∫
 = 0UL;

363 
__asm
 volatile(

365 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

367  
ulRëu∫
;

368 
	}
}

442 
	$vAµliˇti⁄MÆlocFaûedHook
( )

444 
__asm
 volatile (" smc #0 ");

445 
	}
}

448 
	$vAs£πCÆÀd
–*
fûe
, 
löe
 )

450 
	`¥ötf
("As£πi⁄ faûedáà%s,Üöê%d\n\r",
fûe
,
löe
);

451 
	`èskDISABLE_INTERRUPTS
();

453 
	}
}

	@Demo/MT3628_Cortex_A9SPCore/serial.c

60 
	~"FªeRTOS.h
"

61 
	~"£rül.h
"

63 
p‹tBASE_TYPE
 
xUARTRe˚iveCh¨a˘î
–
ulUARTPîùhîÆ
, sig√d *
pcCh¨
, 
p‹tTickTy≥
 
xDñay
 );

64 
p‹tBASE_TYPE
 
xUARTSídCh¨a˘î
–
ulUARTPîùhîÆ
, sig√d 
cCh¨
, 
p‹tTickTy≥
 
xDñay
 );

65 
vUARTInôüli£
(
ulUARTPîùhîÆ
, 
ulBaud
, 
ulQueueSize
 );

67 
xComP‹tH™dÀ
 
	$xSîülP‹tInôMöimÆ
–
ulW™ãdBaud
, 
p‹tBASE_TYPE
 
uxQueueLígth
 )

69 
	`vUARTInôüli£
–
c⁄figUART_PORT
, 
ulW™ãdBaud
, 
uxQueueLígth
 );

70  (
xComP‹tH™dÀ
Ë
c⁄figUART_PORT
;

71 
	}
}

73 
	$vSîülPutSåög
–
xComP‹tH™dÀ
 
pxP‹t
, c⁄° sig√d * c⁄° 
pcSåög
, 
usSåögLígth
 )

75 
usIndex
 = 0;

76  
usIndex
 = 0; usIndex < 
usSåögLígth
; usIndex++ )

78 i‡–
pdTRUE
 !
	`xUARTSídCh¨a˘î
–()
pxP‹t
, 
pcSåög
[
usIndex
], 
p‹tMAX_DELAY
 ) )

84 
	}
}

86 sig√d 
p‹tBASE_TYPE
 
	$xSîülGëCh¨
–
xComP‹tH™dÀ
 
pxP‹t
, sig√d *
pcRxedCh¨
, 
p‹tTickTy≥
 
xBlockTime
 )

88  
	`xUARTRe˚iveCh¨a˘î
–()
pxP‹t
, 
pcRxedCh¨
, 
xBlockTime
 );

89 
	}
}

91 sig√d 
p‹tBASE_TYPE
 
	$xSîülPutCh¨
–
xComP‹tH™dÀ
 
pxP‹t
, sig√d 
cOutCh¨
, 
p‹tTickTy≥
 
xBlockTime
 )

93  
	`xUARTSídCh¨a˘î
–()
pxP‹t
, 
cOutCh¨
, 
xBlockTime
 );

94 
	}
}

	@Demo/MT3628_Cortex_A9SPCore/uart.c

62 
	~"FªeRTOS.h
"

63 
	~"queue.h
"

64 
	~"èsk.h
"

65 
	~"£mphr.h
"

68 
	#UART_USE_INTERRUPT
 1

	)

70 
	#UART0_BASE
 ( 0x70006000UL )

	)

71 
	#UART1_BASE
 ( 0x70006040UL )

	)

72 
	#UART2_BASE
 ( 0x70006200UL )

	)

73 
	#UART3_BASE
 ( 0x70006300UL )

	)

74 
	#UART4_BASE
 ( 0x70006400UL )

	)

76 
	#UART_THR_DLAB
(
x
Ë–(*Ë–(xË+ 0x0000UL ) )

	)

77 
	#UART_IER_DLAB
(
x
Ë–(*Ë–(xË+ 0x0004UL ) )

	)

78 
	#UART_IIR_FCR
(
x
Ë–(*)–(xË+ 0x0008UL ) )

	)

79 
	#UART_LCR
(
x
Ë–(*Ë–(xË+ 0x000CUL ) )

	)

80 
	#UART_MCR
(
x
Ë–(*)–(xË+ 0x0010UL ) )

	)

81 
	#UART_LSR
(
x
Ë–(*Ë–(xË+ 0x0014UL ) )

	)

82 
	#UART_MSR
(
x
Ë–(*Ë–(xË+ 0x0018UL ) )

	)

83 
	#UART_SPR
(
x
Ë–(*Ë–(xË+ 0x001CUL ) )

	)

84 
	#UART_IRDA_CSR
(
x
Ë–(*)–(xË+ 0x0020UL ) )

	)

85 
	#UART_ASR
(
x
Ë–(*Ë–(xË+ 0x003CUL ) )

	)

87 
	#UART_IER_DMA_ENABLE
 ( 1 << 7 )

	)

88 
	#UART_IER_UNIT_ENABLE
 ( 1 << 6 )

	)

89 
	#UART_IER_NRZ_ENABLE
 ( 1 << 5 )

	)

90 
	#UART_IER_RX_TIMEOUT_INT_ENABLE
 ( 1 << 4 )

	)

91 
	#UART_IER_MODEM_INT_ENABLE
 ( 1 << 3 )

	)

92 
	#UART_IER_RXLS_INT_ENABLE
 ( 1 << 2 )

	)

93 
	#UART_IER_TXDR_INT_ENABLE
 ( 1 << 1 )

	)

94 
	#UART_IER_RXDA_INT_ENABLE
 ( 1 << 0 )

	)

96 
	#UART_IIR_FIFO_ENABLE_STATUS_MASK
 ( 3 << 6 )

	)

97 
	#UART_IIR_TIMEOUT_STATUS_MASK
 ( 1 << 3 )

	)

98 
	#UART_IIR_INTERRUPT_STATUS_MASK
 ( 3 << 1 )

	)

99 
	#UART_IIR_INTERRUPT_STATUS_RX_ERROR
 ( 3 << 1 )

	)

100 
	#UART_IIR_INTERRUPT_STATUS_RX_DR
 ( 1 << 2 )

	)

101 
	#UART_IIR_INTERRUPT_STATUS_TX
 ( 1 << 1 )

	)

102 
	#UART_IIR_INTERRUPT_PENDING_MASK
 ( 1 << 0 )

	)

104 
	#UART_FCR_INTERRUPT_TRIGGER_LEVEL_MASK
 ( 3 << 6 )

	)

105 
	#UART_FCR_RESET_TX_EMPTY_INT_FLAG
 ( 1 << 2 )

	)

106 
	#UART_FCR_RESET_TX_FLAG
 ( 1 << 2 )

	)

107 
	#UART_FCR_RESET_RX_FLAG
 ( 1 << 1 )

	)

108 
	#UART_FCR_TX_RX_ENABLE_FLAG
 ( 1 << 0 )

	)

110 
	#UART_LCR_DIVISOR_LATCH_ACCESS_FLAG
 ( 1 << 7 )

	)

111 
	#UART_LCR_SET_BREAK_FLAG
 ( 1 << 6 )

	)

112 
	#UART_LCR_STICKY_PARITY_FLAG
 ( 1 << 5 )

	)

113 
	#UART_LCR_EVEN_PARITY_FLAG
 ( 1 << 4 )

	)

114 
	#UART_LCR_PARITY_ENABLE_FLAG
 ( 1 << 3 )

	)

115 
	#UART_LCR_STOP_BIT_FLAG
 ( 1 << 2 )

	)

116 
	#UART_LCR_WORD_LENGTH_SELECT_MASK
 ( 3 << 0 )

	)

118 
	#UART_LSR_FIFO_ERROR_FLAG
 ( 1 << 7 )

	)

119 
	#UART_LSR_TXE_FLAG
 ( 1 << 6 )

	)

120 
	#UART_LSR_TXDR_FLAG
 ( 1 << 5 )

	)

121 
	#UART_LSR_BI_FLAG
 ( 1 << 4 )

	)

122 
	#UART_LSR_FRAME_ERROR_FLAG
 ( 1 << 3 )

	)

123 
	#UART_LSR_PARITY_ERROR_FLAG
 ( 1 << 2 )

	)

124 
	#UART_LSR_OVERRUN_ERROR_FLAG
 ( 1 << 1 )

	)

125 
	#UART_LSR_RXDR_FLAG
 ( 1 << 0 )

	)

127 
	#UART_MCR_LOOP_FLAG
 ( 1 << 4 )

	)

128 
	#UART_MCR_OUT2_FLAG
 ( 1 << 3 )

	)

129 
	#UART_MCR_OUT1_FLAG
 ( 1 << 2 )

	)

130 
	#UART_MCR_RTS_FLAG
 ( 1 << 1 )

	)

131 
	#UART_MCR_DTR_FLAG
 ( 1 << 0 )

	)

133 
	#UART_MSR_DCD_FLAG
 ( 1 << 7 )

	)

134 
	#UART_MSR_RI_FLAG
 ( 1 << 6 )

	)

135 
	#UART_MSR_DSR_FLAG
 ( 1 << 5 )

	)

136 
	#UART_MSR_CTS_FLAG
 ( 1 << 4 )

	)

137 
	#UART_MSR_DDCD_FLAG
 ( 1 << 3 )

	)

138 
	#UART_MSR_TERI_FLAG
 ( 1 << 2 )

	)

139 
	#UART_MSR_DDSR_FLAG
 ( 1 << 1 )

	)

140 
	#UART_MSR_DCTS_FLAG
 ( 1 << 0 )

	)

143 
	#UART_CLK_HZ
 ( 216000000UL )

	)

144 
	#UART0_VECTOR_ID
 ( 32 )

	)

146 
	#UART_FIFO_SIZE_BYTES
 ( 32UL )

	)

147 
	#UART1_VECTOR_ID
 ( 33 )

	)

148 
	#UART2_VECTOR_ID
 ( 34 )

	)

149 
	#UART3_VECTOR_ID
 ( 35 )

	)

150 
	#UART4_VECTOR_ID
 ( 36 )

	)

152 
	#TX_QUEUE
 ( 0 )

	)

153 
	#RX_QUEUE
 ( 1 )

	)

158 
xQueueH™dÀ
 
	gxU¨tQueues
[5][2] = { { 
NULL
, NULL } };

161 #i‡
UART_USE_INTERRUPT


163 
	$vUARTI¡îru±H™dÀr
–*
pvBa£Addªss
 )

165 
ulBa£
 = ()
pvBa£Addªss
;

166 
usSètus
 = 0;

167 
usSour˚
 = 0;

168 
ucRe˚iveCh¨
 = 0;

169 
p‹tBASE_TYPE
 
xTaskWokí
 = 
pdFALSE
;

170 
xQueueH™dÀ
 
xTxQueue
 = 
NULL
;

171 
xQueueH™dÀ
 
xRxQueue
 = 
NULL
;

172 
ulUART
 = 0;

175  
ulBa£
 )

177 
UART0_BASE
:

178 
ulUART
 = 0;

180 
UART1_BASE
:

181 
ulUART
 = 1;

183 
UART2_BASE
:

184 
ulUART
 = 2;

186 
UART3_BASE
:

187 
ulUART
 = 3;

189 
UART4_BASE
:

190 
ulUART
 = 4;

194 
xTxQueue
 = 
xU¨tQueues
[
ulUART
][
TX_QUEUE
];

195 
xRxQueue
 = 
xU¨tQueues
[
ulUART
][
RX_QUEUE
];

198 
usSour˚
 = *
	`UART_IIR_FCR
(
ulBa£
);

201 i‡–
UART_IIR_INTERRUPT_STATUS_RX_ERROR
 =–
usSour˚
 & 
UART_IIR_INTERRUPT_STATUS_MASK
 ) )

206 
ucRe˚iveCh¨
 = *
	`UART_THR_DLAB
(
UART0_BASE
);

207 }  *
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_FIFO_ERROR_FLAG
 );

211 i‡––
UART_IIR_INTERRUPT_STATUS_RX_DR
 =–
usSour˚
 & 
UART_IIR_INTERRUPT_STATUS_MASK
 ) )

212 || ( 
usSour˚
 & 
UART_IIR_TIMEOUT_STATUS_MASK
 ) )

214  *
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_RXDR_FLAG
 )

217 
ucRe˚iveCh¨
 = *
	`UART_THR_DLAB
(
ulBa£
);

219 i‡–
pdTRUE
 !
	`xQueueSídFromISR
–
xRxQueue
, &
ucRe˚iveCh¨
, &
xTaskWokí
 ) )

229 i‡–
UART_IIR_INTERRUPT_STATUS_TX
 =–
usSour˚
 & 
UART_IIR_INTERRUPT_STATUS_MASK
 ) )

232  
pdTRUE
 =
	`xSem≠h‹eGiveFromISR
–
xTxQueue
, &
xTaskWokí
 ) )

235 i‡–0 =–*
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_TXE_FLAG
 ) )

241 i‡–0 !–*
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_TXE_FLAG
 ) )

243 *
	`UART_IER_DLAB
(
ulBa£
Ë&~
UART_IER_TXDR_INT_ENABLE
;

251 *
	`UART_LSR
(
ulBa£
Ë
usSètus
;

254 
	`p‹tEND_SWITCHING_ISR
(
xTaskWokí
);

255 
	}
}

260 
	$vUARTInôüli£
(
ulUARTPîùhîÆ
, 
ulBaud
, 
ulQueueSize
 )

262 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–(*
vH™dÀr
)(*), *
pvP¨amëî
, 
ulVe˘‹
, 
ucEdgeTriggîed
, 
ucPri‹ôy
, 
ucPro˚ss‹T¨gës
 );

263 
ulBa£
 = 0;

264 
ulVe˘‹ID
 = 0;

266  
ulUARTPîùhîÆ
 )

269 
ulBa£
 = 
UART0_BASE
;

270 
ulVe˘‹ID
 = 
UART0_VECTOR_ID
;

272 
xU¨tQueues
[0][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

273 
xU¨tQueues
[0][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

276 
ulBa£
 = 
UART1_BASE
;

277 
ulVe˘‹ID
 = 
UART1_VECTOR_ID
;

279 
xU¨tQueues
[1][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

280 
xU¨tQueues
[1][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

283 
ulBa£
 = 
UART2_BASE
;

284 
ulVe˘‹ID
 = 
UART2_VECTOR_ID
;

286 
xU¨tQueues
[2][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

287 
xU¨tQueues
[2][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

290 
ulBa£
 = 
UART3_BASE
;

291 
ulVe˘‹ID
 = 
UART3_VECTOR_ID
;

293 
xU¨tQueues
[3][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

294 
xU¨tQueues
[3][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

297 
ulBa£
 = 
UART4_BASE
;

298 
ulVe˘‹ID
 = 
UART4_VECTOR_ID
;

300 
xU¨tQueues
[4][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

301 
xU¨tQueues
[4][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

306 *
	`UART_IIR_FCR
(
ulBa£
) = 0;

307 *
	`UART_IER_DLAB
(
ulBa£
) = 0;

308 *
	`UART_LCR
(
ulBa£
Ë
UART_LCR_DIVISOR_LATCH_ACCESS_FLAG
;

309 *
	`UART_THR_DLAB
(
ulBa£
Ë––
UART_CLK_HZ
 / 16 ) / 115200 );

310 *
	`UART_LCR
(
ulBa£
) = 0;

311 *
	`UART_IER_DLAB
(
ulBa£
) = 0;

314 *
	`UART_IIR_FCR
(
ulBa£
Ë
UART_FCR_RESET_TX_FLAG
 | 
UART_FCR_RESET_RX_FLAG
;

315 *
	`UART_LCR
(
ulBa£
Ë–3 & 
UART_LCR_WORD_LENGTH_SELECT_MASK
 ) | 
UART_FCR_RESET_TX_EMPTY_INT_FLAG
;

316 i‡–
ulUARTPîùhîÆ
 != 0 )

318 *
	`UART_MCR
(
ulBa£
Ë
UART_MCR_RTS_FLAG
 | 
UART_MCR_OUT2_FLAG
 | 
UART_MCR_LOOP_FLAG
;

322 *
	`UART_MCR
(
ulBa£
Ë
UART_MCR_RTS_FLAG
 | 
UART_MCR_OUT2_FLAG
;

324 *
	`UART_MSR
(
ulBa£
) = 0;

325 *
	`UART_SPR
(
ulBa£
) = 0;

326 *
	`UART_IRDA_CSR
(
ulBa£
) = 0;

327 *
	`UART_ASR
(
ulBa£
) = 0;

329 #i‡
UART_USE_INTERRUPT


331 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–
vUARTI¡îru±H™dÀr
, (*)
ulBa£
, 
ulVe˘‹ID
, 
pdFALSE
, 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
, 1 );

332 *
	`UART_IER_DLAB
(
ulBa£
Ë
UART_IER_UNIT_ENABLE
 | 
UART_IER_RX_TIMEOUT_INT_ENABLE
 | 
UART_IER_RXLS_INT_ENABLE
 | 
UART_IER_TXDR_INT_ENABLE
 | 
UART_IER_RXDA_INT_ENABLE
;

336 *
	`UART_IIR_FCR
(
ulBa£
Ë
UART_FCR_TX_RX_ENABLE_FLAG
;

337 
	}
}

340 
p‹tBASE_TYPE
 
	$xUARTSídCh¨a˘î
–
ulUARTPîùhîÆ
, 
ucCh¨
, 
p‹tTickTy≥
 
xDñay
 )

342 
xQueueH™dÀ
 
xTxQueue
 = 
NULL
;

343 
ulBa£
 = 0;

344 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFALSE
;

346  
ulUARTPîùhîÆ
 )

349 
ulBa£
 = 
UART0_BASE
;

350 
xTxQueue
 = 
xU¨tQueues
[0][
TX_QUEUE
];

353 
ulBa£
 = 
UART1_BASE
;

354 
xTxQueue
 = 
xU¨tQueues
[1][
TX_QUEUE
];

357 
ulBa£
 = 
UART2_BASE
;

358 
xTxQueue
 = 
xU¨tQueues
[2][
TX_QUEUE
];

361 
ulBa£
 = 
UART3_BASE
;

362 
xTxQueue
 = 
xU¨tQueues
[3][
TX_QUEUE
];

365 
ulBa£
 = 
UART4_BASE
;

366 
xTxQueue
 = 
xU¨tQueues
[4][
TX_QUEUE
];

370 i‡–0 !
ulBa£
 )

372 #i‡
UART_USE_INTERRUPT


374 
xRëu∫
 = 
	`xSem≠h‹eTake
–
xTxQueue
, 
xDñay
 );

376 i‡–
pdTRUE
 =
xRëu∫
 )

379 *
	`UART_THR_DLAB
(
ulBa£
Ë
ucCh¨
;

380 *
	`UART_IER_DLAB
(
ulBa£
Ë|
UART_IER_TXDR_INT_ENABLE
;

383  ( *
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_TXE_FLAG
 ) == 0 );

384 *
	`UART_THR_DLAB
(
ulBa£
Ë
ucCh¨
;

385 
xRëu∫
 = 
pdTRUE
;

388  
xRëu∫
;

389 
	}
}

392 
p‹tBASE_TYPE
 
	$xUARTRe˚iveCh¨a˘î
–
ulUARTPîùhîÆ
, *
pucCh¨
, 
p‹tTickTy≥
 
xDñay
 )

394 
xQueueH™dÀ
 
xRxQueue
 = 
NULL
;

395 
ulBa£
 = 0;

396 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFALSE
;

398  
ulUARTPîùhîÆ
 )

401 
ulBa£
 = 
UART0_BASE
;

402 
xRxQueue
 = 
xU¨tQueues
[0][
RX_QUEUE
];

405 
ulBa£
 = 
UART1_BASE
;

406 
xRxQueue
 = 
xU¨tQueues
[1][
RX_QUEUE
];

409 
ulBa£
 = 
UART2_BASE
;

410 
xRxQueue
 = 
xU¨tQueues
[2][
RX_QUEUE
];

413 
ulBa£
 = 
UART3_BASE
;

414 
xRxQueue
 = 
xU¨tQueues
[3][
RX_QUEUE
];

417 
ulBa£
 = 
UART4_BASE
;

418 
xRxQueue
 = 
xU¨tQueues
[4][
RX_QUEUE
];

422 i‡–0 !
ulBa£
 )

424 #i‡
UART_USE_INTERRUPT


425 
xRëu∫
 = 
	`xQueueRe˚ive
–
xRxQueue
, 
pucCh¨
, 
xDñay
 );

427 i‡––*
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_RXDR_FLAG
 ) != 0 )

429 *
pucCh¨
 = *
	`UART_THR_DLAB
(
ulBa£
);

430 
xRëu∫
 = 
pdTRUE
;

435  
xRëu∫
;

436 
	}
}

	@Demo/Versatile_Express_Cortex_A9MPCore/FreeRTOSConfig.h

55 #i‚de‡
FREERTOS_CONFIG_H


56 
	#FREERTOS_CONFIG_H


	)

68 
	#c⁄figUSE_PREEMPTION
 1

	)

69 
	#c⁄figUSE_IDLE_HOOK
 1

	)

70 
	#c⁄figUSE_TICK_HOOK
 1

	)

71 
	#c⁄figTICK_RATE_HZ
 ( 1000 )

	)

72 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( 
p‹tSHORT
 ) 256 * 4 )

	)

73 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) 12 * 1024 * 1024 )

	)

74 
	#c⁄figMAX_TASK_NAME_LEN
 ( 12 )

	)

75 
	#c⁄figUSE_TRACE_FACILITY
 1

	)

76 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

77 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

78 
	#c⁄figUSE_CO_ROUTINES
 0

	)

79 
	#c⁄figUSE_MUTEXES
 1

	)

80 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

81 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 1

	)

82 
	#c⁄figUSE_RECURSIVE_MUTEXES
 1

	)

83 
	#c⁄figQUEUE_REGISTRY_SIZE
 0

	)

84 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 1

	)

85 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

86 
	#c⁄figUSE_COUNTING_SEMAPHORES
 1

	)

87 
	#c⁄figUSE_ALTERNATIVE_API
 1

	)

89 
	#c⁄figUSE_TIMERS
 1

	)

90 
	#c⁄figTIMER_TASK_PRIORITY
 2

	)

91 
	#c⁄figTIMER_QUEUE_LENGTH
 20

	)

92 
	#c⁄figTIMER_TASK_STACK_DEPTH
 ( 
c⁄figMINIMAL_STACK_SIZE
 * 2 )

	)

94 
	#c⁄figMAX_PRIORITIES
 ( ( 
p‹tBASE_TYPE
 ) 7 )

	)

95 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

99 
	#c⁄figUSE_CO_ROUTINES
 0

	)

100 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

105 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

106 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

107 
	#INCLUDE_vTaskDñëe
 1

	)

108 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

109 
	#INCLUDE_vTaskSu•íd
 1

	)

110 
	#INCLUDE_vTaskDñayU¡û
 1

	)

111 
	#INCLUDE_vTaskDñay
 1

	)

112 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 1

	)

113 
	#INCLUDE_xTaskGëScheduÀrSèã
 1

	)

114 
	#INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 1

	)

115 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 1

	)

116 
	#INCLUDE_pcTaskGëTaskName
 1

	)

118 
vAs£πCÆÀd
–*
fûe
, 
löe
 );

119 
	#c⁄figASSERT
–
x
 ) if––x ) =0 ) 
	`vAs£πCÆÀd
(
__FILE__
,
__LINE__
)

	)

125 
	#c⁄figLOWEST_INTERRUPT_PRIORITY
 ( 0xFF )

	)

126 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 ( 0xC0 )

	)

127 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ( 0xA0 )

	)

130 
	#c⁄figPLATFORM
 ( 2 )

	)

132 
	#c⁄figCPU_CLOCK_HZ
 ( ( 
p‹tLONG
 ) 2000000 )

	)

133 
	#c⁄figCPU_PERIPH_HZ
 ( 
c⁄figCPU_CLOCK_HZ
 / 2 )

	)

134 
	#c⁄figUART_PORT
 ( 
	`p‹tCORE_ID
(Ë)

	)

	@Demo/Versatile_Express_Cortex_A9MPCore/main.c

61 
	~<°dio.h
>

62 
	~<°rög.h
>

65 
	~"FªeRTOS.h
"

66 
	~"èsk.h
"

67 
	~"queue.h
"

70 
	~"öãgî.h
"

71 
	~"PﬁlQ.h
"

72 
	~"£mã°.h
"

73 
	~"BlockQ.h
"

74 
	~"cou¡£m.h
"

75 
	~"dy«mic.h
"

76 
	~"Ê›.h
"

77 
	~"GíQTe°.h
"

78 
	~"QPìk.h
"

79 
	~"ªcmuãx.h
"

80 
	~"£rül.h
"

81 
	~"comã°2.h
"

85 
	#maöCHECK_DELAY
 ( ( 
p‹tTickTy≥
 ) 5000 / 
p‹tTICK_RATE_MS
 )

	)

88 
	#maöQUEUE_POLL_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 2 )

	)

89 
	#maöCHECK_TASK_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 3 )

	)

90 
	#maöSEM_TEST_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 1 )

	)

91 
	#maöBLOCK_Q_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 2 )

	)

92 
	#maöGEN_Q_PRIORITY
 ( 
tskIDLE_PRIORITY
 )

	)

95 
	#maöQUEUE_SIZE
 ( 3 )

	)

96 
	#maöNO_DELAY
 ( ( 
p‹tTickTy≥
 ) 0 )

	)

98 
	#maöPRINT_PORT
 ( 
c⁄figUART_PORT
 )

	)

99 #i‡
c⁄figPLATFORM
 == 2

100 
	#maöPRINT_BAUDRATE
 ( 38400 )

	)

102 
	#maöPRINT_BAUDRATE
 ( 115200 )

	)

108 
vCheckTask
–*
pvP¨amëîs
 );

114 
¥vSëupH¨dw¨e
( );

117 
vAµliˇti⁄SèckOvîÊowHook
–
xTaskH™dÀ
 *
pxTask
, sig√d *
pcTaskName
 );

119 
	$maö
( )

122 
	`¥vSëupH¨dw¨e
();

125 
	`vSèπI¡egîM©hTasks
–
tskIDLE_PRIORITY
 );

126 
	`vSèπPﬁÀdQueueTasks
–
maöQUEUE_POLL_PRIORITY
 );

127 
	`vSèπSem≠h‹eTasks
–
maöSEM_TEST_PRIORITY
 );

128 
	`vSèπBlockögQueueTasks
–
maöBLOCK_Q_PRIORITY
 );

129 
	`vSèπCou¡ögSem≠h‹eTasks
();

130 
	`vSèπDy«micPri‹ôyTasks
();

131 
	`vSèπM©hTasks
–
tskIDLE_PRIORITY
 );

132 
	`vSèπGíîicQueueTasks
–
maöGEN_Q_PRIORITY
 );

133 
	`vSèπQueuePìkTasks
();

134 
	`vSèπRecursiveMuãxTasks
();

137 
	`xTaskCª©e
–
vCheckTask
, (c⁄° sig√d *)"Check", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
maöCHECK_TASK_PRIORITY
, NULL );

140 
	`vTaskSèπScheduÀr
();

143 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
maöPRINT_PORT
, (const signed * const)"ShouldÇeverÑeach here!\r\n", 26 );

147 
	}
}

150 
	$vAµliˇti⁄TickHook
( )

153 
	}
}

156 
	$vAµliˇti⁄IdÀHook
( )

158 sig√d 
cCh¨
;

159 i‡–
pdTRUE
 =
	`xSîülGëCh¨
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, &
cCh¨
, 0UL ) )

161 ()
	`xSîülPutCh¨
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, 
cCh¨
, 0UL );

163 
	}
}

166 
	$vAµliˇti⁄SèckOvîÊowHook
–
xTaskH™dÀ
 *
pxTask
, sig√d *
pcTaskName
 )

168 –Ë
pxTask
;

169 –Ë
pcTaskName
;

170 
	`¥ötf
("StackOverflowHook\n");

174 
	}
}

178 
	$vCheckTask
–*
pvP¨amëîs
 )

180 
p‹tBASE_TYPE
 
xEº‹Occuºed
 = 
pdFALSE
;

181 
p‹tTickTy≥
 
xLa°Executi⁄Time
, 
xFaûuªTime
 = 0;

182 sig√d 
cBuf„r
[64];

185 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
maöPRINT_PORT
,(const signed * const)"FTS\r\n", 5 );

189 
xLa°Executi⁄Time
 = 
	`xTaskGëTickCou¡
();

194 
	`vTaskDñayU¡û
–&
xLa°Executi⁄Time
, 
maöCHECK_DELAY
 );

198 if–
	`xAªI¡egîM©hsTaskStûlRu¬ög
(Ë!
pdTRUE
 )

200 
xEº‹Occuºed
 = 
pdTRUE
;

201 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: I¡egî M©hs\r\n", 
	`°æí
( "Fail: Integer Maths\r\n" ) );

204 if–
	`xAªPﬁlögQueuesStûlRu¬ög
(Ë!
pdTRUE
 )

206 
xEº‹Occuºed
 = 
pdTRUE
;

207 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: Pﬁlög Queues\r\n", 
	`°æí
( "Fail: Polling Queues\r\n" ) );

210 if–
	`xAªSem≠h‹eTasksStûlRu¬ög
(Ë!
pdTRUE
 )

212 
xEº‹Occuºed
 = 
pdTRUE
;

213 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: Sem Tasks\r\n", 
	`°æí
( "Fail: Sem Tasks\r\n" ) );

216 if–
	`xAªBlockögQueuesStûlRu¬ög
(Ë!
pdTRUE
 )

218 
xEº‹Occuºed
 = 
pdTRUE
;

219 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: BlockQ\r\n", 
	`°æí
( "Fail: BlockQ\r\n" ) );

222 if–
	`xAªCou¡ögSem≠h‹eTasksStûlRu¬ög
(Ë!
pdTRUE
 )

224 
xEº‹Occuºed
 = 
pdTRUE
;

225 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: SemCou¡\r\n", 
	`°æí
( "Fail: SemCount\r\n" ) );

228 if–
	`xAªDy«micPri‹ôyTasksStûlRu¬ög
(Ë!
pdTRUE
 )

230 
xEº‹Occuºed
 = 
pdTRUE
;

231 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: Dy«micPrio\r\n", 
	`°æí
( "Fail: DynamicPrio\r\n" ) );

234 if–
	`xAªM©hsTaskStûlRu¬ög
(Ë!
pdTRUE
 )

236 
xEº‹Occuºed
 = 
pdTRUE
;

237 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: FlﬂtM©hs\r\n", 
	`°æí
( "Fail: FloatMaths\r\n" ) );

240 if–
	`xAªGíîicQueueTasksStûlRu¬ög
(Ë!
pdTRUE
 )

242 
xEº‹Occuºed
 = 
pdTRUE
;

243 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: GíQ\r\n", 
	`°æí
( "Fail: GenQ\r\n" ) );

246 if–
	`xAªQueuePìkTasksStûlRu¬ög
(Ë!
pdTRUE
 )

248 
xEº‹Occuºed
 = 
pdTRUE
;

249 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: PìkQ\r\n", 
	`°æí
( "Fail: PeekQ\r\n" ) );

252 if–
	`xAªRecursiveMuãxTasksStûlRu¬ög
(Ë!
pdTRUE
 )

254 
xEº‹Occuºed
 = 
pdTRUE
;

255 
	`vSîülPutSåög
–(
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)"Faû: RecMuãx\r\n", 
	`°æí
( "Fail: RecMutex\r\n" ) );

262 if–
xEº‹Occuºed
 =
pdTRUE
 )

264 i‡–0 =
xFaûuªTime
 )

266 
xFaûuªTime
 = 
xLa°Executi⁄Time
;

268 
	`•rötf
–(*)
cBuf„r
, "Faû: %lu\r\n", 
xFaûuªTime
 / 1000 );

272 
	`•rötf
–(*)
cBuf„r
, "Pass: %lu\r\n", 
xLa°Executi⁄Time
 / 1000 );

274 
	`•rötf
–(*)
cBuf„r
, "From C‹e: %ld\r\n", 
	`p‹tCORE_ID
());

277 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
maöPRINT_PORT
, (c⁄° sig√d * c⁄°)
cBuf„r
, 
	`°æí
((*)cBuffer) );

279 
	}
}

282 #i‡
c⁄figPLATFORM
 == 2

284 
	$¥vRódP15_C1_C0_0
( )

286 vﬁ©ûê
ulRëu∫
 = 0UL;

288 
__asm
 volatile(

290 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

292  
ulRëu∫
;

293 
	}
}

297 
	$¥vRódP15_C1_C0_1
( )

299 vﬁ©ûê
ulRëu∫
 = 0UL;

301 
__asm
 volatile(

303 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

305  
ulRëu∫
;

306 
	}
}

309 
	$¥vRódP15_C1_C0_2
( )

311 vﬁ©ûê
ulRëu∫
 = 0UL;

313 
__asm
 volatile(

315 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

317  
ulRëu∫
;

318 
	}
}

321 
	$¥vRódP15_C1_C1_0
( )

323 vﬁ©ûê
ulRëu∫
 = 0UL;

325 
__asm
 volatile(

327 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

329  
ulRëu∫
;

330 
	}
}

334 
	$¥vRódP15_C1_C1_1
( )

336 vﬁ©ûê
ulRëu∫
 = 0UL;

338 
__asm
 volatile(

340 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

342  
ulRëu∫
;

343 
	}
}

346 
	$¥vRódP15_C1_C1_2
( )

348 vﬁ©ûê
ulRëu∫
 = 0UL;

350 
__asm
 volatile(

352 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

354  
ulRëu∫
;

355 
	}
}

359 
	$¥vRódP15_C12_C0_1
( )

361 vﬁ©ûê
ulRëu∫
 = 0UL;

363 
__asm
 volatile(

365 : [
ªtvÆ
] "Ù" (
ulRëu∫
) : :

367  
ulRëu∫
;

368 
	}
}

374 
	$¥vSëupH¨dw¨e
( )

376 
ulVe˘‹
 = 0UL;

377 #i‡
c⁄figPLATFORM
 == 2

378 
ulVÆue
 = 0UL;

379 
cAddªss
[32];

382 
	`p‹tDISABLE_INTERRUPTS
();

385 
	`vP‹tUnknownI¡îru±H™dÀr
–*
pvP¨amëî
 );

386 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–(*
vH™dÀr
)(*), *
pvP¨amëî
, 
ulVe˘‹
, 
ucEdgeTriggîed
, 
ucPri‹ôy
, 
ucPro˚ss‹T¨gës
 );

387  
ulVe˘‹
 = 0; ulVe˘‹ < 
p‹tMAX_VECTORS
; ulVector++ )

388 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–
vP‹tUnknownI¡îru±H™dÀr
, (*)
ulVe˘‹
, ulVe˘‹, 
pdTRUE
, 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
, 1 );

390 
	`vUARTInôüli£
(
ulUARTPîùhîÆ
, 
ulBaud
, 
ulQueueSize
 );

391 
	`vUARTInôüli£
–
maöPRINT_PORT
, 
maöPRINT_BAUDRATE
, 64 );

393 #i‡
c⁄figPLATFORM
 == 2

394 
ulVÆue
 = 
	`p‹tCORE_ID
();

395 
	`•rötf
–
cAddªss
, "C‹e: %ld\r\n", 
ulVÆue
 );

396 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
c⁄figUART_PORT
,(c⁄° sig√d * c⁄°)
cAddªss
, 
	`°æí
(cAddress) );

398 
ulVÆue
 = ()
maö
;

399 
	`•rötf
–
cAddªss
, "Maö: 0x%08lX\r\n", 
ulVÆue
 );

400 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
c⁄figUART_PORT
,(c⁄° sig√d * c⁄°)
cAddªss
, 
	`°æí
(cAddress) );

403 
ulVÆue
 = 
	`¥vRódP15_C1_C0_0
();

404 
	`•rötf
–
cAddªss
, "SCTLR: 0x%08lX\r\n", 
ulVÆue
 );

405 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
c⁄figUART_PORT
,(c⁄° sig√d * c⁄°)
cAddªss
, 
	`°æí
(cAddress) );

408 
ulVÆue
 = 
	`¥vRódP15_C1_C0_1
();

409 
	`•rötf
–
cAddªss
, "ACTLR: 0x%08lX\r\n", 
ulVÆue
 );

410 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
c⁄figUART_PORT
,(c⁄° sig√d * c⁄°)
cAddªss
, 
	`°æí
(cAddress) );

413 
ulVÆue
 = 
	`¥vRódP15_C1_C0_2
();

414 
	`•rötf
–
cAddªss
, "CPACR: 0x%08lX\r\n", 
ulVÆue
 );

415 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
c⁄figUART_PORT
,(c⁄° sig√d * c⁄°)
cAddªss
, 
	`°æí
(cAddress) );

418 
ulVÆue
 = 
	`¥vRódP15_C1_C1_0
();

419 
	`•rötf
–
cAddªss
, "SCR: 0x%08lX\r\n", 
ulVÆue
 );

420 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
c⁄figUART_PORT
,(c⁄° sig√d * c⁄°)
cAddªss
, 
	`°æí
(cAddress) );

423 
ulVÆue
 = 
	`¥vRódP15_C1_C1_1
();

424 
	`•rötf
–
cAddªss
, "SDER: 0x%08lX\r\n", 
ulVÆue
 );

425 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
c⁄figUART_PORT
,(c⁄° sig√d * c⁄°)
cAddªss
, 
	`°æí
(cAddress) );

428 
ulVÆue
 = 
	`¥vRódP15_C1_C1_2
();

429 
	`•rötf
–
cAddªss
, "NSACR: 0x%08lX\r\n", 
ulVÆue
 );

430 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
c⁄figUART_PORT
,(c⁄° sig√d * c⁄°)
cAddªss
, 
	`°æí
(cAddress) );

433 
ulVÆue
 = 
	`¥vRódP15_C12_C0_1
();

434 
	`•rötf
–
cAddªss
, "MVBAR: 0x%08lX\r\n", 
ulVÆue
 );

435 
	`vSîülPutSåög
((
xComP‹tH™dÀ
)
c⁄figUART_PORT
,(c⁄° sig√d * c⁄°)
cAddªss
, 
	`°æí
(cAddress) );

439 
	}
}

442 
	$vAµliˇti⁄MÆlocFaûedHook
( )

444 
__asm
 volatile (" smc #0 ");

445 
	}
}

448 
	$vAs£πCÆÀd
–*
fûe
, 
löe
 )

450 
	`¥ötf
("As£πi⁄ faûedáà%s,Üöê%d\n\r",
fûe
,
löe
);

451 
	`èskDISABLE_INTERRUPTS
();

453 
	}
}

	@Demo/Versatile_Express_Cortex_A9MPCore/pl011.c

62 
	~"FªeRTOS.h
"

63 
	~"queue.h
"

64 
	~"èsk.h
"

65 
	~"£mphr.h
"

68 
	#UART_USE_INTERRUPT
 0

	)

70 
	#UART0_BASE
 ( 0x10009000UL )

	)

71 
	#UART1_BASE
 ( 0x1000A000UL )

	)

72 
	#UART2_BASE
 ( 0x1000B000UL )

	)

73 
	#UART3_BASE
 ( 0x1000C000UL )

	)

74 
	#UART_DEVICE_TYPE
 0

	)

76 
	#UARTDR
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0000UL ) )

	)

77 
	#UARTRSR_UARTECR
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0004UL ) )

	)

78 
	#UARTFR
(
x
Ë–(vﬁ©ûê*)–(xË+ 0x0018UL ) )

	)

79 
	#UARTILPR
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0020UL ) )

	)

80 
	#UARTIBRD
(
x
Ë–(vﬁ©ûê*)–(xË+ 0x0024UL ) )

	)

81 
	#UARTFBRD
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0028UL ) )

	)

82 
	#UARTLCR_H
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x002CUL ) )

	)

83 
	#UARTCR
(
x
Ë–(vﬁ©ûê*)–(xË+ 0x0030UL ) )

	)

84 
	#UARTIFLS
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0034UL ) )

	)

85 
	#UARTIMSC
(
x
Ë–(vﬁ©ûê*)–(xË+ 0x0038UL ) )

	)

86 
	#UARTRIS
(
x
Ë–(vﬁ©ûê*)–(xË+ 0x003CUL ) )

	)

87 
	#UARTMIS
(
x
Ë–(vﬁ©ûê*)–(xË+ 0x0040UL ) )

	)

88 
	#UARTICR
(
x
Ë–(vﬁ©ûê*)–(xË+ 0x0044UL ) )

	)

89 
	#UARTDMACR
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0048UL ) )

	)

90 
	#UARTPîùhID0
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0FE0UL ) )

	)

91 
	#UARTPîùhID1
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0FE4UL ) )

	)

92 
	#UARTPîùhID2
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0FE8UL ) )

	)

93 
	#UARTPîùhID3
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0FECUL ) )

	)

94 
	#UARTPCñlID0
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0FF0UL ) )

	)

95 
	#UARTPCñlID1
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0FF4UL ) )

	)

96 
	#UARTPCñlID2
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0FF8UL ) )

	)

97 
	#UARTPCñlID3
(
x
Ë–(vﬁ©ûê*Ë–(xË+ 0x0FFCUL ) )

	)

99 
	#UART_INT_STATUS_TX
 ( 1 << 5 )

	)

100 
	#UART_INT_STATUS_RX
 ( 1 << 4 )

	)

102 
	#UART_FLAG_TXFE
 ( 1 << 7 )

	)

103 
	#UART_FLAG_TXFF
 ( 1 << 5 )

	)

104 
	#UART_FLAG_RXFE
 ( 1 << 4 )

	)

106 
	#UART_CLK_HZ
 ( 3686400UL )

	)

108 
	#UART_FIFO_SIZE_BYTES
 ( 32UL )

	)

109 
	#UART0_VECTOR_ID
 ( 44 )

	)

110 
	#UART1_VECTOR_ID
 ( 45 )

	)

111 
	#UART2_VECTOR_ID
 ( 46 )

	)

112 
	#UART3_VECTOR_ID
 ( 47 )

	)

113 
	#UART4_VECTOR_ID
 ( 48 )

	)

115 
	#TX_QUEUE
 ( 0 )

	)

116 
	#RX_QUEUE
 ( 1 )

	)

119 #i‡
c⁄figPLATFORM
 == 0 || configPLATFORM == 2

121 #i‡
c⁄figPLATFORM
 == 0

122 
	#UART_CLK
 3686400

	)

123 #ñi‡
c⁄figPLATFORM
 == 2

124 
	#UART_CLK
 24000000

	)

127 #i‡
UART_USE_INTERRUPT


129 
xQueueH™dÀ
 
	gxU¨tQueues
[5][2] = { { 
NULL
, NULL } };

132 
	$vUARTI¡îru±H™dÀr
–*
pvBa£Addªss
 )

134 
ulBa£
 = ()
pvBa£Addªss
;

135 
usSètus
 = 0;

136 sig√d 
cTønsmôCh¨
 = 0;

137 sig√d 
cRe˚iveCh¨
 = 0;

138 
p‹tBASE_TYPE
 
xTaskWokí
 = 
pdFALSE
;

139 
xQueueH™dÀ
 
xTxQueue
 = 
NULL
;

140 
xQueueH™dÀ
 
xRxQueue
 = 
NULL
;

141 
ulUART
 = 0;

144  
ulBa£
 )

146 
UART0_BASE
:

147 
ulUART
 = 0;

149 
UART1_BASE
:

150 
ulUART
 = 1;

152 
UART2_BASE
:

153 
ulUART
 = 2;

155 
UART3_BASE
:

156 
ulUART
 = 3;

160 
xTxQueue
 = 
xU¨tQueues
[
ulUART
][
TX_QUEUE
];

161 
xRxQueue
 = 
xU¨tQueues
[
ulUART
][
RX_QUEUE
];

164 
usSètus
 = *
	`UARTMIS
(
ulBa£
);

166 i‡–
usSètus
 & 
UART_INT_STATUS_TX
 )

169  *
	`UARTFR
(
ulBa£
Ë& 
UART_FLAG_TXFF
 )

171 i‡–
pdTRUE
 =
	`xQueueRe˚iveFromISR
–
xTxQueue
, &
cTønsmôCh¨
, &
xTaskWokí
 ) )

173 *
	`UARTDR
(
ulBa£
Ë
cTønsmôCh¨
;

183 i‡–
usSètus
 & 
UART_INT_STATUS_RX
 )

186  !–*
	`UARTFR
(
ulBa£
Ë& 
UART_FLAG_RXFE
 ) )

188 
cRe˚iveCh¨
 = *
	`UARTDR
(
ulBa£
);

189 i‡–
pdTRUE
 !
	`xQueueSídFromISR
–
xRxQueue
, &
cRe˚iveCh¨
, &
xTaskWokí
 ) )

201 *
	`UARTICR
(
ulBa£
Ë
usSètus
;

204 
	`p‹tEND_SWITCHING_ISR
(
xTaskWokí
);

205 
	}
}

210 
	$vUARTInôüli£
(
ulUARTPîùhîÆ
, 
ulBaud
, 
ulQueueSize
 )

212 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–(*
vH™dÀr
)(*), *
pvP¨amëî
, 
ulVe˘‹
, 
ucEdgeTriggîed
, 
ucPri‹ôy
, 
ucPro˚ss‹T¨gës
 );

213 
ulBa£
 = 0;

214 #i‡
UART_USE_INTERRUPT


215 
ulVe˘‹ID
 = 0;

218  
ulUARTPîùhîÆ
 )

221 
ulBa£
 = 
UART0_BASE
;

222 #i‡
UART_USE_INTERRUPT


223 
ulVe˘‹ID
 = 
UART0_VECTOR_ID
;

225 
xU¨tQueues
[0][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

226 
xU¨tQueues
[0][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

230 
ulBa£
 = 
UART1_BASE
;

231 #i‡
UART_USE_INTERRUPT


232 
ulVe˘‹ID
 = 
UART1_VECTOR_ID
;

234 
xU¨tQueues
[1][
TX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

235 
xU¨tQueues
[1][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

239 
ulBa£
 = 
UART2_BASE
;

240 #i‡
UART_USE_INTERRUPT


241 
ulVe˘‹ID
 = 
UART2_VECTOR_ID
;

243 
xU¨tQueues
[2][
TX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

244 
xU¨tQueues
[2][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

248 
ulBa£
 = 
UART3_BASE
;

249 #i‡
UART_USE_INTERRUPT


250 
ulVe˘‹ID
 = 
UART3_VECTOR_ID
;

252 
xU¨tQueues
[3][
TX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

253 
xU¨tQueues
[3][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

259 *
	`UARTCR
(
ulBa£
) = 0UL;

262 *
	`UARTIBRD
(
ulBa£
Ë
UART_CLK
 / ( 16 * 
ulBaud
 );

263 *
	`UARTFBRD
(
ulBa£
Ë
UART_CLK
 % ( 16 * 
ulBaud
 );

264 *
	`UARTLCR_H
(
ulBa£
) = ( 3 << 5 ) | ( 1 << 4 );

267 *
	`UARTIFLS
(
ulBa£
) = ( 0 << 3 ) | ( 0 << 0 );

268 *
	`UARTICR
(
ulBa£
) = 0xFFFF;

270 #i‡
UART_USE_INTERRUPT


271 *
	`UARTIMSC
(
ulBa£
Ë
UART_INT_STATUS_TX
 | 
UART_INT_STATUS_RX
;

272 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–
vUARTI¡îru±H™dÀr
, (*)
ulBa£
, 
ulVe˘‹ID
, 
pdFALSE
, 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
, 1 );

276 *
	`UARTCR
(
ulBa£
) = ( 1 << 9 ) | ( 1 << 8 ) | ( 1 << 0 );

277 
	}
}

280 
p‹tBASE_TYPE
 
	$xUARTSídCh¨a˘î
–
ulUARTPîùhîÆ
, sig√d 
cCh¨
, 
p‹tTickTy≥
 
xDñay
 )

282 
ulBa£
 = 0;

283 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFALSE
;

284 #i‡
UART_USE_INTERRUPT


285 
xQueueH™dÀ
 
xTxQueue
 = 
NULL
;

286 
ucSètus
 = 0;

289  
ulUARTPîùhîÆ
 )

292 
ulBa£
 = 
UART0_BASE
;

293 #i‡
UART_USE_INTERRUPT


294 
xTxQueue
 = 
xU¨tQueues
[0][
TX_QUEUE
];

298 
ulBa£
 = 
UART1_BASE
;

299 #i‡
UART_USE_INTERRUPT


300 
xTxQueue
 = 
xU¨tQueues
[1][
TX_QUEUE
];

304 
ulBa£
 = 
UART2_BASE
;

305 #i‡
UART_USE_INTERRUPT


306 
xTxQueue
 = 
xU¨tQueues
[2][
TX_QUEUE
];

310 
ulBa£
 = 
UART3_BASE
;

311 #i‡
UART_USE_INTERRUPT


312 
xTxQueue
 = 
xU¨tQueues
[3][
TX_QUEUE
];

317 i‡–0 !
ulBa£
 )

319 #i‡
UART_USE_INTERRUPT


320 
xRëu∫
 = 
	`xQueueSíd
–
xTxQueue
, &
cCh¨
, 
xDñay
 );

321 
	`èskENTER_CRITICAL
();

322 
ucSètus
 = *
	`UARTFR
(
ulBa£
);

323 
	`èskEXIT_CRITICAL
();

325 i‡–
ucSètus
 & 
UART_FLAG_TXFE
 )

328 ()
	`xQueueRe˚ive
–
xTxQueue
, &
cCh¨
, 0 );

329 *
	`UARTDR
(
ulBa£
Ë
cCh¨
;

330 
xRëu∫
 = 
pdTRUE
;

333  !(*
	`UARTFR
(
ulBa£
Ë& 
UART_FLAG_TXFE
) );

334 *
	`UARTDR
(
ulBa£
Ë
cCh¨
;

335 
xRëu∫
 = 
pdTRUE
;

338  
xRëu∫
;

339 
	}
}

342 
p‹tBASE_TYPE
 
	$xUARTRe˚iveCh¨a˘î
–
ulUARTPîùhîÆ
, sig√d *
pcCh¨
, 
p‹tTickTy≥
 
xDñay
 )

344 
ulBa£
 = 0;

345 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFALSE
;

346 #i‡
UART_USE_INTERRUPT


347 
xQueueH™dÀ
 
xRxQueue
 = 
NULL
;

350  
ulUARTPîùhîÆ
 )

353 
ulBa£
 = 
UART0_BASE
;

354 #i‡
UART_USE_INTERRUPT


355 
xRxQueue
 = 
xU¨tQueues
[0][
RX_QUEUE
];

359 
ulBa£
 = 
UART1_BASE
;

360 #i‡
UART_USE_INTERRUPT


361 
xRxQueue
 = 
xU¨tQueues
[1][
RX_QUEUE
];

365 
ulBa£
 = 
UART2_BASE
;

366 #i‡
UART_USE_INTERRUPT


367 
xRxQueue
 = 
xU¨tQueues
[2][
RX_QUEUE
];

371 
ulBa£
 = 
UART3_BASE
;

372 #i‡
UART_USE_INTERRUPT


373 
xRxQueue
 = 
xU¨tQueues
[3][
RX_QUEUE
];

378 i‡–0 !
ulBa£
 )

380 #i‡
UART_USE_INTERRUPT


381 
xRëu∫
 = 
	`xQueueRe˚ive
–
xRxQueue
, 
pcCh¨
, 
xDñay
 );

383 i‡––*
	`UARTFR
(
ulBa£
Ë& 
UART_FLAG_RXFE
 ) == 0 )

385 *
pcCh¨
 = *
	`UARTDR
(
ulBa£
);

386 
xRëu∫
 = 
pdTRUE
;

391  
xRëu∫
;

392 
	}
}

	@Demo/Versatile_Express_Cortex_A9MPCore/pl031_rtc.c

60 
	~"FªeRTOS.h
"

63 
	#RTC_BASE
 ( 0x10017000 )

	)

64 
	#RTCDR
 ( (
p‹tBASE_TYPE
 * vﬁ©ûê)–
RTC_BASE
 + 0x000 ) )

	)

65 
	#RTCMR
 ( (
p‹tBASE_TYPE
 * vﬁ©ûê)–
RTC_BASE
 + 0x004 ) )

	)

66 
	#RTCLR
 ( (
p‹tBASE_TYPE
 * vﬁ©ûê)–
RTC_BASE
 + 0x008 ) )

	)

67 
	#RTCCR
 ( (
p‹tBASE_TYPE
 * vﬁ©ûê)–
RTC_BASE
 + 0x00C ) )

	)

68 
	#RTCIMSC
 ( (
p‹tBASE_TYPE
 * vﬁ©ûê)–
RTC_BASE
 + 0x010 ) )

	)

69 
	#RTCRIS
 ( (
p‹tBASE_TYPE
 * vﬁ©ûê)–
RTC_BASE
 + 0x014 ) )

	)

70 
	#RTCMIS
 ( (
p‹tBASE_TYPE
 * vﬁ©ûê)–
RTC_BASE
 + 0x018 ) )

	)

71 
	#RTCICR
 ( (
p‹tBASE_TYPE
 * vﬁ©ûê)–
RTC_BASE
 + 0x01C ) )

	)

74 
	$vRTCInôüli£
( )

76 vﬁ©ûê
ulRTCVÆue
 = *
RTCDR
;

77 *
RTCLR
 = 
ulRTCVÆue
;

78 
	}
}

81 
	$vRTCE«bÀ
–
ulOff£t
 )

83 *
RTCIMSC
 = 1;

84 *
RTCCR
 = 1;

85 *
RTCMR
 = *
RTCDR
 + 
ulOff£t
;

86 
	}
}

89 
	$vRTCAcknowÀdgeI¡îru±
–
ulOff£t
 )

91 i‡–0 !
ulOff£t
 )

93 *
RTCMR
 = *
RTCDR
 + 
ulOff£t
;

95 *
RTCICR
 = 1;

97 #i‡
c⁄figUSE_PREEMPTION


98 
	`p‹tEND_SWITCHING_ISR
(1);

100 
	}
}

	@Demo/Versatile_Express_Cortex_A9MPCore/printf-stdarg.c

20 
	~<°d¨g.h
>

21 
	~<°dboﬁ.h
>

23 #ifde‡
PRINTF_FLOAT_SUPPORT


24 
	~<m©h.h
>

25 
	~<°döt.h
>

26 
	~<˘y≥.h
>

29 
¥öt
(**
out
,c⁄° *
f‹m©
,
va_li°
 
¨gs
);

30 *
f‹m©öãgî
(*
buf„ªnd
,
absvÆue
,

31 
ba£
,
Àâîba£
,
zî›adwidth
,
boﬁ
 
zîoi£m±y
);

32 #ifde‡
PRINTF_FLOAT_SUPPORT


33 *
f‹m©Êﬂt
(*
buf„r°¨t
,
absvÆue
,

34 
¥ecisi⁄
,
zî›adwidth
,
boﬁ
 
f‹˚≥riod
);

36 
¥öt°rög
(**
out
,c⁄° *
°rög
,
width
,
boﬁ
 
∑dÀ·
);

37 
¥ötch¨
(**
out
,
c
);

38 
putch¨
(
c
);

40 
	$¥ötf
(c⁄° *
f‹m©
,...)

42 
va_li°
 
¨gs
;

43 
	`va_°¨t
(
¨gs
,
f‹m©
);

44  
	`¥öt
(0,
f‹m©
,
¨gs
);

45 
	}
}

47 
	$•rötf
(*
out
,c⁄° *
f‹m©
,...)

49 
va_li°
 
¨gs
;

50 
	`va_°¨t
(
¨gs
,
f‹m©
);

51  
	`¥öt
(&
out
,
f‹m©
,
¨gs
);

52 
	}
}

54 
	$puts
(c⁄° *
s
)

56  
	`¥öt°rög
(0,
s
,0,
Ál£
);

58 
	}
}

60 
	$¥öt
(**
out
,c⁄° *
f‹m©
,
va_li°
 
¨gs
)

62 
buf„r
[128];

63 *
buf„ªnd
=&
buf„r
[(buffer)];

64 
cou¡
=0;

66 *
f‹m©
)

68 if(*
f‹m©
=='%')

70 
f‹m©
++;

72 if(*
f‹m©
=='%'Ë
¥öä‹mÆ
;

74 
width
=0,
¥ecisi⁄
=-1;

75 
posôivech¨
=0;

76 
boﬁ
 
∑dÀ·
=
åue
,
∑dzîo
=
Ál£
,
Æã∫©e
=false;

81 if(*
f‹m©
==0)

84 
íd
;

86 if(*
f‹m©
=='#')

89 
Æã∫©e
=
åue
;

90 
f‹m©
++;

92 if(*
f‹m©
=='-')

95 
∑dÀ·
=
Ál£
;

96 
∑dzîo
=
Ál£
;

97 
f‹m©
++;

99 if(*
f‹m©
=='0')

103 if(
∑dÀ·
Ë
∑dzîo
=
åue
;

104 
f‹m©
++;

106 if(*
f‹m©
=='+')

109 
posôivech¨
='+';

110 
f‹m©
++;

112 if(*
f‹m©
==' ')

116 if(!
posôivech¨
)Öositivechar=' ';

117 
f‹m©
++;

126 *
f‹m©
>='0'&&*format<='9')

128 
width
*=10;

129 
width
+=*
f‹m©
-'0';

130 
f‹m©
++;

134 if(*
f‹m©
=='.')

136 
f‹m©
++;

138 
¥ecisi⁄
=0;

139 *
f‹m©
>='0'&&*format<='9')

141 
¥ecisi⁄
*=10;

142 
¥ecisi⁄
+=*
f‹m©
-'0';

143 
f‹m©
++;

148 if(*
f‹m©
=='l') format++;

151 if(*
f‹m©
=='s')

153 *
°rög
=
	`va_¨g
(
¨gs
,*);

154 
cou¡
+=
	`¥öt°rög
(
out
,
°rög
?°rög:"“uŒ)",
width
,
∑dÀ·
);

156 if(*
f‹m©
=='d' || *format=='i')

158 
vÆue
=
	`va_¨g
(
¨gs
,);

161 
absvÆue
=
vÆue
;

162 
boﬁ
 
i¢eg©ive
=
Ál£
;

163 if(
vÆue
<0)

165 
i¢eg©ive
=
åue
;

166 
absvÆue
=-
vÆue
;

171 
zî›adwidth
=
¥ecisi⁄
;

172 if(
∑dzîo
 && 
¥ecisi⁄
<0)

174 
zî›adwidth
=
width
;

175 if(
i¢eg©ive
 || 
posôivech¨
Ë
zî›adwidth
-=1;

178 
boﬁ
 
zîoi£m±y
=
¥ecisi⁄
==0;

180 *
°rög
=
	`f‹m©öãgî
(
buf„ªnd
,
absvÆue
,10,0,
zî›adwidth
,
zîoi£m±y
);

183 if(
i¢eg©ive
Ë*--
°rög
='-';

184 if(
posôivech¨
Ë*--
°rög
=positivechar;

186 
cou¡
+=
	`¥öt°rög
(
out
,
°rög
,
width
,
∑dÀ·
);

188 if(*
f‹m©
=='u')

190 
vÆue
=
	`va_¨g
(
¨gs
,);

192 
zî›adwidth
=
¥ecisi⁄
;

193 if(
∑dzîo
 && 
¥ecisi⁄
<0Ë
zî›adwidth
=
width
;

195 
boﬁ
 
zîoi£m±y
=
¥ecisi⁄
==0;

197 *
°rög
=
	`f‹m©öãgî
(
buf„ªnd
,
vÆue
,10,0,
zî›adwidth
,
zîoi£m±y
);

198 
cou¡
+=
	`¥öt°rög
(
out
,
°rög
,
width
,
∑dÀ·
);

200 if(*
f‹m©
=='x' || *format=='X')

202 
vÆue
=
	`va_¨g
(
¨gs
,);

204 
zî›adwidth
=
¥ecisi⁄
;

205 if(
∑dzîo
 && 
¥ecisi⁄
<0)

207 
zî›adwidth
=
width
;

208 if(
Æã∫©e
 && 
vÆue
!=0Ë
zî›adwidth
-=2;

211 
boﬁ
 
zîoi£m±y
=
¥ecisi⁄
==0;

213 *
°rög
=
	`f‹m©öãgî
(
buf„ªnd
,
vÆue
,16,'A'-'X'+*
f‹m©
,
zî›adwidth
,
zîoi£m±y
);

214 if(
Æã∫©e
 && 
vÆue
!=0Ë{ *--
°rög
=*
f‹m©
; *--string='0'; }

215 
cou¡
+=
	`¥öt°rög
(
out
,
°rög
,
width
,
∑dÀ·
);

217 if(*
f‹m©
=='o')

219 
vÆue
=
	`va_¨g
(
¨gs
,);

221 
zî›adwidth
=
¥ecisi⁄
;

222 if(
∑dzîo
 && 
¥ecisi⁄
<0Ë
zî›adwidth
=
width
;

223 if(
Æã∫©e
 && 
vÆue
!=0Ë
zî›adwidth
-=1;

225 
boﬁ
 
zîoi£m±y
=
¥ecisi⁄
==0 && !
Æã∫©e
;

227 *
°rög
=
	`f‹m©öãgî
(
buf„ªnd
,
vÆue
,8,0,
zî›adwidth
,
zîoi£m±y
);

228 if(
Æã∫©e
 && 
vÆue
!=0Ë*--
°rög
='0';

229 
cou¡
+=
	`¥öt°rög
(
out
,
°rög
,
width
,
∑dÀ·
);

231 if(*
f‹m©
=='c')

233 
°r
[2];

234 
°r
[0]=
	`va_¨g
–
¨gs
, );

235 
°r
[1]=0;

236 
cou¡
+=
	`¥öt°rög
(
out
,
°r
,
width
,
∑dÀ·
);

238 #ifde‡
PRINTF_FLOAT_SUPPORT


239 if(*
f‹m©
=='f' || *format=='F')

241 
vÆue
=
	`va_¨g
(
¨gs
,);

244 
absvÆue
=
vÆue
;

245 
boﬁ
 
i¢eg©ive
=
Ál£
;

246 if(
	`c›ysign
(1,
vÆue
)<0)

248 
i¢eg©ive
=
åue
;

249 
absvÆue
=-
vÆue
;

253 if(
¥ecisi⁄
<0)Örecision=6;

256 
zî›adwidth
=0;

257 if(
∑dzîo
)

259 
zî›adwidth
=
width
;

261 if(
i¢eg©ive
 || 
posôivech¨
Ë
zî›adwidth
-=1;

264 *
°rög
=
	`f‹m©Êﬂt
(
buf„r
,
absvÆue
,
¥ecisi⁄
,
zî›adwidth
,
Æã∫©e
);

267 if(
i¢eg©ive
Ë*--
°rög
='-';

268 if(
posôivech¨
Ë*--
°rög
=positivechar;

271 if(*
f‹m©
=='F')

273 *
±r
=
°rög
;

274 *
±r
Ë{ *±r=
	`touµî
(*ptr);Ötr++; }

277 
cou¡
+=
	`¥öt°rög
(
out
,
°rög
,
width
,
∑dÀ·
);

287 
¥öä‹mÆ
:

288 
	`¥ötch¨
(
out
,*
f‹m©
);

289 
cou¡
++;

292 
f‹m©
++;

295 
íd
: ()0;

297 if(
out
) **out=0;

299 
	`va_íd
(
¨gs
);

301  
cou¡
;

302 
	}
}

304 *
	$f‹m©öãgî
(*
buf„ªnd
,
absvÆue
,

305 
ba£
,
Àâîba£
,
zî›adwidth
,
boﬁ
 
zîoi£m±y
)

307 *
°rög
=
buf„ªnd
;

308 *--
°rög
=0;

311 if(!
absvÆue
)

313 if(!
zîoi£m±y
Ë*--
°rög
='0';

317 
absvÆue
)

319 
digô
=
absvÆue
%
ba£
;

321 
c
;

322 if(
digô
>=10Ë
c
=digô-10+
Àâîba£
;

323 
c
=
digô
+'0';

325 *--
°rög
=
c
;

327 
absvÆue
/=
ba£
;

332 if(
zî›adwidth
>0)

334 
Àngth
=
buf„ªnd
-
°rög
-1;

335 
i
=0;i<
zî›adwidth
-
Àngth
;i++Ë*--
°rög
='0';

338  
°rög
;

339 
	}
}

341 #ifde‡
PRINTF_FLOAT_SUPPORT


343 *
	$f‹m©Êﬂt
(*
buf„r°¨t
,
absvÆue
,
¥ecisi⁄
,
zî›adwidth
,
boﬁ
 
f‹˚≥riod
)

345 
absvÆue
+=0.5/
	`pow
(10,
¥ecisi⁄
);

347 uni⁄ { 
uöt64_t
 
l
; 
f
; } 
pun
;

349 
pun
.
f
=
absvÆue
;

350 
exp2
=((
pun
.
l
>>52)&0x7ff)-1023;

351 
uöt64_t
 
m™t
=
pun
.
l
&0x000fffffffffffffULL;

355 if(
exp2
==0x400)

357 if(
m™t
Ë
	`°r˝y
(
buf„r°¨t
,"nan");

358 
	`°r˝y
(
buf„r°¨t
,"inf");

359  
buf„r°¨t
;

364 
exp10
=()
	`˚û
(
	`log10
(
absvÆue
));

365 if(
exp10
<-307)Éxp10=-307;

368 
absvÆue
*=
	`pow
(10.0,-
exp10
);

371 if(
absvÆue
)

373 
absvÆue
<0.1Ë{ábsvÆue*=10; 
exp10
--; }

374 
absvÆue
>=1.0Ë{ábsvÆue/=10; 
exp10
++; }

378 
numbîofdigôs
,
fú°digô
,
decimÆpoöt
;

379 if(
exp10
>0)

381 
numbîofdigôs
=
exp10
+
¥ecisi⁄
+1;

382 
fú°digô
=0;

383 
decimÆpoöt
=
exp10
;

387 
numbîofdigôs
=
¥ecisi⁄
+2;

388 
fú°digô
=-
exp10
+2;

389 
decimÆpoöt
=1;

394 if(
¥ecisi⁄
==0)

396 if(!
f‹˚≥riod
Ë
numbîofdigôs
--;

399 
pun
.
f
=
absvÆue
;

400 
exp2
=((
pun
.
l
>>52)&0x7ff)-1023;

401 
m™t
=
pun
.
l
&0x000fffffffffffffULL;

403 if(
exp2
==-1023)Éxp2++;

404 
m™t
|=0x0010000000000000ULL;

407 
m™t
<<=(
exp2
+4);

409 *
±r
=
buf„r°¨t
;

412 if(
numbîofdigôs
<
zî›adwidth
)

414 
∑d
=
zî›adwidth
-
numbîofdigôs
;

415 
i
=0;i<
∑d
;i++Ë*
±r
++='0';

418 
i
=0;i<
numbîofdigôs
;i++)

420 if(
i
==
decimÆpoöt
)

422 *
±r
++='.';

424 if(
i
<
fú°digô
)

426 *
±r
++='0';

430 
m™t
&=0x00ffffffffffffffULL;

431 
m™t
*=10;

432 *
±r
++=(
m™t
>>56)+'0';

436 *
±r
++=0;

437  
buf„r°¨t
;

438 
	}
}

441 
	$¥öt°rög
(**
out
,c⁄° *
°rög
,
width
,
boﬁ
 
∑dÀ·
)

443 
cou¡
=0;

447 if(
width
>0 && 
∑dÀ·
)

449 c⁄° *
íd
=
°rög
;

450 *
íd
)Énd++;

452 
Àngth
=
íd
-
°rög
;

453 
i
=0;i<
width
-
Àngth
;i++)

455 
	`¥ötch¨
(
out
,' ');

456 
cou¡
++;

461 *
°rög
)

463 
	`¥ötch¨
(
out
,*
°rög
);

464 
cou¡
++;

465 
°rög
++;

469 
cou¡
<
width
)

471 
	`¥ötch¨
(
out
,' ');

472 
cou¡
++;

475  
cou¡
;

476 
	}
}

478 
	$¥ötch¨
(**
out
,
c
)

480 if(
out
Ë*(*out)++=
c
;

481 
	`putch¨
(
c
);

482 
	}
}

487 #i‚de‡
TEST_PRINTF


488 
xUARTSídCh¨a˘î
(
ulUARTPîùhîÆ
,sig√d 
cCh¨
,
xDñay
);

490 
ölöe
 
	$p‹tCORE_ID
()

492 
vÆ
;

493 
	`__asm
(" mr¯p15,0,%[vÆ],c0,c0,5\n":[
vÆ
] "=r" (val)::);

494  
vÆ
&3;

495 
	}
}

497 
	$putch¨
(
c
)

499 
	`xUARTSídCh¨a˘î
(
	`p‹tCORE_ID
(),
c
,0);

501 
	}
}

506 #ifde‡
TEST_PRINTF


507 
	$maö
()

509 *
±r
 = "Hello world!";

510 *
≈
 = 0;

511 
i
 = 5;

512 
bs
 = ()*8;

513 
mi
;

514 
buf
[80];

516 
mi
 = (1 << (
bs
-1)) + 1;

517 
	`¥ötf
("%s\n", 
±r
);

518 
	`¥ötf
("printfÅest\n");

519 
	`¥ötf
("%†i†nuŒÖoöãr\n", 
≈
);

520 
	`¥ötf
("%d = 5\n", 
i
);

521 
	`¥ötf
("%d = - max i¡\n", 
mi
);

522 
	`¥ötf
("char %c = 'a'\n", 'a');

523 
	`¥ötf
("hex %x = ff\n", 0xff);

524 
	`¥ötf
("hex %02x = 00\n", 0);

525 
	`¥ötf
("signed %d = unsigned %u = hex %x\n", -3, -3, -3);

526 
	`¥ötf
("%d %s(s)%", 0, "message");

527 
	`¥ötf
("\n");

528 
	`¥ötf
("%d %s(s) with %%\n", 0, "message");

529 
	`•rötf
(
buf
, "ju°if: \"%-10s\"\n", "À·"); 
	`¥ötf
("%s", buf);

530 
	`•rötf
(
buf
, "ju°if: \"%10s\"\n", "right"); 
	`¥ötf
("%s", buf);

531 
	`•rötf
(
buf
, " 3: %04d zîÿ∑dded\n", 3); 
	`¥ötf
("%s", buf);

532 
	`•rötf
(
buf
, " 3: %-4dÜe· ju°ifiˇti⁄\n", 3); 
	`¥ötf
("%s", buf);

533 
	`•rötf
(
buf
, " 3: %4dÑighàju°ifiˇti⁄\n", 3); 
	`¥ötf
("%s", buf);

534 
	`•rötf
(
buf
, " 3: %-04d zîÿ∑dded wôhÜe· ju°ifiˇti⁄\n", 3); 
	`¥ötf
("%s", buf);

535 
	`•rötf
(
buf
, " 3: %.4d wôhÖªcisi⁄\n", 3); 
	`¥ötf
("%s", buf);

536 
	`•rötf
(
buf
, " 3: %-.4d wôhÖªcisi⁄ándÜe· ju°ifiˇti⁄\n", 3); 
	`¥ötf
("%s", buf);

537 
	`•rötf
(
buf
, " 3: %4.2d wôhÖªcisi⁄ánd width\n", 3); 
	`¥ötf
("%s", buf);

538 
	`•rötf
(
buf
, " 3: %-4.2d wôhÖªcisi⁄, widthándÜe· ju°ifiˇti⁄\n", 3); 
	`¥ötf
("%s", buf);

539 
	`•rötf
(
buf
, " 3: %04.2d wôhÖªcisi⁄, widthánd zîÿ∑ddög\n", 3); 
	`¥ötf
("%s", buf);

540 
	`•rötf
(
buf
, " 3: % d wôh s∑˚ sign\n", 3); 
	`¥ötf
("%s", buf);

541 
	`•rötf
(
buf
, " 3: %+d wôhÖlu†sign\n", 3); 
	`¥ötf
("%s", buf);

542 
	`•rötf
(
buf
, " 3: % 4dÖadded wôh s∑˚ sign\n", 3); 
	`¥ötf
("%s", buf);

543 
	`•rötf
(
buf
, " 3: %+4dÖadded wôhÖlu†sign\n", 3); 
	`¥ötf
("%s", buf);

544 
	`•rötf
(
buf
, " 3: % 04d zîÿ∑dded wôh s∑˚ sign\n", 3); 
	`¥ötf
("%s", buf);

545 
	`•rötf
(
buf
, " 3: %+04d zîÿ∑dded wôhÖlu†sign\n", 3); 
	`¥ötf
("%s", buf);

546 
	`•rötf
(
buf
, "-3: %04d zîÿ∑dded\n", -3); 
	`¥ötf
("%s", buf);

547 
	`•rötf
(
buf
, "-3: %-4dÜe· ju°ifiˇti⁄\n", -3); 
	`¥ötf
("%s", buf);

548 
	`•rötf
(
buf
, "-3: %4dÑighàju°ifiˇti⁄\n", -3); 
	`¥ötf
("%s", buf);

549 
	`•rötf
(
buf
, "-3: %-04d zîÿ∑dded wôhÜe· ju°ifiˇti⁄\n", -3); 
	`¥ötf
("%s", buf);

550 
	`•rötf
(
buf
, "-3: %.4d wôhÖªcisi⁄\n", -3); 
	`¥ötf
("%s", buf);

551 
	`•rötf
(
buf
, "-3: %-.4d wôhÖªcisi⁄ándÜe· ju°ifiˇti⁄\n", -3); 
	`¥ötf
("%s", buf);

552 
	`•rötf
(
buf
, "-3: %4.2d wôhÖªcisi⁄ánd width\n", -3); 
	`¥ötf
("%s", buf);

553 
	`•rötf
(
buf
, "-3: %-4.2d wôhÖªcisi⁄, widthándÜe· ju°ifiˇti⁄\n", -3); 
	`¥ötf
("%s", buf);

554 
	`•rötf
(
buf
, "-3: %04.2d wôhÖªcisi⁄, widthánd zîÿ∑ddög\n", -3); 
	`¥ötf
("%s", buf);

555 #ifde‡
PRINTF_FLOAT_SUPPORT


556 
	`•rötf
(
buf
, "3.141592Öªcisi⁄ 0: %.0f\n", 3.141592); 
	`¥ötf
("%s", buf);

557 
	`•rötf
(
buf
, "3.141592Öªcisi⁄ 1: %.1f\n", 3.141592); 
	`¥ötf
("%s", buf);

558 
	`•rötf
(
buf
, "3.141592Öªcisi⁄ 2: %.2f\n", 3.141592); 
	`¥ötf
("%s", buf);

559 
	`•rötf
(
buf
, "3.141592Öªcisi⁄ 3: %.3f\n", 3.141592); 
	`¥ötf
("%s", buf);

560 
	`•rötf
(
buf
, "3.141592Öªcisi⁄ 4: %.4f\n", 3.141592); 
	`¥ötf
("%s", buf);

561 
	`•rötf
(
buf
, "3.141592Öªcisi⁄ 5: %.5f\n", 3.141592); 
	`¥ötf
("%s", buf);

562 
	`•rötf
(
buf
, "3.141592Öªcisi⁄ 6: %.6f\n", 3.141592); 
	`¥ötf
("%s", buf);

566 
	}
}

	@Demo/Versatile_Express_Cortex_A9MPCore/serial.c

60 
	~"FªeRTOS.h
"

61 
	~"£rül.h
"

63 
p‹tBASE_TYPE
 
xUARTRe˚iveCh¨a˘î
–
ulUARTPîùhîÆ
, sig√d *
pcCh¨
, 
p‹tTickTy≥
 
xDñay
 );

64 
p‹tBASE_TYPE
 
xUARTSídCh¨a˘î
–
ulUARTPîùhîÆ
, sig√d 
cCh¨
, 
p‹tTickTy≥
 
xDñay
 );

65 
vUARTInôüli£
(
ulUARTPîùhîÆ
, 
ulBaud
, 
ulQueueSize
 );

67 
xComP‹tH™dÀ
 
	$xSîülP‹tInôMöimÆ
–
ulW™ãdBaud
, 
p‹tBASE_TYPE
 
uxQueueLígth
 )

69 
	`vUARTInôüli£
–
c⁄figUART_PORT
, 
ulW™ãdBaud
, 
uxQueueLígth
 );

70  (
xComP‹tH™dÀ
Ë
c⁄figUART_PORT
;

71 
	}
}

73 
	$vSîülPutSåög
–
xComP‹tH™dÀ
 
pxP‹t
, c⁄° sig√d * c⁄° 
pcSåög
, 
usSåögLígth
 )

75 
usIndex
 = 0;

76  
usIndex
 = 0; usIndex < 
usSåögLígth
; usIndex++ )

78 i‡–
pdTRUE
 !
	`xUARTSídCh¨a˘î
–()
pxP‹t
, 
pcSåög
[
usIndex
], 
p‹tMAX_DELAY
 ) )

84 
	}
}

86 sig√d 
p‹tBASE_TYPE
 
	$xSîülGëCh¨
–
xComP‹tH™dÀ
 
pxP‹t
, sig√d *
pcRxedCh¨
, 
p‹tTickTy≥
 
xBlockTime
 )

88  
	`xUARTRe˚iveCh¨a˘î
–()
pxP‹t
, 
pcRxedCh¨
, 
xBlockTime
 );

89 
	}
}

91 sig√d 
p‹tBASE_TYPE
 
	$xSîülPutCh¨
–
xComP‹tH™dÀ
 
pxP‹t
, sig√d 
cOutCh¨
, 
p‹tTickTy≥
 
xBlockTime
 )

93  
	`xUARTSídCh¨a˘î
–()
pxP‹t
, 
cOutCh¨
, 
xBlockTime
 );

94 
	}
}

	@Demo/Versatile_Express_Cortex_A9MPCore/sp804_timer.c

60 
	~"FªeRTOS.h
"

64 
	#TIMER_0_1_BASE
 ( 0x60005000 )

	)

65 
	#TIMER_1_LOAD
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x0 ) )

	)

66 
	#TIMER_1_VALUE
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x04 ) )

	)

67 
	#TIMER_1_CONTROL
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x08 ) )

	)

68 
	#TIMER_1_INTCLR
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x0C ) )

	)

69 
	#TIMER_1_RIS
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x10 ) )

	)

70 
	#TIMER_1_MIS
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x14 ) )

	)

71 
	#TIMER_1_BGLOAD
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x18 ) )

	)

72 
	#TIMER_2_LOAD
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x20 ) )

	)

73 
	#TIMER_2_VALUE
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x24 ) )

	)

74 
	#TIMER_2_CONTROL
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x28 ) )

	)

75 
	#TIMER_2_INTCLR
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x2C ) )

	)

76 
	#TIMER_2_RIS
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x30 ) )

	)

77 
	#TIMER_2_MIS
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x34 ) )

	)

78 
	#TIMER_2_BGLOAD
 ( ( * vﬁ©ûêË–
TIMER_0_1_BASE
 + 0x38 ) )

	)

81 
	$vTimî0Inôüli£
–
ulLﬂdVÆue
 )

83 *
TIMER_1_LOAD
 = 
ulLﬂdVÆue
;

84 
	}
}

87 
	$vTimî0E«bÀ
( )

89 *
TIMER_1_CONTROL
 = 0xE0UL;

90 
	}
}

93 
	$vTimî0I¡îru±H™dÀr
–*
pvP¨amëî
 )

95 
	`vTaskIn¸emítTick
( );

96 *
TIMER_1_INTCLR
 = 1;

98 
	`vTaskIn¸emítTick
();

100 #i‡
c⁄figUSE_PREEMPTION


101 
	`p‹tEND_SWITCHING_ISR
( 1 );

103 
	}
}

	@Demo/Versatile_Express_Cortex_A9MPCore/uart.c

62 
	~"FªeRTOS.h
"

63 
	~"queue.h
"

64 
	~"èsk.h
"

65 
	~"£mphr.h
"

68 
	#UART_USE_INTERRUPT
 1

	)

70 
	#UART0_BASE
 ( 0x70006000UL )

	)

71 
	#UART1_BASE
 ( 0x70006040UL )

	)

72 
	#UART2_BASE
 ( 0x70006200UL )

	)

73 
	#UART3_BASE
 ( 0x70006300UL )

	)

74 
	#UART4_BASE
 ( 0x70006400UL )

	)

76 
	#UART_THR_DLAB
(
x
Ë–(*Ë–(xË+ 0x0000UL ) )

	)

77 
	#UART_IER_DLAB
(
x
Ë–(*Ë–(xË+ 0x0004UL ) )

	)

78 
	#UART_IIR_FCR
(
x
Ë–(*)–(xË+ 0x0008UL ) )

	)

79 
	#UART_LCR
(
x
Ë–(*Ë–(xË+ 0x000CUL ) )

	)

80 
	#UART_MCR
(
x
Ë–(*)–(xË+ 0x0010UL ) )

	)

81 
	#UART_LSR
(
x
Ë–(*Ë–(xË+ 0x0014UL ) )

	)

82 
	#UART_MSR
(
x
Ë–(*Ë–(xË+ 0x0018UL ) )

	)

83 
	#UART_SPR
(
x
Ë–(*Ë–(xË+ 0x001CUL ) )

	)

84 
	#UART_IRDA_CSR
(
x
Ë–(*)–(xË+ 0x0020UL ) )

	)

85 
	#UART_ASR
(
x
Ë–(*Ë–(xË+ 0x003CUL ) )

	)

87 
	#UART_IER_DMA_ENABLE
 ( 1 << 7 )

	)

88 
	#UART_IER_UNIT_ENABLE
 ( 1 << 6 )

	)

89 
	#UART_IER_NRZ_ENABLE
 ( 1 << 5 )

	)

90 
	#UART_IER_RX_TIMEOUT_INT_ENABLE
 ( 1 << 4 )

	)

91 
	#UART_IER_MODEM_INT_ENABLE
 ( 1 << 3 )

	)

92 
	#UART_IER_RXLS_INT_ENABLE
 ( 1 << 2 )

	)

93 
	#UART_IER_TXDR_INT_ENABLE
 ( 1 << 1 )

	)

94 
	#UART_IER_RXDA_INT_ENABLE
 ( 1 << 0 )

	)

96 
	#UART_IIR_FIFO_ENABLE_STATUS_MASK
 ( 3 << 6 )

	)

97 
	#UART_IIR_TIMEOUT_STATUS_MASK
 ( 1 << 3 )

	)

98 
	#UART_IIR_INTERRUPT_STATUS_MASK
 ( 3 << 1 )

	)

99 
	#UART_IIR_INTERRUPT_STATUS_RX_ERROR
 ( 3 << 1 )

	)

100 
	#UART_IIR_INTERRUPT_STATUS_RX_DR
 ( 1 << 2 )

	)

101 
	#UART_IIR_INTERRUPT_STATUS_TX
 ( 1 << 1 )

	)

102 
	#UART_IIR_INTERRUPT_PENDING_MASK
 ( 1 << 0 )

	)

104 
	#UART_FCR_INTERRUPT_TRIGGER_LEVEL_MASK
 ( 3 << 6 )

	)

105 
	#UART_FCR_RESET_TX_EMPTY_INT_FLAG
 ( 1 << 2 )

	)

106 
	#UART_FCR_RESET_TX_FLAG
 ( 1 << 2 )

	)

107 
	#UART_FCR_RESET_RX_FLAG
 ( 1 << 1 )

	)

108 
	#UART_FCR_TX_RX_ENABLE_FLAG
 ( 1 << 0 )

	)

110 
	#UART_LCR_DIVISOR_LATCH_ACCESS_FLAG
 ( 1 << 7 )

	)

111 
	#UART_LCR_SET_BREAK_FLAG
 ( 1 << 6 )

	)

112 
	#UART_LCR_STICKY_PARITY_FLAG
 ( 1 << 5 )

	)

113 
	#UART_LCR_EVEN_PARITY_FLAG
 ( 1 << 4 )

	)

114 
	#UART_LCR_PARITY_ENABLE_FLAG
 ( 1 << 3 )

	)

115 
	#UART_LCR_STOP_BIT_FLAG
 ( 1 << 2 )

	)

116 
	#UART_LCR_WORD_LENGTH_SELECT_MASK
 ( 3 << 0 )

	)

118 
	#UART_LSR_FIFO_ERROR_FLAG
 ( 1 << 7 )

	)

119 
	#UART_LSR_TXE_FLAG
 ( 1 << 6 )

	)

120 
	#UART_LSR_TXDR_FLAG
 ( 1 << 5 )

	)

121 
	#UART_LSR_BI_FLAG
 ( 1 << 4 )

	)

122 
	#UART_LSR_FRAME_ERROR_FLAG
 ( 1 << 3 )

	)

123 
	#UART_LSR_PARITY_ERROR_FLAG
 ( 1 << 2 )

	)

124 
	#UART_LSR_OVERRUN_ERROR_FLAG
 ( 1 << 1 )

	)

125 
	#UART_LSR_RXDR_FLAG
 ( 1 << 0 )

	)

127 
	#UART_MCR_LOOP_FLAG
 ( 1 << 4 )

	)

128 
	#UART_MCR_OUT2_FLAG
 ( 1 << 3 )

	)

129 
	#UART_MCR_OUT1_FLAG
 ( 1 << 2 )

	)

130 
	#UART_MCR_RTS_FLAG
 ( 1 << 1 )

	)

131 
	#UART_MCR_DTR_FLAG
 ( 1 << 0 )

	)

133 
	#UART_MSR_DCD_FLAG
 ( 1 << 7 )

	)

134 
	#UART_MSR_RI_FLAG
 ( 1 << 6 )

	)

135 
	#UART_MSR_DSR_FLAG
 ( 1 << 5 )

	)

136 
	#UART_MSR_CTS_FLAG
 ( 1 << 4 )

	)

137 
	#UART_MSR_DDCD_FLAG
 ( 1 << 3 )

	)

138 
	#UART_MSR_TERI_FLAG
 ( 1 << 2 )

	)

139 
	#UART_MSR_DDSR_FLAG
 ( 1 << 1 )

	)

140 
	#UART_MSR_DCTS_FLAG
 ( 1 << 0 )

	)

143 
	#UART_CLK_HZ
 ( 216000000UL )

	)

144 
	#UART0_VECTOR_ID
 ( 32 )

	)

146 
	#UART_FIFO_SIZE_BYTES
 ( 32UL )

	)

147 
	#UART1_VECTOR_ID
 ( 33 )

	)

148 
	#UART2_VECTOR_ID
 ( 34 )

	)

149 
	#UART3_VECTOR_ID
 ( 35 )

	)

150 
	#UART4_VECTOR_ID
 ( 36 )

	)

152 
	#TX_QUEUE
 ( 0 )

	)

153 
	#RX_QUEUE
 ( 1 )

	)

156 #i‡
c⁄figPLATFORM
 == 1

158 
xQueueH™dÀ
 
	gxU¨tQueues
[5][2] = { { 
NULL
, NULL } };

161 #i‡
UART_USE_INTERRUPT


163 
	$vUARTI¡îru±H™dÀr
–*
pvBa£Addªss
 )

165 
ulBa£
 = ()
pvBa£Addªss
;

166 
usSètus
 = 0;

167 
usSour˚
 = 0;

168 
ucRe˚iveCh¨
 = 0;

169 
p‹tBASE_TYPE
 
xTaskWokí
 = 
pdFALSE
;

170 
xQueueH™dÀ
 
xTxQueue
 = 
NULL
;

171 
xQueueH™dÀ
 
xRxQueue
 = 
NULL
;

172 
ulUART
 = 0;

175  
ulBa£
 )

177 
UART0_BASE
:

178 
ulUART
 = 0;

180 
UART1_BASE
:

181 
ulUART
 = 1;

183 
UART2_BASE
:

184 
ulUART
 = 2;

186 
UART3_BASE
:

187 
ulUART
 = 3;

189 
UART4_BASE
:

190 
ulUART
 = 4;

194 
xTxQueue
 = 
xU¨tQueues
[
ulUART
][
TX_QUEUE
];

195 
xRxQueue
 = 
xU¨tQueues
[
ulUART
][
RX_QUEUE
];

198 
usSour˚
 = *
	`UART_IIR_FCR
(
ulBa£
);

201 i‡–
UART_IIR_INTERRUPT_STATUS_RX_ERROR
 =–
usSour˚
 & 
UART_IIR_INTERRUPT_STATUS_MASK
 ) )

206 
ucRe˚iveCh¨
 = *
	`UART_THR_DLAB
(
UART0_BASE
);

207 }  *
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_FIFO_ERROR_FLAG
 );

211 i‡––
UART_IIR_INTERRUPT_STATUS_RX_DR
 =–
usSour˚
 & 
UART_IIR_INTERRUPT_STATUS_MASK
 ) )

212 || ( 
usSour˚
 & 
UART_IIR_TIMEOUT_STATUS_MASK
 ) )

214  *
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_RXDR_FLAG
 )

217 
ucRe˚iveCh¨
 = *
	`UART_THR_DLAB
(
ulBa£
);

219 i‡–
pdTRUE
 !
	`xQueueSídFromISR
–
xRxQueue
, &
ucRe˚iveCh¨
, &
xTaskWokí
 ) )

229 i‡–
UART_IIR_INTERRUPT_STATUS_TX
 =–
usSour˚
 & 
UART_IIR_INTERRUPT_STATUS_MASK
 ) )

232  
pdTRUE
 =
	`xSem≠h‹eGiveFromISR
–
xTxQueue
, &
xTaskWokí
 ) )

235 i‡–0 =–*
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_TXE_FLAG
 ) )

241 i‡–0 !–*
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_TXE_FLAG
 ) )

243 *
	`UART_IER_DLAB
(
ulBa£
Ë&~
UART_IER_TXDR_INT_ENABLE
;

251 *
	`UART_LSR
(
ulBa£
Ë
usSètus
;

254 
	`p‹tEND_SWITCHING_ISR
(
xTaskWokí
);

255 
	}
}

260 
	$vUARTInôüli£
(
ulUARTPîùhîÆ
, 
ulBaud
, 
ulQueueSize
 )

262 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–(*
vH™dÀr
)(*), *
pvP¨amëî
, 
ulVe˘‹
, 
ucEdgeTriggîed
, 
ucPri‹ôy
, 
ucPro˚ss‹T¨gës
 );

263 
ulBa£
 = 0;

264 
ulVe˘‹ID
 = 0;

266  
ulUARTPîùhîÆ
 )

269 
ulBa£
 = 
UART0_BASE
;

270 
ulVe˘‹ID
 = 
UART0_VECTOR_ID
;

272 
xU¨tQueues
[0][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

273 
xU¨tQueues
[0][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

276 
ulBa£
 = 
UART1_BASE
;

277 
ulVe˘‹ID
 = 
UART1_VECTOR_ID
;

279 
xU¨tQueues
[1][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

280 
xU¨tQueues
[1][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

283 
ulBa£
 = 
UART2_BASE
;

284 
ulVe˘‹ID
 = 
UART2_VECTOR_ID
;

286 
xU¨tQueues
[2][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

287 
xU¨tQueues
[2][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

290 
ulBa£
 = 
UART3_BASE
;

291 
ulVe˘‹ID
 = 
UART3_VECTOR_ID
;

293 
xU¨tQueues
[3][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

294 
xU¨tQueues
[3][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

297 
ulBa£
 = 
UART4_BASE
;

298 
ulVe˘‹ID
 = 
UART4_VECTOR_ID
;

300 
xU¨tQueues
[4][
TX_QUEUE
] = 
	`xSem≠h‹eCª©eCou¡ög
–
ulQueueSize
, ulQueueSize );

301 
xU¨tQueues
[4][
RX_QUEUE
] = 
	`xQueueCª©e
–
ulQueueSize
, ( ) );

306 *
	`UART_IIR_FCR
(
ulBa£
) = 0;

307 *
	`UART_IER_DLAB
(
ulBa£
) = 0;

308 *
	`UART_LCR
(
ulBa£
Ë
UART_LCR_DIVISOR_LATCH_ACCESS_FLAG
;

309 *
	`UART_THR_DLAB
(
ulBa£
Ë––
UART_CLK_HZ
 / 16 ) / 115200 );

310 *
	`UART_LCR
(
ulBa£
) = 0;

311 *
	`UART_IER_DLAB
(
ulBa£
) = 0;

314 *
	`UART_IIR_FCR
(
ulBa£
Ë
UART_FCR_RESET_TX_FLAG
 | 
UART_FCR_RESET_RX_FLAG
;

315 *
	`UART_LCR
(
ulBa£
Ë–3 & 
UART_LCR_WORD_LENGTH_SELECT_MASK
 ) | 
UART_FCR_RESET_TX_EMPTY_INT_FLAG
;

316 i‡–
ulUARTPîùhîÆ
 != 0 )

318 *
	`UART_MCR
(
ulBa£
Ë
UART_MCR_RTS_FLAG
 | 
UART_MCR_OUT2_FLAG
 | 
UART_MCR_LOOP_FLAG
;

322 *
	`UART_MCR
(
ulBa£
Ë
UART_MCR_RTS_FLAG
 | 
UART_MCR_OUT2_FLAG
;

324 *
	`UART_MSR
(
ulBa£
) = 0;

325 *
	`UART_SPR
(
ulBa£
) = 0;

326 *
	`UART_IRDA_CSR
(
ulBa£
) = 0;

327 *
	`UART_ASR
(
ulBa£
) = 0;

329 #i‡
UART_USE_INTERRUPT


331 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–
vUARTI¡îru±H™dÀr
, (*)
ulBa£
, 
ulVe˘‹ID
, 
pdFALSE
, 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
, 1 );

332 *
	`UART_IER_DLAB
(
ulBa£
Ë
UART_IER_UNIT_ENABLE
 | 
UART_IER_RX_TIMEOUT_INT_ENABLE
 | 
UART_IER_RXLS_INT_ENABLE
 | 
UART_IER_TXDR_INT_ENABLE
 | 
UART_IER_RXDA_INT_ENABLE
;

336 *
	`UART_IIR_FCR
(
ulBa£
Ë
UART_FCR_TX_RX_ENABLE_FLAG
;

337 
	}
}

340 
p‹tBASE_TYPE
 
	$xUARTSídCh¨a˘î
–
ulUARTPîùhîÆ
, 
ucCh¨
, 
p‹tTickTy≥
 
xDñay
 )

342 
xQueueH™dÀ
 
xTxQueue
 = 
NULL
;

343 
ulBa£
 = 0;

344 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFALSE
;

346  
ulUARTPîùhîÆ
 )

349 
ulBa£
 = 
UART0_BASE
;

350 
xTxQueue
 = 
xU¨tQueues
[0][
TX_QUEUE
];

353 
ulBa£
 = 
UART1_BASE
;

354 
xTxQueue
 = 
xU¨tQueues
[1][
TX_QUEUE
];

357 
ulBa£
 = 
UART2_BASE
;

358 
xTxQueue
 = 
xU¨tQueues
[2][
TX_QUEUE
];

361 
ulBa£
 = 
UART3_BASE
;

362 
xTxQueue
 = 
xU¨tQueues
[3][
TX_QUEUE
];

365 
ulBa£
 = 
UART4_BASE
;

366 
xTxQueue
 = 
xU¨tQueues
[4][
TX_QUEUE
];

370 i‡–0 !
ulBa£
 )

372 #i‡
UART_USE_INTERRUPT


374 
xRëu∫
 = 
	`xSem≠h‹eTake
–
xTxQueue
, 
xDñay
 );

376 i‡–
pdTRUE
 =
xRëu∫
 )

379 *
	`UART_THR_DLAB
(
ulBa£
Ë
ucCh¨
;

380 *
	`UART_IER_DLAB
(
ulBa£
Ë|
UART_IER_TXDR_INT_ENABLE
;

383  ( *
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_TXE_FLAG
 ) == 0 );

384 *
	`UART_THR_DLAB
(
ulBa£
Ë
ucCh¨
;

385 
xRëu∫
 = 
pdTRUE
;

388  
xRëu∫
;

389 
	}
}

392 
p‹tBASE_TYPE
 
	$xUARTRe˚iveCh¨a˘î
–
ulUARTPîùhîÆ
, *
pucCh¨
, 
p‹tTickTy≥
 
xDñay
 )

394 
xQueueH™dÀ
 
xRxQueue
 = 
NULL
;

395 
ulBa£
 = 0;

396 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFALSE
;

398  
ulUARTPîùhîÆ
 )

401 
ulBa£
 = 
UART0_BASE
;

402 
xRxQueue
 = 
xU¨tQueues
[0][
RX_QUEUE
];

405 
ulBa£
 = 
UART1_BASE
;

406 
xRxQueue
 = 
xU¨tQueues
[1][
RX_QUEUE
];

409 
ulBa£
 = 
UART2_BASE
;

410 
xRxQueue
 = 
xU¨tQueues
[2][
RX_QUEUE
];

413 
ulBa£
 = 
UART3_BASE
;

414 
xRxQueue
 = 
xU¨tQueues
[3][
RX_QUEUE
];

417 
ulBa£
 = 
UART4_BASE
;

418 
xRxQueue
 = 
xU¨tQueues
[4][
RX_QUEUE
];

422 i‡–0 !
ulBa£
 )

424 #i‡
UART_USE_INTERRUPT


425 
xRëu∫
 = 
	`xQueueRe˚ive
–
xRxQueue
, 
pucCh¨
, 
xDñay
 );

427 i‡––*
	`UART_LSR
(
ulBa£
Ë& 
UART_LSR_RXDR_FLAG
 ) != 0 )

429 *
pucCh¨
 = *
	`UART_THR_DLAB
(
ulBa£
);

430 
xRëu∫
 = 
pdTRUE
;

435  
xRëu∫
;

436 
	}
}

	@Source/croutine.c

54 
	~"FªeRTOS.h
"

55 
	~"èsk.h
"

56 
	~"¸outöe.h
"

62 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


63 

	)

68 
xLi°
 
	gpxRódyCoRoutöeLi°s
[ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 ];

69 
xLi°
 
	gxDñayedCoRoutöeLi°1
;

70 
xLi°
 
	gxDñayedCoRoutöeLi°2
;

71 
xLi°
 * 
	gpxDñayedCoRoutöeLi°
;

72 
xLi°
 * 
	gpxOvîÊowDñayedCoRoutöeLi°
;

73 
xLi°
 
	gxPídögRódyCoRoutöeLi°
;

76 
c‹CRCB
 * 
	gpxCuºítCoRoutöe
 = 
NULL
;

77 
p‹tBASE_TYPE
 
	guxT›CoRoutöeRódyPri‹ôy
 = 0;

78 
p‹tTickTy≥
 
	gxCoRoutöeTickCou¡
 = 0, 
	gxLa°TickCou¡
 = 0, 
	gxPas£dTicks
 = 0;

81 
	#c‹INITIAL_STATE
 ( 0 )

	)

90 
	#¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 ) \

	)

92 if–
	gpxCRCB
->
	guxPri‹ôy
 > 
	guxT›CoRoutöeRódyPri‹ôy
 ) \

94 
	guxT›CoRoutöeRódyPri‹ôy
 = 
pxCRCB
->
uxPri‹ôy
; \

96 
vLi°In£πEnd
––
xLi°
 * ) &–
pxRódyCoRoutöeLi°s
[ 
pxCRCB
->
uxPri‹ôy
 ] ), &–pxCRCB->
xGíîicLi°Iãm
 ) ); \

103 
¥vInôüli£CoRoutöeLi°s
( );

111 
¥vCheckPídögRódyLi°
( );

121 
¥vCheckDñayedLi°
( );

125 sig√d 
p‹tBASE_TYPE
 
	$xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, p‹tBASE_TYPE 
uxIndex
 )

127 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

128 
c‹CRCB
 *
pxCoRoutöe
;

131 
pxCoRoutöe
 = ( 
c‹CRCB
 * ) 
	`pvP‹tMÆloc
( ( corCRCB ) );

132 if–
pxCoRoutöe
 )

136 if–
pxCuºítCoRoutöe
 =
NULL
 )

138 
pxCuºítCoRoutöe
 = 
pxCoRoutöe
;

139 
	`¥vInôüli£CoRoutöeLi°s
();

143 if–
uxPri‹ôy
 >
c⁄figMAX_CO_ROUTINE_PRIORITIES
 )

145 
uxPri‹ôy
 = 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - 1;

149 
pxCoRoutöe
->
uxSèã
 = 
c‹INITIAL_STATE
;

150 
pxCoRoutöe
->
uxPri‹ôy
 = uxPriority;

151 
pxCoRoutöe
->
uxIndex
 = uxIndex;

152 
pxCoRoutöe
->
pxCoRoutöeFun˘i⁄
 = 
pxCoRoutöeCode
;

155 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ) );

156 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ) );

161 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ),ÖxCoRoutine );

162 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ),ÖxCoRoutine );

165 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
uxPri‹ôy
 );

169 
	`¥vAddCoRoutöeToRódyQueue
–
pxCoRoutöe
 );

171 
xRëu∫
 = 
pdPASS
;

175 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

178  
xRëu∫
;

179 
	}
}

182 
	$vCoRoutöeAddToDñayedLi°
–
p‹tTickTy≥
 
xTicksToDñay
, 
xLi°
 *
pxEvítLi°
 )

184 
p‹tTickTy≥
 
xTimeToWake
;

188 
xTimeToWake
 = 
xCoRoutöeTickCou¡
 + 
xTicksToDñay
;

193 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

196 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

198 if–
xTimeToWake
 < 
xCoRoutöeTickCou¡
 )

202 
	`vLi°In£π
––
xLi°
 * ) 
pxOvîÊowDñayedCoRoutöeLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

208 
	`vLi°In£π
––
xLi°
 * ) 
pxDñayedCoRoutöeLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

211 if–
pxEvítLi°
 )

215 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítCoRoutöe
->
xEvítLi°Iãm
 ) );

217 
	}
}

220 
	$¥vCheckPídögRódyLi°
( )

225  
	`li°LIST_IS_EMPTY
–&
xPídögRódyCoRoutöeLi°
 ) =
pdFALSE
 )

227 
c‹CRCB
 *
pxUnblockedCRCB
;

230 
	`p‹tDISABLE_INTERRUPTS
();

232 
pxUnblockedCRCB
 = ( 
c‹CRCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–(&
xPídögRódyCoRoutöeLi°
) );

233 
	`vLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

235 
	`p‹tENABLE_INTERRUPTS
();

237 
	`vLi°Remove
–&–
pxUnblockedCRCB
->
xGíîicLi°Iãm
 ) );

238 
	`¥vAddCoRoutöeToRódyQueue
–
pxUnblockedCRCB
 );

240 
	}
}

243 
	$¥vCheckDñayedLi°
( )

245 
c‹CRCB
 *
pxCRCB
;

247 
xPas£dTicks
 = 
	`xTaskGëTickCou¡
(Ë- 
xLa°TickCou¡
;

248  
xPas£dTicks
 )

250 
xCoRoutöeTickCou¡
++;

251 
xPas£dTicks
--;

254 if–
xCoRoutöeTickCou¡
 == 0 )

256 
xLi°
 * 
pxTemp
;

260 
pxTemp
 = 
pxDñayedCoRoutöeLi°
;

261 
pxDñayedCoRoutöeLi°
 = 
pxOvîÊowDñayedCoRoutöeLi°
;

262 
pxOvîÊowDñayedCoRoutöeLi°
 = 
pxTemp
;

266  
	`li°LIST_IS_EMPTY
–
pxDñayedCoRoutöeLi°
 ) =
pdFALSE
 )

268 
pxCRCB
 = ( 
c‹CRCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedCoRoutöeLi°
 );

270 if–
xCoRoutöeTickCou¡
 < 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) ) )

276 
	`p‹tDISABLE_INTERRUPTS
();

283 
	`vLi°Remove
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) );

286 if–
pxCRCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 )

288 
	`vLi°Remove
–&–
pxCRCB
->
xEvítLi°Iãm
 ) );

291 
	`p‹tENABLE_INTERRUPTS
();

293 
	`¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 );

297 
xLa°TickCou¡
 = 
xCoRoutöeTickCou¡
;

298 
	}
}

301 
	$vCoRoutöeScheduÀ
( )

304 
	`¥vCheckPídögRódyLi°
();

307 
	`¥vCheckDñayedLi°
();

310  
	`li°LIST_IS_EMPTY
–&–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) ) )

312 if–
uxT›CoRoutöeRódyPri‹ôy
 == 0 )

317 --
uxT›CoRoutöeRódyPri‹ôy
;

322 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítCoRoutöe
, &–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) );

325 –
pxCuºítCoRoutöe
->
pxCoRoutöeFun˘i⁄
 )–pxCuºítCoRoutöe,ÖxCuºítCoRoutöe->
uxIndex
 );

328 
	}
}

331 
	$¥vInôüli£CoRoutöeLi°s
( )

333 
p‹tBASE_TYPE
 
uxPri‹ôy
;

335  
uxPri‹ôy
 = 0; uxPri‹ôy < 
c⁄figMAX_CO_ROUTINE_PRIORITIES
; uxPriority++ )

337 
	`vLi°Inôüli£
––
xLi°
 * ) &–
pxRódyCoRoutöeLi°s
[ 
uxPri‹ôy
 ] ) );

340 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedCoRoutöeLi°1
 );

341 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedCoRoutöeLi°2
 );

342 
	`vLi°Inôüli£
––
xLi°
 * ) &
xPídögRódyCoRoutöeLi°
 );

346 
pxDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°1
;

347 
pxOvîÊowDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°2
;

348 
	}
}

351 sig√d 
p‹tBASE_TYPE
 
	$xCoRoutöeRemoveFromEvítLi°
–c⁄° 
xLi°
 *
pxEvítLi°
 )

353 
c‹CRCB
 *
pxUnblockedCRCB
;

354 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

359 
pxUnblockedCRCB
 = ( 
c‹CRCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

360 
	`vLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

361 
	`vLi°In£πEnd
––
xLi°
 * ) &–
xPídögRódyCoRoutöeLi°
 ), &–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

363 if–
pxUnblockedCRCB
->
uxPri‹ôy
 >
pxCuºítCoRoutöe
->uxPriority )

365 
xRëu∫
 = 
pdTRUE
;

369 
xRëu∫
 = 
pdFALSE
;

372  
xRëu∫
;

373 
	}
}

	@Source/include/FreeRTOS.h

54 #i‚de‡
INC_FREERTOS_H


55 
	#INC_FREERTOS_H


	)

61 
	~<°ddef.h
>

64 
	~"¥ojdefs.h
"

67 
	~"FªeRTOSC⁄fig.h
"

70 
	~"p‹èbÀ.h
"

75 
	$p‹tBASE_TYPE
 (*
	tpdTASK_HOOK_CODE
)( * );

87 #i‚de‡
c⁄figUSE_PREEMPTION


88 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

91 #i‚de‡
c⁄figUSE_IDLE_HOOK


92 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

95 #i‚de‡
c⁄figUSE_TICK_HOOK


96 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

99 #i‚de‡
c⁄figUSE_CO_ROUTINES


100 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_CO_ROUTINES
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

103 #i‚de‡
INCLUDE_vTaskPri‹ôySë


104 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskPri‹ôySë
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

107 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


108 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_uxTaskPri‹ôyGë
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

111 #i‚de‡
INCLUDE_vTaskDñëe


112 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñëe
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

115 #i‚de‡
INCLUDE_vTaskSu•íd


116 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskSu•íd
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

119 #i‚de‡
INCLUDE_vTaskDñayU¡û


120 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñayU¡û
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

123 #i‚de‡
INCLUDE_vTaskDñay


124 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñay
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

127 #i‚de‡
c⁄figUSE_16_BIT_TICKS


128 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
should
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

131 #i‚de‡
INCLUDE_xTaskGëIdÀTaskH™dÀ


132 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 0

	)

135 #i‚de‡
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ


136 
	#INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 0

	)

139 #i‚de‡
INCLUDE_pcTaskGëTaskName


140 
	#INCLUDE_pcTaskGëTaskName
 0

	)

143 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


144 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

147 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


148 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

151 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


152 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

155 #i‚de‡
c⁄figUSE_MUTEXES


156 
	#c⁄figUSE_MUTEXES
 0

	)

159 #i‚de‡
c⁄figUSE_TIMERS


160 
	#c⁄figUSE_TIMERS
 0

	)

163 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


164 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

167 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


168 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

171 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


172 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

175 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


176 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

179 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


180 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

183 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

184 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


187 #i‚de‡
INCLUDE_xTaskResumeFromISR


188 
	#INCLUDE_xTaskResumeFromISR
 1

	)

191 #i‚de‡
c⁄figASSERT


192 
	#c⁄figASSERT
–
x
 )

	)

195 #i‚de‡
p‹tALIGNMENT_ASSERT_pxCuºítTCB


196 
	#p‹tALIGNMENT_ASSERT_pxCuºítTCB
 
c⁄figASSERT


	)

200 #i‡
c⁄figUSE_TIMERS
 == 1

202 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


203 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

206 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


207 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

210 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


211 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

216 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


217 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

220 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


221 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

225 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


226 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

229 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


230 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

233 #i‚de‡
p‹tCLEAN_UP_TCB


234 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

237 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


238 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

241 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1 )

242 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

243 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

246 #i‚de‡
p‹tPOINTER_SIZE_TYPE


247 
	#p‹tPOINTER_SIZE_TYPE
 

	)

251 #i‚de‡
åa˚START


254 
	#åa˚START
()

	)

257 #i‚de‡
åa˚END


260 
	#åa˚END
()

	)

263 #i‚de‡
åa˚TASK_SWITCHED_IN


266 
	#åa˚TASK_SWITCHED_IN
()

	)

269 #i‚de‡
åa˚TASK_SWITCHED_OUT


272 
	#åa˚TASK_SWITCHED_OUT
()

	)

275 #i‚de‡
åa˚TASK_PRIORITY_INHERIT


281 
	#åa˚TASK_PRIORITY_INHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxInhîôedPri‹ôy
 )

	)

284 #i‚de‡
åa˚TASK_PRIORITY_DISINHERIT


289 
	#åa˚TASK_PRIORITY_DISINHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxOrigöÆPri‹ôy
 )

	)

292 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


297 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

300 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


305 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

308 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


309 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

314 #i‚de‡
åa˚QUEUE_CREATE


315 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

318 #i‚de‡
åa˚QUEUE_CREATE_FAILED


319 
	#åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 )

	)

322 #i‚de‡
åa˚CREATE_MUTEX


323 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

326 #i‚de‡
åa˚CREATE_MUTEX_FAILED


327 
	#åa˚CREATE_MUTEX_FAILED
()

	)

330 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


331 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

334 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


335 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

338 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


339 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

342 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


343 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

346 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


347 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

350 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


351 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

354 #i‚de‡
åa˚QUEUE_SEND


355 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

358 #i‚de‡
åa˚QUEUE_SEND_FAILED


359 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

362 #i‚de‡
åa˚QUEUE_RECEIVE


363 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

366 #i‚de‡
åa˚QUEUE_PEEK


367 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

370 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


371 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

374 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


375 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

378 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


379 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

382 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


383 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

386 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


387 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

390 #i‚de‡
åa˚QUEUE_DELETE


391 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

394 #i‚de‡
åa˚TASK_CREATE


395 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

398 #i‚de‡
åa˚TASK_CREATE_FAILED


399 
	#åa˚TASK_CREATE_FAILED
()

	)

402 #i‚de‡
åa˚TASK_DELETE


403 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

406 #i‚de‡
åa˚TASK_DELAY_UNTIL


407 
	#åa˚TASK_DELAY_UNTIL
()

	)

410 #i‚de‡
åa˚TASK_DELAY


411 
	#åa˚TASK_DELAY
()

	)

414 #i‚de‡
åa˚TASK_PRIORITY_SET


415 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

418 #i‚de‡
åa˚TASK_SUSPEND


419 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

422 #i‚de‡
åa˚TASK_RESUME


423 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

426 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


427 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

430 #i‚de‡
åa˚TASK_INCREMENT_TICK


431 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

434 #i‚de‡
åa˚TIMER_CREATE


435 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

438 #i‚de‡
åa˚TIMER_CREATE_FAILED


439 
	#åa˚TIMER_CREATE_FAILED
()

	)

442 #i‚de‡
åa˚TIMER_COMMAND_SEND


443 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

446 #i‚de‡
åa˚TIMER_EXPIRED


447 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

450 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


451 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

454 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


455 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

458 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

460 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


461 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

464 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


465 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


466 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

472 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


473 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

476 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


477 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

480 #i‚de‡
p‹tPRIVILEGE_BIT


481 
	#p‹tPRIVILEGE_BIT
 ( ( 
p‹tBASE_TYPE
 ) 0x00 )

	)

484 #i‚de‡
p‹tYIELD_WITHIN_API


485 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

488 #i‚de‡
pvP‹tMÆlocAlig√d


489 
	#pvP‹tMÆlocAlig√d
–
x
, 
puxSèckBuf„r
 ) ( ( (ÖuxSèckBuf„∏Ë=
NULL
 ) ? ( 
	`pvP‹tMÆloc
––x ) ) ) : (ÖuxSèckBuf„∏Ë)

	)

492 #i‚de‡
vP‹tFªeAlig√d


493 
	#vP‹tFªeAlig√d
–
pvBlockToFªe
 ) 
	`vP‹tFªe
–pvBlockToFªê)

	)

	@Source/include/StackMacros.h

54 #i‚de‡
STACK_MACROS_H


55 
	#STACK_MACROS_H


	)

73 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 == 0 )

76 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
()

	)

77 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
()

	)

82 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 == 1 )

86 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
()

	)

91 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

94 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
(Ë\

	)

97 if–
	gpxCuºítTCB
->
	gpxT›OfSèck
 <
pxCuºítTCB
->
pxSèck
 ) \

99 
vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

106 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

109 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
(Ë\

	)

113 if–
	gpxCuºítTCB
->
	gpxT›OfSèck
 >
pxCuºítTCB
->
pxEndOfSèck
 ) \

115 
vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

122 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

124 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
(Ë\

	)

126 c⁄° 
	gucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

127 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

128 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

129 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

130 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

134 if–
memcmp
––* ) 
pxCuºítTCB
->
pxSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

136 
vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

143 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

145 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
(Ë\

	)

147 *
	gpcEndOfSèck
 = ( * ) 
pxCuºítTCB
->
pxEndOfSèck
; \

148 c⁄° 
	gucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

149 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

150 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

151 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

152 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

155 
	gpcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

158 if–
memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

160 
vAµliˇti⁄SèckOvîÊowHook
––
xTaskH™dÀ
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

	@Source/include/croutine.h

54 #i‚de‡
CO_ROUTINE_H


55 
	#CO_ROUTINE_H


	)

57 #i‚de‡
INC_FREERTOS_H


61 
	~"li°.h
"

63 #ifde‡
__˝lu•lus


70 * 
	txCoRoutöeH™dÀ
;

73 (*
¸COROUTINE_CODE
)–
	txCoRoutöeH™dÀ
, 
	tp‹tBASE_TYPE
 );

75 
	sc‹CoRoutöeC⁄åﬁBlock


77 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

78 
xLi°Iãm
 
xGíîicLi°Iãm
;

79 
xLi°Iãm
 
xEvítLi°Iãm
;

80 
p‹tBASE_TYPE
 
uxPri‹ôy
;

81 
p‹tBASE_TYPE
 
uxIndex
;

82 
uxSèã
;

83 } 
	tc‹CRCB
;

157 sig√d 
p‹tBASE_TYPE
 
xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, p‹tBASE_TYPE 
uxPri‹ôy
, p‹tBASE_TYPE 
uxIndex
 );

199 
vCoRoutöeScheduÀ
( );

230 
	#¸START
–
pxCRCB
 )  ( ( 
c‹CRCB
 * )–pxCRCB ) )->
uxSèã
 ) { 0:

	)

261 
	#¸END
(Ë}

	)

267 
	#¸SET_STATE0
–
xH™dÀ
 ) ( ( 
c‹CRCB
 * )–xH™dÀ ) )->
uxSèã
 = (
__LINE__
 * 2); ; (__LINE__ * 2):

	)

268 
	#¸SET_STATE1
–
xH™dÀ
 ) ( ( 
c‹CRCB
 * )–xH™dÀ ) )->
uxSèã
 = ((
__LINE__
 * 2)+1); ; ((__LINE__ * 2)+1):

	)

316 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

	)

317 if––
xTicksToDñay
 ) > 0 ) \

319 
vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

321 
¸SET_STATE0
––
xH™dÀ
 ) );

406 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

	)

408 *–
pxResu…
 ) = 
xQueueCRSíd
––
pxQueue
Ë, ( 
pvIãmToQueue
Ë, ( 
xTicksToWaô
 ) ); \

409 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

411 
¸SET_STATE0
––
xH™dÀ
 ) ); \

412 *
pxResu…
 = 
xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

414 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

416 
¸SET_STATE1
––
xH™dÀ
 ) ); \

417 *
pxResu…
 = 
pdPASS
; \

498 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

	)

500 *–
pxResu…
 ) = 
xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

501 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

503 
¸SET_STATE0
––
xH™dÀ
 ) ); \

504 *–
pxResu…
 ) = 
xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), 0 ); \

506 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

508 
¸SET_STATE1
––
xH™dÀ
 ) ); \

509 *–
pxResu…
 ) = 
pdPASS
; \

607 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) 
	`xQueueCRSídFromISR
––pxQueuê), (ÖvIãmToQueuê), ( xCoRoutöePªviou¶yWokí ) )

	)

720 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) 
	`xQueueCRRe˚iveFromISR
––pxQueuê), (ÖvBuf„∏), (ÖxCoRoutöeWokí ) )

	)

731 
vCoRoutöeAddToDñayedLi°
–
p‹tTickTy≥
 
xTicksToDñay
, 
xLi°
 *
pxEvítLi°
 );

740 sig√d 
p‹tBASE_TYPE
 
xCoRoutöeRemoveFromEvítLi°
–c⁄° 
xLi°
 *
pxEvítLi°
 );

742 #ifde‡
__˝lu•lus


	@Source/include/list.h

83 #i‚de‡
LIST_H


84 
	#LIST_H


	)

86 #ifde‡
__˝lu•lus


92 
	sxLIST_ITEM


94 
p‹tTickTy≥
 
xIãmVÆue
;

95 vﬁ©ûê
xLIST_ITEM
 * 
pxNext
;

96 vﬁ©ûê
xLIST_ITEM
 * 
pxPªvious
;

97 * 
pvOw√r
;

98 * 
pvC⁄èöî
;

100 
xLIST_ITEM
 
	txLi°Iãm
;

102 
	sxMINI_LIST_ITEM


104 
p‹tTickTy≥
 
xIãmVÆue
;

105 vﬁ©ûê
xLIST_ITEM
 *
pxNext
;

106 vﬁ©ûê
xLIST_ITEM
 *
pxPªvious
;

108 
xMINI_LIST_ITEM
 
	txMöiLi°Iãm
;

113 
	sxLIST


115 vﬁ©ûê
p‹tBASE_TYPE
 
uxNumbîOfIãms
;

116 vﬁ©ûê
xLi°Iãm
 * 
pxIndex
;

117 vﬁ©ûê
xMöiLi°Iãm
 
xLi°End
;

118 } 
	txLi°
;

127 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏)

	)

136 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuê)

	)

146 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

155 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
xIãmVÆue
 )

	)

164 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 =–
p‹tBASE_TYPE
 ) 0 )

	)

169 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

190 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

	)

192 
xLi°
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

195 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

196 if––
pxC⁄°Li°
 )->
pxIndex
 =–
xLi°Iãm
 * ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

198 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

200 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

220 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
pvOw√r
 )

	)

232 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 =–* ) (ÖxLi° ) )

	)

244 
vLi°Inôüli£
–
xLi°
 *
pxLi°
 );

255 
vLi°Inôüli£Iãm
–
xLi°Iãm
 *
pxIãm
 );

268 
vLi°In£π
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 );

289 
vLi°In£πEnd
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 );

301 
vLi°Remove
–
xLi°Iãm
 *
pxIãmToRemove
 );

303 #ifde‡
__˝lu•lus


	@Source/include/mpu_wrappers.h

54 #i‚de‡
MPU_WRAPPERS_H


55 
	#MPU_WRAPPERS_H


	)

59 #ifde‡
p‹tUSING_MPU_WRAPPERS


64 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


66 
	#xTaskGíîicCª©e
 
MPU_xTaskGíîicCª©e


	)

67 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

68 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

69 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

70 
	#vTaskDñay
 
MPU_vTaskDñay


	)

71 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

72 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

73 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

74 
	#xTaskIsTaskSu•íded
 
MPU_xTaskIsTaskSu•íded


	)

75 
	#vTaskResume
 
MPU_vTaskResume


	)

76 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

77 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

78 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

79 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

80 
	#vTaskLi°
 
MPU_vTaskLi°


	)

81 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

82 
	#vTaskSèπTø˚
 
MPU_vTaskSèπTø˚


	)

83 
	#ulTaskEndTø˚
 
MPU_ulTaskEndTø˚


	)

84 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

85 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

86 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

87 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

88 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

89 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

91 
	#xQueueCª©e
 
MPU_xQueueCª©e


	)

92 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

93 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

94 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

95 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

96 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

97 
	#xQueueA…GíîicSíd
 
MPU_xQueueA…GíîicSíd


	)

98 
	#xQueueA…GíîicRe˚ive
 
MPU_xQueueA…GíîicRe˚ive


	)

99 
	#xQueueGíîicRe˚ive
 
MPU_xQueueGíîicRe˚ive


	)

100 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

101 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

103 
	#pvP‹tMÆloc
 
MPU_pvP‹tMÆloc


	)

104 
	#vP‹tFªe
 
MPU_vP‹tFªe


	)

105 
	#xP‹tGëFªeHópSize
 
MPU_xP‹tGëFªeHópSize


	)

106 
	#vP‹tInôüli£Blocks
 
MPU_vP‹tInôüli£Blocks


	)

108 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

109 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

110 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

114 
	#PRIVILEGED_FUNCTION


	)

119 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_fun˘i⁄s")))

	)

120 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

127 
	#PRIVILEGED_FUNCTION


	)

128 
	#PRIVILEGED_DATA


	)

129 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@Source/include/portable.h

58 #i‚de‡
PORTABLE_H


59 
	#PORTABLE_H


	)

63 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


64 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

65 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

68 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


69 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

70 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

73 #ifde‡
GCC_MEGA_AVR


74 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

77 #ifde‡
IAR_MEGA_AVR


78 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

81 #ifde‡
MPLAB_PIC24_PORT


82 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC24_dsPIC\p‹tma¸o.h
"

85 #ifde‡
MPLAB_DSPIC_PORT


86 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC24_dsPIC\p‹tma¸o.h
"

89 #ifde‡
MPLAB_PIC18F_PORT


90 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC18F\p‹tma¸o.h
"

93 #ifde‡
MPLAB_PIC32MX_PORT


94 
	~"..\..\Sour˚\p‹èbÀ\MPLAB\PIC32MX\p‹tma¸o.h
"

97 #ifde‡
_FEDPICC


98 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

101 #ifde‡
SDCC_CYGNAL


102 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

105 #ifde‡
GCC_ARM7


106 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

109 #ifde‡
GCC_ARM7_ECLIPSE


110 
	~"p‹tma¸o.h
"

113 #ifde‡
ROWLEY_LPC23xx


114 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

117 #ifde‡
IAR_MSP430


118 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

121 #ifde‡
GCC_MSP430


122 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

125 #ifde‡
ROWLEY_MSP430


126 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

129 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


130 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

133 #ifde‡
SAM7_GCC


134 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

137 #ifde‡
SAM7_IAR


138 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

141 #ifde‡
SAM9XE_IAR


142 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

145 #ifde‡
LPC2000_IAR


146 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

149 #ifde‡
STR71X_IAR


150 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

153 #ifde‡
STR75X_IAR


154 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

157 #ifde‡
STR75X_GCC


158 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

161 #ifde‡
STR91X_IAR


162 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

165 #ifde‡
GCC_H8S


166 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

169 #ifde‡
GCC_AT91FR40008


170 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

173 #ifde‡
RVDS_ARMCM3_LM3S102


174 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

177 #ifde‡
GCC_ARMCM3_LM3S102


178 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

181 #ifde‡
GCC_ARMCM3


182 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

185 #ifde‡
IAR_ARM_CM3


186 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

189 #ifde‡
IAR_ARMCM3_LM


190 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

193 #ifde‡
HCS12_CODE_WARRIOR


194 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

197 #ifde‡
MICROBLAZE_GCC


198 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

201 #ifde‡
TERN_EE


202 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

205 #ifde‡
GCC_HCS12


206 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

209 #ifde‡
GCC_MCF5235


210 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

213 #ifde‡
COLDFIRE_V2_GCC


214 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

217 #ifde‡
COLDFIRE_V2_CODEWARRIOR


218 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

221 #ifde‡
GCC_PPC405


222 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

225 #ifde‡
GCC_PPC440


226 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

229 #ifde‡
_16FX_SOFTUNE


230 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

233 #ifde‡
BCC_INDUSTRIAL_PC_PORT


236 
	~"‰c⁄fig.h
"

237 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

238 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

241 #ifde‡
BCC_FLASH_LITE_186_PORT


244 
	~"‰c⁄fig.h
"

245 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

246 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

249 #ifde‡
__GNUC__


250 #ifde‡
__AVR32_AVR32A__


251 
	~"p‹tma¸o.h
"

255 #ifde‡
__ICCAVR32__


256 #ifde‡
__CORE__


257 #i‡
__CORE__
 =
__AVR32A__


258 
	~"p‹tma¸o.h
"

263 #ifde‡
__91467D


264 
	~"p‹tma¸o.h
"

267 #ifde‡
__96340


268 
	~"p‹tma¸o.h
"

272 #ifde‡
__IAR_V850ES_Fx3__


273 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

276 #ifde‡
__IAR_V850ES_Jx3__


277 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

280 #ifde‡
__IAR_V850ES_Jx3_L__


281 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

284 #ifde‡
__IAR_V850ES_Jx2__


285 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

288 #ifde‡
__IAR_V850ES_Hx2__


289 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

292 #ifde‡
__IAR_78K0R_Kx3__


293 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

296 #ifde‡
__IAR_78K0R_Kx3L__


297 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

306 #i‚de‡
p‹tENTER_CRITICAL


307 
	~"p‹tma¸o.h
"

310 #i‡
p‹tBYTE_ALIGNMENT
 == 8

311 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

314 #i‡
p‹tBYTE_ALIGNMENT
 == 4

315 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

318 #i‡
p‹tBYTE_ALIGNMENT
 == 2

319 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

322 #i‡
p‹tBYTE_ALIGNMENT
 == 1

323 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

326 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


330 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


331 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

334 #ifde‡
__˝lu•lus


338 
	~"mpu_wøµîs.h
"

346 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

347 
p‹tSTACK_TYPE
 *
pxP‹tInôüli£Sèck
–p‹tSTACK_TYPE *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
, 
p‹tBASE_TYPE
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

349 
p‹tSTACK_TYPE
 *
pxP‹tInôüli£Sèck
–p‹tSTACK_TYPE *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 );

355 *
pvP‹tMÆloc
–
size_t
 
xSize
 ) 
	gPRIVILEGED_FUNCTION
;

356 
vP‹tFªe
–*
pv
 ) 
	gPRIVILEGED_FUNCTION
;

357 
vP‹tInôüli£Blocks
–Ë
	gPRIVILEGED_FUNCTION
;

358 
size_t
 
xP‹tGëFªeHópSize
–Ë
	gPRIVILEGED_FUNCTION
;

364 
p‹tBASE_TYPE
 
xP‹tSèπScheduÀr
–Ë
	gPRIVILEGED_FUNCTION
;

371 
vP‹tEndScheduÀr
–Ë
	gPRIVILEGED_FUNCTION
;

380 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

381 
	gxMEMORY_REGION
;

382 
vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
p‹tSTACK_TYPE
 *
pxBŸtomOfSèck
, 
usSèckDïth
 ) 
	gPRIVILEGED_FUNCTION
;

385 #ifde‡
__˝lu•lus


	@Source/include/projdefs.h

54 #i‚de‡
PROJDEFS_H


55 
	#PROJDEFS_H


	)

58 (*
	tpdTASK_CODE
)( * );

60 
	#pdTRUE
 ( 1 )

	)

61 
	#pdFALSE
 ( 0 )

	)

63 
	#pdPASS
 ( 1 )

	)

64 
	#pdFAIL
 ( 0 )

	)

65 
	#îrQUEUE_EMPTY
 ( 0 )

	)

66 
	#îrQUEUE_FULL
 ( 0 )

	)

69 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

70 
	#îrNO_TASK_TO_RUN
 ( -2 )

	)

71 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

72 
	#îrQUEUE_YIELD
 ( -5 )

	)

	@Source/include/queue.h

55 #i‚de‡
QUEUE_H


56 
	#QUEUE_H


	)

58 #i‚de‡
INC_FREERTOS_H


59 #îr‹ "#ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "#include queue.h"

62 #ifde‡
__˝lu•lus


67 
	~"mpu_wøµîs.h
"

74 * 
	txQueueH™dÀ
;

78 
	#queueSEND_TO_BACK
 ( 0 )

	)

79 
	#queueSEND_TO_FRONT
 ( 1 )

	)

82 
	#queueQUEUE_TYPE_BASE
 ( 0U )

	)

83 
	#queueQUEUE_TYPE_MUTEX
 ( 1U )

	)

84 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( 2U )

	)

85 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( 3U )

	)

86 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( 4U )

	)

144 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
–uxQueueLígth, uxIãmSize, 
queueQUEUE_TYPE_BASE
 )

	)

226 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

308 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

392 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

480 sig√d 
p‹tBASE_TYPE
 
xQueueGíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

574 
	#xQueuePìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

667 
	#xQueueRe˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

766 sig√d 
p‹tBASE_TYPE
 
xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
xQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xJu°Pìk
 );

781 
p‹tBASE_TYPE
 
uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
xQueue
 );

795 
vQueueDñëe
–
xQueueH™dÀ
 
pxQueue
 );

865 
	#xQueueSídToFr⁄tFromISR
–
pxQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––pxQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_FRONT
 )

	)

936 
	#xQueueSídToBackFromISR
–
pxQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––pxQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1010 
	#xQueueSídFromISR
–
pxQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––pxQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1088 sig√d 
p‹tBASE_TYPE
 
xQueueGíîicSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, sig√dÖ‹tBASE_TYPE *
pxHighîPri‹ôyTaskWokí
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

1177 sig√d 
p‹tBASE_TYPE
 
xQueueRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, sig√dÖ‹tBASE_TYPE *
pxTaskWokí
 );

1183 sig√d 
p‹tBASE_TYPE
 
xQueueIsQueueEm±yFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

1184 sig√d 
p‹tBASE_TYPE
 
xQueueIsQueueFuŒFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

1185 
p‹tBASE_TYPE
 
uxQueueMesßgesWaôögFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 );

1202 sig√d 
p‹tBASE_TYPE
 
xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 );

1203 sig√d 
p‹tBASE_TYPE
 
xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
,Ö‹tBASE_TYPE 
xJu°Pìkög
 );

1204 
	#xQueueA…SídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

1205 
	#xQueueA…SídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

1206 
	#xQueueA…Re˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

1207 
	#xQueueA…Pìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

1218 sig√d 
p‹tBASE_TYPE
 
xQueueCRSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, sig√dÖ‹tBASE_TYPE 
xCoRoutöePªviou¶yWokí
 );

1219 sig√d 
p‹tBASE_TYPE
 
xQueueCRRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, sig√dÖ‹tBASE_TYPE *
pxTaskWokí
 );

1220 sig√d 
p‹tBASE_TYPE
 
xQueueCRSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 );

1221 sig√d 
p‹tBASE_TYPE
 
xQueueCRRe˚ive
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
 );

1227 
xQueueH™dÀ
 
xQueueCª©eMuãx
–
ucQueueTy≥
 );

1228 
xQueueH™dÀ
 
xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 );

1234 
p‹tBASE_TYPE
 
xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
, 
p‹tTickTy≥
 
xBlockTime
 );

1235 
p‹tBASE_TYPE
 
xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
 );

1257 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0U

1258 
vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcName
 );

1265 
xQueueH™dÀ
 
xQueueGíîicCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
, 
ucQueueTy≥
 );

1270 
vQueueWaôF‹MesßgeRe°ri˘ed
–
xQueueH™dÀ
 
pxQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 );

1273 #ifde‡
__˝lu•lus


	@Source/include/semphr.h

54 #i‚de‡
SEMAPHORE_H


55 
	#SEMAPHORE_H


	)

57 #i‚de‡
INC_FREERTOS_H


58 #îr‹ "#ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "#include semphr.h"

61 
	~"queue.h
"

63 
xQueueH™dÀ
 
	txSem≠h‹eH™dÀ
;

65 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( Ë1U )

	)

66 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( Ë0U )

	)

67 
	#£mGIVE_BLOCK_TIME
 ( ( 
p‹tTickTy≥
 ) 0U )

	)

108 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) \

	)

110 –
	gxSem≠h‹e
 ) = 
xQueueGíîicCª©e
––
p‹tBASE_TYPE
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 ); \

111 if––
	gxSem≠h‹e
 ) !
NULL
 ) \

113 
xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

182 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueGíîicRe˚ive
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

275 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

290 
	#xSem≠h‹eA…Take
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueA…GíîicRe˚ive
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

353 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

437 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

451 
	#xSem≠h‹eA…Give
–
xSem≠h‹e
 ) 
	`xQueueA…GíîicSíd
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

542 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––
xQueueH™dÀ
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

589 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 )

	)

644 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
 )

	)

707 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

721 
	#vSem≠h‹eDñëe
–
xSem≠h‹e
 ) 
	`vQueueDñëe
––
xQueueH™dÀ
 ) xSem≠h‹ê)

	)

	@Source/include/task.h

55 #i‚de‡
TASK_H


56 
	#TASK_H


	)

58 #i‚de‡
INC_FREERTOS_H


62 
	~"p‹èbÀ.h
"

63 
	~"li°.h
"

65 #ifde‡
__˝lu•lus


73 
	#tskKERNEL_VERSION_NUMBER
 "V7.1.0"

	)

85 * 
	txTaskH™dÀ
;

90 
	sxTIME_OUT


92 
p‹tBASE_TYPE
 
xOvîÊowCou¡
;

93 
p‹tTickTy≥
 
xTimeOnE¡îög
;

94 } 
	txTimeOutTy≥
;

99 
	sxMEMORY_REGION


101 *
pvBa£Addªss
;

102 
ulLígthInByãs
;

103 
ulP¨amëîs
;

104 } 
	txMem‹yRegi⁄
;

109 
	sxTASK_PARAMTERS


111 
pdTASK_CODE
 
pvTaskCode
;

112 c⁄° sig√d * c⁄° 
pcName
;

113 
usSèckDïth
;

114 *
pvP¨amëîs
;

115 
p‹tBASE_TYPE
 
uxPri‹ôy
;

116 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
;

117 
xMem‹yRegi⁄
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

118 } 
	txTaskP¨amëîs
;

125 
	#tskIDLE_PRIORITY
 ( ( 
p‹tBASE_TYPE
 ) 0U )

	)

135 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

149 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

163 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

173 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

183 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

186 
	#èskSCHEDULER_NOT_STARTED
 0

	)

187 
	#èskSCHEDULER_RUNNING
 1

	)

188 
	#èskSCHEDULER_SUSPENDED
 2

	)

270 
	#xTaskCª©e
–
pvTaskCode
, 
pcName
, 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
 ) 
	`xTaskGíîicCª©e
––pvTaskCodê), (ÖcNamê), ( usSèckDïth ), (ÖvP¨amëî†), ( uxPri‹ôy ), (ÖxCª©edTask ), ( 
NULL
 ), ( NULL ) )

	)

339 
	#xTaskCª©eRe°ri˘ed
–
x
, 
pxCª©edTask
 ) 
	`xTaskGíîicCª©e
–((x)->
pvTaskCode
), ((x)->
pcName
), ((x)->
usSèckDïth
), ((x)->
pvP¨amëîs
), ((x)->
uxPri‹ôy
), (pxCª©edTask), ((x)->
puxSèckBuf„r
), ((x)->
xRegi⁄s
Ë)

	)

387 
vTaskAŒoˇãMPURegi⁄s
–
xTaskH™dÀ
 
xTask
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
pxRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

428 
vTaskDñëe
–
xTaskH™dÀ
 
pxTaskToDñëe
 ) 
PRIVILEGED_FUNCTION
;

482 
vTaskDñay
–
p‹tTickTy≥
 
xTicksToDñay
 ) 
PRIVILEGED_FUNCTION
;

541 
vTaskDñayU¡û
–
p‹tTickTy≥
 * c⁄° 
pxPªviousWakeTime
,Ö‹tTickTy≥ 
xTimeIn¸emít
 ) 
PRIVILEGED_FUNCTION
;

588 
p‹tBASE_TYPE
 
uxTaskPri‹ôyGë
–
xTaskH™dÀ
 
pxTask
 ) 
PRIVILEGED_FUNCTION
;

630 
vTaskPri‹ôySë
–
xTaskH™dÀ
 
pxTask
, 
p‹tBASE_TYPE
 
uxNewPri‹ôy
 ) 
PRIVILEGED_FUNCTION
;

681 
vTaskSu•íd
–
xTaskH™dÀ
 
pxTaskToSu•íd
 ) 
PRIVILEGED_FUNCTION
;

730 
vTaskResume
–
xTaskH™dÀ
 
pxTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

750 
p‹tBASE_TYPE
 
xTaskResumeFromISR
–
xTaskH™dÀ
 
pxTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

788 
vTaskSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

841 
vTaskEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

892 
vTaskSu•ídAŒ
–Ë
PRIVILEGED_FUNCTION
;

944 sig√d 
p‹tBASE_TYPE
 
xTaskResumeAŒ
–Ë
PRIVILEGED_FUNCTION
;

955 sig√d 
p‹tBASE_TYPE
 
xTaskIsTaskSu•íded
–
xTaskH™dÀ
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

970 
p‹tTickTy≥
 
xTaskGëTickCou¡
–Ë
PRIVILEGED_FUNCTION
;

986 
p‹tTickTy≥
 
xTaskGëTickCou¡FromISR
–Ë
PRIVILEGED_FUNCTION
;

1000 
p‹tBASE_TYPE
 
uxTaskGëNumbîOfTasks
–Ë
PRIVILEGED_FUNCTION
;

1014 sig√d *
pcTaskGëTaskName
–
xTaskH™dÀ
 
xTaskToQuîy
 );

1040 
vTaskLi°
–sig√d *
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1072 
vTaskGëRunTimeSèts
–sig√d *
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1093 
vTaskSèπTø˚
–sig√d * 
pcBuf„r
, 
ulBuf„rSize
 ) 
PRIVILEGED_FUNCTION
;

1106 
ulTaskEndTø˚
–Ë
PRIVILEGED_FUNCTION
;

1126 
p‹tBASE_TYPE
 
uxTaskGëSèckHighW©îM¨k
–
xTaskH™dÀ
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1134 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1135 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1144 
vTaskSëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
, 
pdTASK_HOOK_CODE
 
pxHookFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

1152 
pdTASK_HOOK_CODE
 
xTaskGëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1166 
p‹tBASE_TYPE
 
xTaskCÆlAµliˇti⁄TaskHook
–
xTaskH™dÀ
 
xTask
, *
pvP¨amëî
 ) 
PRIVILEGED_FUNCTION
;

1175 
xTaskH™dÀ
 
xTaskGëIdÀTaskH™dÀ
( );

1191 
vTaskIn¸emítTick
–Ë
PRIVILEGED_FUNCTION
;

1214 
vTaskPœ˚OnEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1229 
vTaskPœ˚OnEvítLi°Re°ri˘ed
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1246 sig√d 
p‹tBASE_TYPE
 
xTaskRemoveFromEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
 ) 
PRIVILEGED_FUNCTION
;

1256 
vTaskSwôchC⁄ãxt
–Ë
PRIVILEGED_FUNCTION
;

1261 
xTaskH™dÀ
 
xTaskGëCuºítTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

1266 
vTaskSëTimeOutSèã
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

1272 
p‹tBASE_TYPE
 
xTaskCheckF‹TimeOut
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
, 
p‹tTickTy≥
 * c⁄° 
pxTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1278 
vTaskMis£dYõld
–Ë
PRIVILEGED_FUNCTION
;

1284 
p‹tBASE_TYPE
 
xTaskGëScheduÀrSèã
–Ë
PRIVILEGED_FUNCTION
;

1290 
vTaskPri‹ôyInhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

1296 
vTaskPri‹ôyDisöhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

1302 sig√d 
p‹tBASE_TYPE
 
xTaskGíîicCª©e
–
pdTASK_CODE
 
pxTaskCode
, c⁄° sig√d * c⁄° 
pcName
, 
usSèckDïth
, *
pvP¨amëîs
, p‹tBASE_TYPE 
uxPri‹ôy
, 
xTaskH™dÀ
 *
pxCª©edTask
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

1307 
p‹tBASE_TYPE
 
uxTaskGëTaskNumbî
–
xTaskH™dÀ
 
xTask
 );

1313 
vTaskSëTaskNumbî
–
xTaskH™dÀ
 
xTask
, 
p‹tBASE_TYPE
 
uxH™dÀ
 );

1316 #ifde‡
__˝lu•lus


	@Source/include/timers.h

55 #i‚de‡
TIMERS_H


56 
	#TIMERS_H


	)

58 #i‚de‡
INC_FREERTOS_H


62 
	~"p‹èbÀ.h
"

63 
	~"li°.h
"

64 
	~"èsk.h
"

66 #ifde‡
__˝lu•lus


73 
	#tmrCOMMAND_START
 0

	)

74 
	#tmrCOMMAND_STOP
 1

	)

75 
	#tmrCOMMAND_CHANGE_PERIOD
 2

	)

76 
	#tmrCOMMAND_DELETE
 3

	)

88 * 
	txTimîH™dÀ
;

91 (*
tmrTIMER_CALLBACK
)–
	txTimîH™dÀ
 
	txTimî
 );

220 
xTimîH™dÀ
 
xTimîCª©e
–c⁄° sig√d *
pcTimîName
, 
p‹tTickTy≥
 
xTimîPîiodInTicks
, 
p‹tBASE_TYPE
 
uxAutoRñﬂd
, * 
pvTimîID
, 
tmrTIMER_CALLBACK
 
pxCÆlbackFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

242 *
pvTimîGëTimîID
–
xTimîH™dÀ
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

278 
p‹tBASE_TYPE
 
xTimîIsTimîA˘ive
–
xTimîH™dÀ
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

287 
xTaskH™dÀ
 
xTimîGëTimîD´m⁄TaskH™dÀ
( );

339 
	#xTimîSèπ
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xBlockTimêË)

	)

381 
	#xTimîSt›
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( xBlockTimêË)

	)

460 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), 
NULL
, ( xBlockTimêË)

	)

498 
	#xTimîDñëe
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( xBlockTimêË)

	)

621 
	#xTimîRe£t
–
xTimî
, 
xBlockTime
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xBlockTimêË)

	)

705 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

767 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0, (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

839 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

924 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

930 
p‹tBASE_TYPE
 
xTimîCª©eTimîTask
–Ë
PRIVILEGED_FUNCTION
;

931 
p‹tBASE_TYPE
 
xTimîGíîicComm™d
–
xTimîH™dÀ
 
xTimî
,Ö‹tBASE_TYPE 
xComm™dID
, 
p‹tTickTy≥
 
xO±i⁄ÆVÆue
, sig√dÖ‹tBASE_TYPE *
pxHighîPri‹ôyTaskWokí
,Ö‹tTickTy≥ 
xBlockTime
 ) 
PRIVILEGED_FUNCTION
;

933 #ifde‡
__˝lu•lus


	@Source/list.c

55 
	~<°dlib.h
>

56 
	~"FªeRTOS.h
"

57 
	~"li°.h
"

63 
	$vLi°Inôüli£
–
xLi°
 *
pxLi°
 )

68 
pxLi°
->
pxIndex
 = ( 
xLi°Iãm
 * ) &–pxLi°->
xLi°End
 );

72 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

76 
pxLi°
->
xLi°End
.
pxNext
 = ( 
xLi°Iãm
 * ) &(ÖxList->xListEnd );

77 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
xLi°Iãm
 * ) &(ÖxList->xListEnd );

79 
pxLi°
->
uxNumbîOfIãms
 = ( 
p‹tBASE_TYPE
 ) 0U;

80 
	}
}

83 
	$vLi°Inôüli£Iãm
–
xLi°Iãm
 *
pxIãm
 )

86 
pxIãm
->
pvC⁄èöî
 = 
NULL
;

87 
	}
}

90 
	$vLi°In£πEnd
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 )

92 vﬁ©ûê
xLi°Iãm
 * 
pxIndex
;

98 
pxIndex
 = 
pxLi°
->pxIndex;

100 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
->pxNext;

101 
pxNewLi°Iãm
->
pxPªvious
 = 
pxLi°
->
pxIndex
;

102 
pxIndex
->
pxNext
->
pxPªvious
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

103 
pxIndex
->
pxNext
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

104 
pxLi°
->
pxIndex
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

107 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

109 –
pxLi°
->
uxNumbîOfIãms
 )++;

110 
	}
}

113 
	$vLi°In£π
–
xLi°
 *
pxLi°
, 
xLi°Iãm
 *
pxNewLi°Iãm
 )

115 vﬁ©ûê
xLi°Iãm
 *
pxIãøt‹
;

116 
p‹tTickTy≥
 
xVÆueOfIn£πi⁄
;

119 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

128 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

130 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

150  
pxIãøt‹
 = ( 
xLi°Iãm
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

157 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

158 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 = ( vﬁ©ûê
xLi°Iãm
 * )ÖxNewListItem;

159 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

160 
pxIãøt‹
->
pxNext
 = ( vﬁ©ûê
xLi°Iãm
 * ) 
pxNewLi°Iãm
;

164 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

166 –
pxLi°
->
uxNumbîOfIãms
 )++;

167 
	}
}

170 
	$vLi°Remove
–
xLi°Iãm
 *
pxIãmToRemove
 )

172 
xLi°
 * 
pxLi°
;

174 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

175 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

179 
pxLi°
 = ( 
xLi°
 * ) 
pxIãmToRemove
->
pvC⁄èöî
;

182 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

184 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

187 
pxIãmToRemove
->
pvC⁄èöî
 = 
NULL
;

188 –
pxLi°
->
uxNumbîOfIãms
 )--;

189 
	}
}

	@Source/portable/GCC/ARM_CA9/port.c

65 
	~<°dio.h
>

66 
	~<°rög.h
>

69 
	~"FªeRTOS.h
"

70 
	~"èsk.h
"

75 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


76 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

80 
	#p‹tINITIAL_XPSR
 ( 0x0000001F )

	)

83 
	sSTRUCT_HANDLER_PARAMETER


85 (*
	mvH™dÀr
)(*);

86 *
	mpvP¨amëî
;

87 } 
	txI¡îru±H™dÀrDeföôi⁄
;

88 
xI¡îru±H™dÀrDeföôi⁄
 
	gpxI¡îru±H™dÀrs
[ 
p‹tMAX_VECTORS
 ] = { { 
NULL
, NULL } };

90 
p‹tBASE_TYPE
 * vﬁ©ûê
pxCuºítTCB
;

93 
	gulMaxVe˘‹Id
 = 
p‹tMAX_VECTORS
;

97 c⁄° 
	gulKî√lPri‹ôy
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

100 
p‹tSTACK_TYPE
 
	gpuxFIQSèck
[ 
p‹tFIQ_STACK_SIZE
 ];

101 
p‹tSTACK_TYPE
 
	gpuxIRQSèck
[ 
p‹tIRQ_STACK_SIZE
 ];

102 
p‹tSTACK_TYPE
 
	gpuxAb‹tSèck
[ 
p‹tABORT_STACK_SIZE
 ];

103 
p‹tSTACK_TYPE
 
	gpuxSVCSèck
[ 
p‹tSVC_STACK_SIZE
 ];

104 
p‹tSTACK_TYPE
 *
	gpuxFIQSèckPoöãr
 = &(
puxFIQSèck
[ 
p‹tFIQ_STACK_SIZE
 - 1 ] );

105 
p‹tSTACK_TYPE
 *
	gpuxIRQSèckPoöãr
 = &(
puxIRQSèck
[ 
p‹tIRQ_STACK_SIZE
 - 1 ] );

106 
p‹tSTACK_TYPE
 *
	gpuxAb‹tSèckPoöãr
 = &(
puxAb‹tSèck
[ 
p‹tABORT_STACK_SIZE
 - 1 ] );

107 
p‹tSTACK_TYPE
 *
	gpuxSVCSèckPoöãr
 = &(
puxSVCSèck
[ 
p‹tSVC_STACK_SIZE
 - 1 ] );

110 
	gPageTabÀ
[4096] 
__©åibuã__
((
Æig√d
 (16384)));

115 
¥vSëupTimîI¡îru±
( );

120 
	$vP‹tPídSVH™dÀr
–*
pvP¨amëî
 ) 
	`__©åibuã__
((
«ked
));

121 
	`vP‹tSysTickH™dÀr
–*
pvP¨amëî
 );

122 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

123 
	$vP‹tI¡îru±C⁄ãxt
–Ë
	`__©åibuã__
 (–
«ked
 ));

124 
	$vP‹tSMCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

129 
	$vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

132 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–(*
vH™dÀr
)(*), *
pvP¨amëî
, 
ulVe˘‹
, 
ucEdgeTriggîed
, 
ucPri‹ôy
, 
ucPro˚ss‹T¨gës
 );

136 
_ëext
;

137 
_d©a
;

138 
_ed©a
;

139 
_bss
;

140 
_ebss
;

141 
_°ack_t›
;

147 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

149 
p‹tSTACK_TYPE
 *
pxOrigöÆSèck
 = 
pxT›OfSèck
;

151 
pxT›OfSèck
 = (
p‹tSTACK_TYPE
 *)(()’xT›OfSèck)&~
p‹tBYTE_ALIGNMENT_MASK
);

154 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆSèck
;

161 
pxT›OfSèck
 -= 12;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

165  
pxT›OfSèck
;

166 
	}
}

169 
	$vP‹tSVCH™dÀr
( )

171 
__asm
 volatile(

184 
	}
}

187 
	$vP‹tI¡îru±C⁄ãxt
( )

189 
__asm
 volatile(

209 
	}
}

212 
	$vP‹tSèπFú°Task
( )

214 
__asm
 volatile(

218 : : [
pxTCB
] "r" (
pxCuºítTCB
), [
svc•
] "r" (
puxSVCSèckPoöãr
) :

220 
	}
}

223 
	$vP‹tSMCH™dÀr
( )

226 
	}
}

229 
	$vP‹tYõldFromISR
( )

231 
	`vTaskSwôchC⁄ãxt
();

232 
	`p‹tSGI_CLEAR_YIELD
–
p‹tGIC_DISTRIBUTOR_BASE
, 
	`p‹tCORE_ID
() );

233 
	}
}

239 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

243 
	`¥vSëupTimîI¡îru±
();

246 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–((*)(*))
vP‹tYõldFromISR
, 
NULL
, 
p‹tSGI_YIELD_VECTOR_ID
, 
pdTRUE
, 
c⁄figKERNEL_INTERRUPT_PRIORITY
, 1<<
	`p‹tCORE_ID
() );

249 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICDDCR
(
p‹tGIC_DISTRIBUTOR_BASE
), 0x01UL );

250 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCBPR
(
p‹tGIC_PRIVATE_BASE
), 0x00UL );

251 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCPMR
(
p‹tGIC_PRIVATE_BASE
), 
c⁄figLOWEST_INTERRUPT_PRIORITY
 );

252 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCICR
(
p‹tGIC_PRIVATE_BASE
), 0x01UL );

255 
	`vP‹tSèπFú°Task
();

259 
	}
}

262 
	$vP‹tEndScheduÀr
( )

266 
	}
}

269 
	$vP‹tSysTickH™dÀr
–*
pvP¨amëî
 )

272 *(
p‹tSYSTICK_INTERRUPT_STATUS
) = 0x01UL;

274 
	`vTaskIn¸emítTick
();

276 #i‡
c⁄figUSE_PREEMPTION
 == 1

278 
	`p‹tEND_SWITCHING_ISR
(
pdTRUE
);

280 
	}
}

287 
	$¥vSëupTimîI¡îru±
( )

290 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–
vP‹tSysTickH™dÀr
, 
NULL
, 
p‹tSYSTICK_VECTOR_ID
, 
pdTRUE
, 
c⁄figKERNEL_INTERRUPT_PRIORITY
, 1<<
	`p‹tCORE_ID
() );

293 *(
p‹tSYSTICK_LOAD
Ë(
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

294 *(
p‹tSYSTICK_CONTROL
Ë–
p‹tSYSTICK_PRESCALE
 << 8 ) | 
p‹tSYSTICK_CTRL_ENABLE_PERIODIC_INTERRUPTS
;

296 
	}
}

299 
vP‹tIn°ÆlI¡îru±H™dÀr
–(*
vH™dÀr
)(*), *
pvP¨amëî
, 
ulVe˘‹
, 
ucEdgeTriggîed
, 
ucPri‹ôy
, 
ucPro˚ss‹T¨gës
 )

301 
ulB™k32
 = 4 * ( 
ulVe˘‹
 / 32 );

302 
ulOff£t32
 = 
ulVe˘‹
 % 32;

303 
ulB™k4
 = 4 * ( 
ulVe˘‹
 / 4 );

304 
ulOff£t4
 = 
ulVe˘‹
 % 4;

305 
ulB™k16
 = 4 * ( 
ulVe˘‹
 / 16 );

306 
ulOff£t16
 = 
ulVe˘‹
 % 16;

308 
puxGICDi°ribut‹Addªss
 = 0;

311 i‡–
ulVe˘‹
 < 32 )

314 
puxGICDi°ribut‹Addªss
 = 
p‹tGIC_DISTRIBUTOR_BASE
;

323 i‡(
ulVe˘‹
 < 
ulMaxVe˘‹Id
 )

325 
pxI¡îru±H™dÀrs
[ 
ulVe˘‹
 ].
vH™dÀr
 = vHandler;

326 
pxI¡îru±H™dÀrs
[ 
ulVe˘‹
 ].
pvP¨amëî
 =ÖvParameter;

329 
ulB™k32
 = 4 * ( 
ulVe˘‹
 / 32 );

330 
ulOff£t32
 = 
ulVe˘‹
 % 32;

331 
ulB™k4
 = 4 * ( 
ulVe˘‹
 / 4 );

332 
ulOff£t4
 = 
ulVe˘‹
 % 4;

333 
ulB™k16
 = 4 * ( 
ulVe˘‹
 / 16 );

334 
ulOff£t16
 = 
ulVe˘‹
 % 16;

337 i‡–0 !
ucEdgeTriggîed
 )

339 
	`p‹tGIC_SET
–(
	`p‹tGIC_ICDICR_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k16
Ë), ( 
	`p‹tGIC_READ
’uxGICDi°ribut‹Addªs†+ ulB™k16Ë| ( 0x02 << ( 
ulOff£t16
 * 2 ) ) ) );

343 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICDIPR_BASE
(
puxGICDi°ribut‹Addªss
Ë+ 
ulB™k4
, ( ( ()
ucPri‹ôy
 ) << ( 
ulOff£t4
 * 8 ) ) );

346 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICDIPTR_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k4
), ( ( ()
ucPro˚ss‹T¨gës
 ) << ( 
ulOff£t4
 * 8 ) ) );

349 i‡–
NULL
 !
vH™dÀr
 )

351 
	`p‹tGIC_SET
–
	`p‹tGIC_ICDICPR_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k32
), ( 
	`p‹tGIC_READ
–p‹tGIC_ICDICPR_BASE’uxGICDi°ribut‹Addªs†+ ulB™k32ËË| ( 1 << 
ulOff£t32
 ) ) );

352 
	`p‹tGIC_SET
–
	`p‹tGIC_ICDISER_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k32
), ( 
	`p‹tGIC_READ
–p‹tGIC_ICDISER_BASE’uxGICDi°ribut‹Addªs†+ ulB™k32ËË| ( 1 << 
ulOff£t32
 ) ) );

357 
	`p‹tGIC_CLEAR
–
	`p‹tGIC_ICDICPR_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k32
), ( 
	`p‹tGIC_READ
–p‹tGIC_ICDICPR_BASE’uxGICDi°ribut‹Addªs†+ ulB™k32ËË| ( 1 << 
ulOff£t32
 ) ) );

358 
	`p‹tGIC_CLEAR
–
	`p‹tGIC_ICDISER_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k32
), ( 
	`p‹tGIC_READ
–p‹tGIC_ICDISER_BASE’uxGICDi°ribut‹Addªs†+ ulB™k32ËË| ( 1 << 
ulOff£t32
 ) ) );

361 
	}
}

364 
	$vP‹tGICI¡îru±H™dÀr
( )

366 
ulVe˘‹
 = 0UL;

367 
ulGICBa£Addªss
 = 
p‹tGIC_PRIVATE_BASE
;

370 
ulVe˘‹
 = 
	`p‹tGIC_READ
–
	`p‹tGIC_ICCIAR
(
p‹tGIC_PRIVATE_BASE
) );

372 i‡–––
ulVe˘‹
 & 
p‹tGIC_VECTOR_MASK
 ) < 
ulMaxVe˘‹Id
 ) && ( 
NULL
 !
pxI¡îru±H™dÀrs
[ ( ulVe˘‹ &Ö‹tGIC_VECTOR_MASK ) ].
vH™dÀr
 ) )

375 
pxI¡îru±H™dÀrs
[ ( 
ulVe˘‹
 & 
p‹tGIC_VECTOR_MASK
 ) ].
	`vH™dÀr
–pxI¡îru±H™dÀrs[ ( ulVe˘‹ &Ö‹tGIC_VECTOR_MASK ) ].
pvP¨amëî
 );

377 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCEOIR
(
ulGICBa£Addªss
), 
ulVe˘‹
 );

383 
	}
}

386 
p‹tBASE_TYPE
 
	$xP‹tSëI¡îru±Mask
( )

388 
p‹tBASE_TYPE
 
xPri‹ôyMask
 = 
	`p‹tGIC_READ
–
	`p‹tGIC_ICCPMR
(
p‹tGIC_PRIVATE_BASE
) );

389 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCPMR
(
p‹tGIC_PRIVATE_BASE
), 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

390  
xPri‹ôyMask
;

391 
	}
}

394 
	$vP‹tCÀ¨I¡îru±Mask
–
p‹tBASE_TYPE
 
xPri‹ôyMask
 )

396 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCPMR
(
p‹tGIC_PRIVATE_BASE
), 
xPri‹ôyMask
 );

397 
	}
}

400 
	$vP‹tUnknownI¡îru±H™dÀr
–*
pvP¨amëî
 )

403 ()
pvP¨amëî
;

404 
	}
}

408 
	$RódSCTLR
()

410 
SCTLR
;

411 
__asm
 volatile("mrcÖ15, 0, %[sctlr], c1, c0, 0"

412 :[
s˘Ã
] "Ù" (
SCTLR
)::);

413  
SCTLR
;

414 
	}
}

416 
	$WrôeSCTLR
(
SCTLR
)

418 
__asm
 volatile("mcrÖ15, 0, %[sctlr], c1, c0, 0"

419 ::[
s˘Ã
] "r" (
SCTLR
):);

420 
	}
}

422 
	$RódACTLR
()

424 
ACTLR
;

425 
__asm
 volatile("mrcÖ15, 0, %[actlr], c1, c0, 1"

426 :[
a˘Ã
] "Ù" (
ACTLR
)::);

427  
ACTLR
;

428 
	}
}

430 
	$WrôeACTLR
(
ACTLR
)

432 
__asm
 volatile("mcrÖ15, 0, %[actlr], c1, c0, 0"

433 ::[
a˘Ã
] "r" (
ACTLR
):);

434 
	}
}

436 
	$_öô
()

438 
	`maö
( );

439 
i
;

440 *
pulSrc
, *
pulDe°
;

441 vﬁ©ûê
ulSCTLR
 = 0UL;

442 
__i§_ve˘‹_°¨t
;

443 
__i§_ve˘‹_íd
;

444 
_bss
;

445 
_ebss
;

448 
pulDe°
 = &
_bss
;ÖulDe° < &
_ebss
; )

450 *
pulDe°
++ = 0;

454 
__asm
 volatile (

475 : : [
fiq•
] "r" (
puxFIQSèckPoöãr
),

476 [
úq•
] "r" (
puxIRQSèckPoöãr
),

477 [
abt•
] "r" (
puxAb‹tSèckPoöãr
),

478 [
svc•
] "r" (
puxSVCSèckPoöãr
)

482 
pulSrc
 = (*)&
__i§_ve˘‹_°¨t
;

483 
pulDe°
 = (*)
p‹tEXCEPTION_VECTORS_BASE
;

484  
pulSrc
 = &
__i§_ve˘‹_°¨t
;ÖulSr¯< &
__i§_ve˘‹_íd
; )

486 *
pulDe°
++ = *
pulSrc
++;

490 
pulDe°
 = (*)
p‹tEXCEPTION_VECTORS_BASE
;

491 
__asm
 volatile(

493 : : [
vb¨
] "r" (
pulDe°
) :

497 
ulSCTLR
=
	`RódSCTLR
();

498 
ulSCTLR
&=~(1<<13);

499 
	`WrôeSCTLR
(
ulSCTLR
);

502 
	`WrôeSCTLR
(
	`RódSCTLR
()|(1<<11));

505 
	`WrôeACTLR
(
	`RódACTLR
()|(1<<2));

508 
i
=0;i<64;i++)

510 
PageTabÀ
[
i
]=(i<<20)|0x05de6;

513 
i
=64;i<4096;i++)

515 
PageTabÀ
[
i
]=(i<<20)|0x0de2;

523 
__asm
 volatile (

527 : : [
âb¸
] "r" (0),

528 [
âbr0
] "r" (
PageTabÀ
),

529 [
da¸
] "r" (0x55555555)

533 
	`WrôeSCTLR
(
	`RódSCTLR
()|(1<<0));

536 
	`WrôeSCTLR
(
	`RódSCTLR
()|(1<<2)|(1<<12));

538 
	`maö
();

539 
	}
}

542 
	$Undeföed_H™dÀr_P™ic
( )

544 
__asm
 volatile ( " smc #0 " );

546 
	}
}

549 
	$Pª„tch_H™dÀr_P™ic
( )

551 
__asm
 volatile ( " smc #0 " );

553 
	}
}

556 
	$Ab‹t_H™dÀr_P™ic
( )

559 
	}
}

	@Source/portable/GCC/ARM_CA9/portmacro.h

62 #i‚de‡
PORTMACRO_H


63 
	#PORTMACRO_H


	)

65 #ifde‡
__˝lu•lus


80 
	#p‹tCHAR
 

	)

81 
	#p‹tFLOAT
 

	)

82 
	#p‹tDOUBLE
 

	)

83 
	#p‹tLONG
 

	)

84 
	#p‹tSHORT
 

	)

85 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

86 
	#p‹tBASE_TYPE
 

	)

88 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

89 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

90 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

92 
	tp‹tLONG
 
	tp‹tTickTy≥
;

93 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

98 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

99 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

100 
	#p‹tBYTE_ALIGNMENT
 8

	)

101 
	#p‹tHEAP_END
 ( ( (* )&
_d©a
 + ()
c⁄figTOTAL_HEAP_SIZE
 ) )

	)

105 
vTaskE¡îCrôiˇl
();

106 
vTaskExôCrôiˇl
();

107 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

108 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

109 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

111 
p‹tBASE_TYPE
 
xP‹tSëI¡îru±Mask
();

112 
vP‹tCÀ¨I¡îru±Mask
(
p‹tBASE_TYPE
);

113 
	#p‹tSET_INTERRUPT_MASK
(Ë
	`xP‹tSëI¡îru±Mask
()

	)

114 
	#p‹tCLEAR_INTERRUPT_MASK
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

115 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

116 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tCLEAR_INTERRUPT_MASK
(x)

	)

117 
	#p‹tDISABLE_INTERRUPTS
(Ë(()
	`p‹tSET_INTERRUPT_MASK
())

	)

118 
ölöe
 
p‹tENABLE_INTERRUPTS
()

120 
p‹tCLEAR_INTERRUPT_MASK
(
c⁄figLOWEST_INTERRUPT_PRIORITY
);

121 
__asm__
 
__vﬁ©ûe__
 ( "nop" );

127 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

128 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

130 
	#p‹tNOP
()

	)

132 
ölöe
 
p‹tCORE_ID
()

134 
	gvÆ
;

135 
__asm
(" mr¯p15,0,%[vÆ],c0,c0,5\n":[
vÆ
] "=r" (val)::);

136  
	gvÆ
&3;

141 
	#p‹tPERIPHBASE
 ( 0x1E000000 )

	)

142 
	#p‹tGIC_PRIVATE_BASE
 ( 
p‹tPERIPHBASE
 + 0x100UL )

	)

143 
	#p‹tGIC_DISTRIBUTOR_BASE
 ( 
p‹tPERIPHBASE
 + 0x1000UL )

	)

144 
	#p‹tEXCEPTION_VECTORS_BASE
 ( 
	`p‹tCORE_ID
()*0x1000000 )

	)

145 
	#p‹tMAX_VECTORS
 ( 32UL )

	)

149 
	#p‹tSCU_BASE
 ( 
p‹tPERIPHBASE
 + 0x00UL )

	)

150 
	#p‹tSCU_CONTROL
 ( ( vﬁ©ûê* ) ( 
p‹tSCU_BASE
 + 0x00UL ) )

	)

151 
	#p‹tSCU_CONFIGURATION
 ( ( vﬁ©ûê* ) ( 
p‹tSCU_BASE
 + 0x04UL ) )

	)

154 
	#p‹tGIC_ICCICR
(
x
Ë–(()(x)Ë+ 0x00UL )

	)

155 
	#p‹tGIC_ICCPMR
(
x
Ë–(()(x)Ë+ 0x04UL )

	)

156 
	#p‹tGIC_ICCBPR
(
x
Ë–(()(x)Ë+ 0x08UL )

	)

157 
	#p‹tGIC_ICCIAR
(
x
Ë–(()(x)Ë+ 0x0CUL )

	)

158 
	#p‹tGIC_ICCEOIR
(
x
Ë–(()(x)Ë+ 0x10UL )

	)

159 
	#p‹tGIC_ICCRPR
(
x
Ë–(()(x)Ë+ 0x14UL )

	)

160 
	#p‹tGIC_ICCHPIR
(
x
Ë–(()(x)Ë+ 0x18UL )

	)

163 
	#p‹tGIC_ICDDCR
(
x
Ë–(()(x)Ë+ 0x00UL )

	)

164 
	#p‹tGIC_ICDICTR
(
x
Ë–(()(x)Ë+ 0x04UL )

	)

165 
	#p‹tGIC_ICDISER_BASE
(
x
Ë–(()(x)Ë+ 0x100UL )

	)

166 
	#p‹tGIC_ICDICER_BASE
(
x
Ë–(()(x)Ë+ 0x180UL )

	)

167 
	#p‹tGIC_ICDISPR_BASE
(
x
Ë–(()(x)Ë+ 0x200UL )

	)

168 
	#p‹tGIC_ICDICPR_BASE
(
x
Ë–(()(x)Ë+ 0x280UL )

	)

169 
	#p‹tGIC_ICDABR_BASE
(
x
Ë–(()(x)Ë+ 0x300UL )

	)

170 
	#p‹tGIC_ICDIPR_BASE
(
x
Ë–(()(x)Ë+ 0x400UL )

	)

171 
	#p‹tGIC_ICDIPTR_BASE
(
x
Ë–(()(x)Ë+ 0x800UL )

	)

172 
	#p‹tGIC_ICDICR_BASE
(
x
Ë–(()(x)Ë+ 0xC00UL )

	)

173 
	#p‹tGIC_ICDPPIS
(
x
Ë–(()(x)Ë+ 0xD00UL )

	)

174 
	#p‹tGIC_ICDSPIS_BASE
(
x
Ë–(()(x)Ë+ 0xD04UL )

	)

175 
	#p‹tGIC_ICDSGIR
(
x
Ë–(()(x)Ë+ 0xF00UL )

	)

176 
	#p‹tGIC_ICDCPENDGIR
(
x
Ë–(()(x)Ë+ 0xF10UL )

	)

177 
	#p‹tGIC_ICDSPENDGIR
(
x
Ë–(()(x)Ë+ 0xF20UL )

	)

180 
	#p‹tGIC_WRITE
(
addªss
,
vÆue
Ë–*––* vﬁ©ûê)–addªs†ËË–vÆuêË)

	)

181 
	#p‹tGIC_SET
(
addªss
,
vÆue
Ë–*––* vﬁ©ûê)–addªs†ËË|–vÆuêË)

	)

182 
	#p‹tGIC_READ
(
addªss
Ë–*––* vﬁ©ûê)–addªs†ËË)

	)

183 
	#p‹tGIC_CLEAR
(
addªss
,
vÆue
Ë–*––* vﬁ©ûê)–addªs†ËË&~–vÆuêË)

	)

186 
	#p‹tGIC_CONTROL_ENABLE_INTERRUPTS
 ( 0x01UL )

	)

187 
	#p‹tGIC_CONTROL_DISABLE_INTERRUPTS
 ( 0x00UL )

	)

188 
	#p‹tGIC_PRIORITY_MASK_MASK
 ( 0xF0UL )

	)

189 
	#p‹tGIC_SPURIOUS_VECTOR
 ( 1023 )

	)

190 
	#p‹tGIC_CPU_INTERRUPT_SOURCE_MASK
 ( 0x1C00UL )

	)

191 
	#p‹tGIC_VECTOR_MASK
 ( 0x3FFUL )

	)

194 
	#p‹tSYSTICK_BASE
 ( 
p‹tPERIPHBASE
 + 0x600 )

	)

195 
	#p‹tSYSTICK_LOAD
 ( ( vﬁ©ûê* ) ( 
p‹tSYSTICK_BASE
 + 0x00 ) )

	)

196 
	#p‹tSYSTICK_CONTROL
 ( ( vﬁ©ûê* ) ( 
p‹tSYSTICK_BASE
 + 0x08 ) )

	)

197 
	#p‹tSYSTICK_INTERRUPT_STATUS
 ( ( vﬁ©ûê* ) ( 
p‹tSYSTICK_BASE
 + 0x0C ) )

	)

198 
	#p‹tSYSTICK_CTRL_ENABLE_PERIODIC_INTERRUPTS
 ( 0x00000007 )

	)

199 
	#p‹tSYSTICK_PRESCALE
 ( 99 )

	)

200 
	#p‹tSYSTICK_VECTOR_ID
 ( 29 )

	)

203 
	#p‹tSGI_YIELD_VECTOR_ID
 ( 1 )

	)

204 
	#p‹tSGI_YIELD
–
xCPUID
 ) ( ( 0 << 24 ) | ( ( 1 << 16 ) << ( xCPUID ) ) | 
p‹tSGI_YIELD_VECTOR_ID
 )

	)

206 
ölöe
 
p‹tYIELD
()

208 if––
p‹tGIC_READ
–
p‹tGIC_ICDISPR_BASE
–
p‹tGIC_DISTRIBUTOR_BASE
 ) ) & 
	gp‹tSGI_YIELD_VECTOR_ID
 ) == 0UL)

210 
p‹tGIC_WRITE
–
p‹tGIC_ICDSGIR
–
p‹tGIC_DISTRIBUTOR_BASE
 ), 
p‹tSGI_YIELD
–
p‹tCORE_ID
() ) );

211 
__asm__
 
__vﬁ©ûe__
 ( "nop" );

214 
	#p‹tSGI_CLEAR_YIELD
–
pxDi°ribut‹Ba£
, 
xCPUID
 ) 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICDICPR_BASE
–pxDi°ribut‹Ba£ ), 
p‹tSGI_YIELD_VECTOR_ID
 )

	)

215 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) ( (xSwôchRequúedË? 
	`p‹tYIELD
(Ë: ()xSwôchRequúed )

	)

218 
	#p‹tPROCESSOR_MODE_MASK
 ( ~(0x1FULË)

	)

219 
	#p‹tUSER_MODE
 ( 0x10UL )

	)

220 
	#p‹tFIQ_MODE
 ( 0x11UL )

	)

221 
	#p‹tIRQ_MODE
 ( 0x12UL )

	)

222 
	#p‹tSVC_MODE
 ( 0x13UL )

	)

223 
	#p‹tMON_MODE
 ( 0x16UL )

	)

224 
	#p‹tABT_MODE
 ( 0x17UL )

	)

225 
	#p‹tUND_MODE
 ( 0x1BUL )

	)

226 
	#p‹tSYS_MODE
 ( 0x1FUL )

	)

229 
	#p‹tFIQ_STACK_SIZE
 ( 256 )

	)

230 
	#p‹tIRQ_STACK_SIZE
 ( 256 )

	)

231 
	#p‹tABORT_STACK_SIZE
 ( 256 )

	)

232 
	#p‹tSVC_STACK_SIZE
 ( 256 )

	)

234 #ifde‡
__˝lu•lus


	@Source/portable/GCC/ARM_Cortex-A9/port.c

65 
	~<°dio.h
>

66 
	~<°rög.h
>

69 
	~"FªeRTOS.h
"

70 
	~"èsk.h
"

75 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


76 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

80 
	#p‹tINITIAL_XPSR
 ( 0x0000001F )

	)

83 
	sSTRUCT_HANDLER_PARAMETER


85 (*
	mvH™dÀr
)(*);

86 *
	mpvP¨amëî
;

87 } 
	txI¡îru±H™dÀrDeföôi⁄
;

88 
xI¡îru±H™dÀrDeföôi⁄
 
	gpxI¡îru±H™dÀrs
[ 
p‹tMAX_VECTORS
 ] = { { 
NULL
, NULL } };

90 
p‹tBASE_TYPE
 * vﬁ©ûê
pxCuºítTCB
;

93 
	gulMaxVe˘‹Id
 = 
p‹tMAX_VECTORS
;

97 c⁄° 
	gulKî√lPri‹ôy
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

100 
p‹tSTACK_TYPE
 
	gpuxFIQSèck
[ 
p‹tFIQ_STACK_SIZE
 ];

101 
p‹tSTACK_TYPE
 
	gpuxIRQSèck
[ 
p‹tIRQ_STACK_SIZE
 ];

102 
p‹tSTACK_TYPE
 
	gpuxAb‹tSèck
[ 
p‹tABORT_STACK_SIZE
 ];

103 
p‹tSTACK_TYPE
 
	gpuxSVCSèck
[ 
p‹tSVC_STACK_SIZE
 ];

104 
p‹tSTACK_TYPE
 *
	gpuxFIQSèckPoöãr
 = &(
puxFIQSèck
[ 
p‹tFIQ_STACK_SIZE
 - 1 ] );

105 
p‹tSTACK_TYPE
 *
	gpuxIRQSèckPoöãr
 = &(
puxIRQSèck
[ 
p‹tIRQ_STACK_SIZE
 - 1 ] );

106 
p‹tSTACK_TYPE
 *
	gpuxAb‹tSèckPoöãr
 = &(
puxAb‹tSèck
[ 
p‹tABORT_STACK_SIZE
 - 1 ] );

107 
p‹tSTACK_TYPE
 *
	gpuxSVCSèckPoöãr
 = &(
puxSVCSèck
[ 
p‹tSVC_STACK_SIZE
 - 1 ] );

110 
	gPageTabÀ
[4096] 
__©åibuã__
((
Æig√d
 (16384)));

115 
¥vSëupTimîI¡îru±
( );

120 
	$vP‹tPídSVH™dÀr
–*
pvP¨amëî
 ) 
	`__©åibuã__
((
«ked
));

121 
	`vP‹tSysTickH™dÀr
–*
pvP¨amëî
 );

122 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

123 
	$vP‹tI¡îru±C⁄ãxt
–Ë
	`__©åibuã__
 (–
«ked
 ));

124 
	$vP‹tSMCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

129 
	$vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

132 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–(*
vH™dÀr
)(*), *
pvP¨amëî
, 
ulVe˘‹
, 
ucEdgeTriggîed
, 
ucPri‹ôy
, 
ucPro˚ss‹T¨gës
 );

136 
_ëext
;

137 
_d©a
;

138 
_ed©a
;

139 
_bss
;

140 
_ebss
;

141 
_°ack_t›
;

147 
p‹tSTACK_TYPE
 *
	$pxP‹tInôüli£Sèck
–
p‹tSTACK_TYPE
 *
pxT›OfSèck
, 
pdTASK_CODE
 
pxCode
, *
pvP¨amëîs
 )

149 
p‹tSTACK_TYPE
 *
pxOrigöÆSèck
 = 
pxT›OfSèck
;

151 
pxT›OfSèck
 = (
p‹tSTACK_TYPE
 *)(()’xT›OfSèck)&~
p‹tBYTE_ALIGNMENT_MASK
);

154 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxCode
;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 0;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pxOrigöÆSèck
;

161 
pxT›OfSèck
 -= 12;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 ) 
pvP¨amëîs
;

165  
pxT›OfSèck
;

166 
	}
}

169 
	$vP‹tSVCH™dÀr
( )

171 
__asm
 volatile(

184 
	}
}

187 
	$vP‹tI¡îru±C⁄ãxt
( )

189 
__asm
 volatile(

209 
	}
}

212 
	$vP‹tSèπFú°Task
( )

214 
__asm
 volatile(

218 : : [
pxTCB
] "r" (
pxCuºítTCB
), [
svc•
] "r" (
puxSVCSèckPoöãr
) :

220 
	}
}

223 
	$vP‹tSMCH™dÀr
( )

226 
	}
}

229 
	$vP‹tYõldFromISR
( )

231 
	`vTaskSwôchC⁄ãxt
();

232 
	`p‹tSGI_CLEAR_YIELD
–
p‹tGIC_DISTRIBUTOR_BASE
, 
	`p‹tCORE_ID
() );

233 
	}
}

239 
p‹tBASE_TYPE
 
	$xP‹tSèπScheduÀr
( )

243 
	`¥vSëupTimîI¡îru±
();

246 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–((*)(*))
vP‹tYõldFromISR
, 
NULL
, 
p‹tSGI_YIELD_VECTOR_ID
, 
pdTRUE
, 
c⁄figKERNEL_INTERRUPT_PRIORITY
, 1<<
	`p‹tCORE_ID
() );

249 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICDDCR
(
p‹tGIC_DISTRIBUTOR_BASE
), 0x01UL );

250 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCBPR
(
p‹tGIC_PRIVATE_BASE
), 0x00UL );

251 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCPMR
(
p‹tGIC_PRIVATE_BASE
), 
c⁄figLOWEST_INTERRUPT_PRIORITY
 );

252 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCICR
(
p‹tGIC_PRIVATE_BASE
), 0x01UL );

255 
	`vP‹tSèπFú°Task
();

259 
	}
}

262 
	$vP‹tEndScheduÀr
( )

266 
	}
}

269 
	$vP‹tSysTickH™dÀr
–*
pvP¨amëî
 )

272 *(
p‹tSYSTICK_INTERRUPT_STATUS
) = 0x01UL;

274 
	`vTaskIn¸emítTick
();

276 #i‡
c⁄figUSE_PREEMPTION
 == 1

278 
	`p‹tEND_SWITCHING_ISR
(
pdTRUE
);

280 
	}
}

287 
	$¥vSëupTimîI¡îru±
( )

290 
	`vP‹tIn°ÆlI¡îru±H™dÀr
–
vP‹tSysTickH™dÀr
, 
NULL
, 
p‹tSYSTICK_VECTOR_ID
, 
pdTRUE
, 
c⁄figKERNEL_INTERRUPT_PRIORITY
, 1<<
	`p‹tCORE_ID
() );

293 *(
p‹tSYSTICK_LOAD
Ë(
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

294 *(
p‹tSYSTICK_CONTROL
Ë–
p‹tSYSTICK_PRESCALE
 << 8 ) | 
p‹tSYSTICK_CTRL_ENABLE_PERIODIC_INTERRUPTS
;

296 
	}
}

299 
vP‹tIn°ÆlI¡îru±H™dÀr
–(*
vH™dÀr
)(*), *
pvP¨amëî
, 
ulVe˘‹
, 
ucEdgeTriggîed
, 
ucPri‹ôy
, 
ucPro˚ss‹T¨gës
 )

301 
ulB™k32
 = 4 * ( 
ulVe˘‹
 / 32 );

302 
ulOff£t32
 = 
ulVe˘‹
 % 32;

303 
ulB™k4
 = 4 * ( 
ulVe˘‹
 / 4 );

304 
ulOff£t4
 = 
ulVe˘‹
 % 4;

305 
ulB™k16
 = 4 * ( 
ulVe˘‹
 / 16 );

306 
ulOff£t16
 = 
ulVe˘‹
 % 16;

308 
puxGICDi°ribut‹Addªss
 = 0;

311 i‡–
ulVe˘‹
 < 32 )

314 
puxGICDi°ribut‹Addªss
 = 
p‹tGIC_DISTRIBUTOR_BASE
;

323 i‡(
ulVe˘‹
 < 
ulMaxVe˘‹Id
 )

325 
pxI¡îru±H™dÀrs
[ 
ulVe˘‹
 ].
vH™dÀr
 = vHandler;

326 
pxI¡îru±H™dÀrs
[ 
ulVe˘‹
 ].
pvP¨amëî
 =ÖvParameter;

329 
ulB™k32
 = 4 * ( 
ulVe˘‹
 / 32 );

330 
ulOff£t32
 = 
ulVe˘‹
 % 32;

331 
ulB™k4
 = 4 * ( 
ulVe˘‹
 / 4 );

332 
ulOff£t4
 = 
ulVe˘‹
 % 4;

333 
ulB™k16
 = 4 * ( 
ulVe˘‹
 / 16 );

334 
ulOff£t16
 = 
ulVe˘‹
 % 16;

337 i‡–0 !
ucEdgeTriggîed
 )

339 
	`p‹tGIC_SET
–(
	`p‹tGIC_ICDICR_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k16
Ë), ( 
	`p‹tGIC_READ
’uxGICDi°ribut‹Addªs†+ ulB™k16Ë| ( 0x02 << ( 
ulOff£t16
 * 2 ) ) ) );

343 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICDIPR_BASE
(
puxGICDi°ribut‹Addªss
Ë+ 
ulB™k4
, ( ( ()
ucPri‹ôy
 ) << ( 
ulOff£t4
 * 8 ) ) );

346 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICDIPTR_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k4
), ( ( ()
ucPro˚ss‹T¨gës
 ) << ( 
ulOff£t4
 * 8 ) ) );

349 i‡–
NULL
 !
vH™dÀr
 )

351 
	`p‹tGIC_SET
–
	`p‹tGIC_ICDICPR_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k32
), ( 
	`p‹tGIC_READ
–p‹tGIC_ICDICPR_BASE’uxGICDi°ribut‹Addªs†+ ulB™k32ËË| ( 1 << 
ulOff£t32
 ) ) );

352 
	`p‹tGIC_SET
–
	`p‹tGIC_ICDISER_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k32
), ( 
	`p‹tGIC_READ
–p‹tGIC_ICDISER_BASE’uxGICDi°ribut‹Addªs†+ ulB™k32ËË| ( 1 << 
ulOff£t32
 ) ) );

357 
	`p‹tGIC_CLEAR
–
	`p‹tGIC_ICDICPR_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k32
), ( 
	`p‹tGIC_READ
–p‹tGIC_ICDICPR_BASE’uxGICDi°ribut‹Addªs†+ ulB™k32ËË| ( 1 << 
ulOff£t32
 ) ) );

358 
	`p‹tGIC_CLEAR
–
	`p‹tGIC_ICDISER_BASE
(
puxGICDi°ribut‹Addªss
 + 
ulB™k32
), ( 
	`p‹tGIC_READ
–p‹tGIC_ICDISER_BASE’uxGICDi°ribut‹Addªs†+ ulB™k32ËË| ( 1 << 
ulOff£t32
 ) ) );

361 
	}
}

364 
	$vP‹tGICI¡îru±H™dÀr
( )

366 
ulVe˘‹
 = 0UL;

367 
ulGICBa£Addªss
 = 
p‹tGIC_PRIVATE_BASE
;

370 
ulVe˘‹
 = 
	`p‹tGIC_READ
–
	`p‹tGIC_ICCIAR
(
p‹tGIC_PRIVATE_BASE
) );

372 i‡–––
ulVe˘‹
 & 
p‹tGIC_VECTOR_MASK
 ) < 
ulMaxVe˘‹Id
 ) && ( 
NULL
 !
pxI¡îru±H™dÀrs
[ ( ulVe˘‹ &Ö‹tGIC_VECTOR_MASK ) ].
vH™dÀr
 ) )

375 
pxI¡îru±H™dÀrs
[ ( 
ulVe˘‹
 & 
p‹tGIC_VECTOR_MASK
 ) ].
	`vH™dÀr
–pxI¡îru±H™dÀrs[ ( ulVe˘‹ &Ö‹tGIC_VECTOR_MASK ) ].
pvP¨amëî
 );

377 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCEOIR
(
ulGICBa£Addªss
), 
ulVe˘‹
 );

383 
	}
}

386 
p‹tBASE_TYPE
 
	$xP‹tSëI¡îru±Mask
( )

388 
p‹tBASE_TYPE
 
xPri‹ôyMask
 = 
	`p‹tGIC_READ
–
	`p‹tGIC_ICCPMR
(
p‹tGIC_PRIVATE_BASE
) );

389 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCPMR
(
p‹tGIC_PRIVATE_BASE
), 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

390  
xPri‹ôyMask
;

391 
	}
}

394 
	$vP‹tCÀ¨I¡îru±Mask
–
p‹tBASE_TYPE
 
xPri‹ôyMask
 )

396 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICCPMR
(
p‹tGIC_PRIVATE_BASE
), 
xPri‹ôyMask
 );

397 
	}
}

400 
	$vP‹tUnknownI¡îru±H™dÀr
–*
pvP¨amëî
 )

403 ()
pvP¨amëî
;

404 
	}
}

408 
	$RódSCTLR
()

410 
SCTLR
;

411 
__asm
 volatile("mrcÖ15, 0, %[sctlr], c1, c0, 0"

412 :[
s˘Ã
] "Ù" (
SCTLR
)::);

413  
SCTLR
;

414 
	}
}

416 
	$WrôeSCTLR
(
SCTLR
)

418 
__asm
 volatile("mcrÖ15, 0, %[sctlr], c1, c0, 0"

419 ::[
s˘Ã
] "r" (
SCTLR
):);

420 
	}
}

422 
	$RódACTLR
()

424 
ACTLR
;

425 
__asm
 volatile("mrcÖ15, 0, %[actlr], c1, c0, 1"

426 :[
a˘Ã
] "Ù" (
ACTLR
)::);

427  
ACTLR
;

428 
	}
}

430 
	$WrôeACTLR
(
ACTLR
)

432 
__asm
 volatile("mcrÖ15, 0, %[actlr], c1, c0, 0"

433 ::[
a˘Ã
] "r" (
ACTLR
):);

434 
	}
}

436 
	$_öô
()

438 
	`maö
( );

439 
i
;

440 *
pulSrc
, *
pulDe°
;

441 vﬁ©ûê
ulSCTLR
 = 0UL;

442 
__i§_ve˘‹_°¨t
;

443 
__i§_ve˘‹_íd
;

444 
_bss
;

445 
_ebss
;

448 
pulDe°
 = &
_bss
;ÖulDe° < &
_ebss
; )

450 *
pulDe°
++ = 0;

454 
__asm
 volatile (

475 : : [
fiq•
] "r" (
puxFIQSèckPoöãr
),

476 [
úq•
] "r" (
puxIRQSèckPoöãr
),

477 [
abt•
] "r" (
puxAb‹tSèckPoöãr
),

478 [
svc•
] "r" (
puxSVCSèckPoöãr
)

482 
pulSrc
 = (*)&
__i§_ve˘‹_°¨t
;

483 
pulDe°
 = (*)
p‹tEXCEPTION_VECTORS_BASE
;

484  
pulSrc
 = &
__i§_ve˘‹_°¨t
;ÖulSr¯< &
__i§_ve˘‹_íd
; )

486 *
pulDe°
++ = *
pulSrc
++;

490 
pulDe°
 = (*)
p‹tEXCEPTION_VECTORS_BASE
;

491 
__asm
 volatile(

493 : : [
vb¨
] "r" (
pulDe°
) :

497 
ulSCTLR
=
	`RódSCTLR
();

498 
ulSCTLR
&=~(1<<13);

499 
	`WrôeSCTLR
(
ulSCTLR
);

502 
	`WrôeSCTLR
(
	`RódSCTLR
()|(1<<11));

505 
	`WrôeACTLR
(
	`RódACTLR
()|(1<<2));

508 
i
=0;i<64;i++)

510 
PageTabÀ
[
i
]=(i<<20)|0x05de6;

513 
i
=64;i<4096;i++)

515 
PageTabÀ
[
i
]=(i<<20)|0x0de2;

523 
__asm
 volatile (

527 : : [
âb¸
] "r" (0),

528 [
âbr0
] "r" (
PageTabÀ
),

529 [
da¸
] "r" (0x55555555)

533 
	`WrôeSCTLR
(
	`RódSCTLR
()|(1<<0));

536 
	`WrôeSCTLR
(
	`RódSCTLR
()|(1<<2)|(1<<12));

538 
	`maö
();

539 
	}
}

542 
	$Undeföed_H™dÀr_P™ic
( )

544 
__asm
 volatile ( " smc #0 " );

546 
	}
}

549 
	$Pª„tch_H™dÀr_P™ic
( )

551 
__asm
 volatile ( " smc #0 " );

553 
	}
}

556 
	$Ab‹t_H™dÀr_P™ic
( )

559 
	}
}

	@Source/portable/GCC/ARM_Cortex-A9/portmacro.h

62 #i‚de‡
PORTMACRO_H


63 
	#PORTMACRO_H


	)

65 #ifde‡
__˝lu•lus


80 
	#p‹tCHAR
 

	)

81 
	#p‹tFLOAT
 

	)

82 
	#p‹tDOUBLE
 

	)

83 
	#p‹tLONG
 

	)

84 
	#p‹tSHORT
 

	)

85 
	#p‹tSTACK_TYPE
 
p‹tLONG


	)

86 
	#p‹tBASE_TYPE
 

	)

88 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

89 
	tp‹tSHORT
 
	tp‹tTickTy≥
;

90 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffff

	)

92 
	tp‹tLONG
 
	tp‹tTickTy≥
;

93 
	#p‹tMAX_DELAY
 ( 
p‹tTickTy≥
 ) 0xffffffff

	)

98 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

99 
	#p‹tTICK_RATE_MS
 ( ( 
p‹tTickTy≥
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

100 
	#p‹tBYTE_ALIGNMENT
 8

	)

101 
	#p‹tHEAP_END
 ( ( (* )&
_d©a
 + ()
c⁄figTOTAL_HEAP_SIZE
 ) )

	)

105 
vTaskE¡îCrôiˇl
();

106 
vTaskExôCrôiˇl
();

107 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

108 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

109 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

111 
p‹tBASE_TYPE
 
xP‹tSëI¡îru±Mask
();

112 
vP‹tCÀ¨I¡îru±Mask
(
p‹tBASE_TYPE
);

113 
	#p‹tSET_INTERRUPT_MASK
(Ë
	`xP‹tSëI¡îru±Mask
()

	)

114 
	#p‹tCLEAR_INTERRUPT_MASK
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

115 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

116 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tCLEAR_INTERRUPT_MASK
(x)

	)

117 
	#p‹tDISABLE_INTERRUPTS
(Ë(()
	`p‹tSET_INTERRUPT_MASK
())

	)

118 
ölöe
 
p‹tENABLE_INTERRUPTS
()

120 
p‹tCLEAR_INTERRUPT_MASK
(
c⁄figLOWEST_INTERRUPT_PRIORITY
);

121 
__asm__
 
__vﬁ©ûe__
 ( "nop" );

127 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

128 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

130 
	#p‹tNOP
()

	)

132 
ölöe
 
p‹tCORE_ID
()

134 
	gvÆ
;

135 
__asm
(" mr¯p15,0,%[vÆ],c0,c0,5\n":[
vÆ
] "=r" (val)::);

136  
	gvÆ
&3;

141 
	#p‹tPERIPHBASE
 ( 0x1E000000 )

	)

142 
	#p‹tGIC_PRIVATE_BASE
 ( 
p‹tPERIPHBASE
 + 0x100UL )

	)

143 
	#p‹tGIC_DISTRIBUTOR_BASE
 ( 
p‹tPERIPHBASE
 + 0x1000UL )

	)

144 
	#p‹tEXCEPTION_VECTORS_BASE
 ( 
	`p‹tCORE_ID
()*0x1000000 )

	)

145 
	#p‹tMAX_VECTORS
 ( 32UL )

	)

149 
	#p‹tSCU_BASE
 ( 
p‹tPERIPHBASE
 + 0x00UL )

	)

150 
	#p‹tSCU_CONTROL
 ( ( vﬁ©ûê* ) ( 
p‹tSCU_BASE
 + 0x00UL ) )

	)

151 
	#p‹tSCU_CONFIGURATION
 ( ( vﬁ©ûê* ) ( 
p‹tSCU_BASE
 + 0x04UL ) )

	)

154 
	#p‹tGIC_ICCICR
(
x
Ë–(()(x)Ë+ 0x00UL )

	)

155 
	#p‹tGIC_ICCPMR
(
x
Ë–(()(x)Ë+ 0x04UL )

	)

156 
	#p‹tGIC_ICCBPR
(
x
Ë–(()(x)Ë+ 0x08UL )

	)

157 
	#p‹tGIC_ICCIAR
(
x
Ë–(()(x)Ë+ 0x0CUL )

	)

158 
	#p‹tGIC_ICCEOIR
(
x
Ë–(()(x)Ë+ 0x10UL )

	)

159 
	#p‹tGIC_ICCRPR
(
x
Ë–(()(x)Ë+ 0x14UL )

	)

160 
	#p‹tGIC_ICCHPIR
(
x
Ë–(()(x)Ë+ 0x18UL )

	)

163 
	#p‹tGIC_ICDDCR
(
x
Ë–(()(x)Ë+ 0x00UL )

	)

164 
	#p‹tGIC_ICDICTR
(
x
Ë–(()(x)Ë+ 0x04UL )

	)

165 
	#p‹tGIC_ICDISER_BASE
(
x
Ë–(()(x)Ë+ 0x100UL )

	)

166 
	#p‹tGIC_ICDICER_BASE
(
x
Ë–(()(x)Ë+ 0x180UL )

	)

167 
	#p‹tGIC_ICDISPR_BASE
(
x
Ë–(()(x)Ë+ 0x200UL )

	)

168 
	#p‹tGIC_ICDICPR_BASE
(
x
Ë–(()(x)Ë+ 0x280UL )

	)

169 
	#p‹tGIC_ICDABR_BASE
(
x
Ë–(()(x)Ë+ 0x300UL )

	)

170 
	#p‹tGIC_ICDIPR_BASE
(
x
Ë–(()(x)Ë+ 0x400UL )

	)

171 
	#p‹tGIC_ICDIPTR_BASE
(
x
Ë–(()(x)Ë+ 0x800UL )

	)

172 
	#p‹tGIC_ICDICR_BASE
(
x
Ë–(()(x)Ë+ 0xC00UL )

	)

173 
	#p‹tGIC_ICDPPIS
(
x
Ë–(()(x)Ë+ 0xD00UL )

	)

174 
	#p‹tGIC_ICDSPIS_BASE
(
x
Ë–(()(x)Ë+ 0xD04UL )

	)

175 
	#p‹tGIC_ICDSGIR
(
x
Ë–(()(x)Ë+ 0xF00UL )

	)

176 
	#p‹tGIC_ICDCPENDGIR
(
x
Ë–(()(x)Ë+ 0xF10UL )

	)

177 
	#p‹tGIC_ICDSPENDGIR
(
x
Ë–(()(x)Ë+ 0xF20UL )

	)

180 
	#p‹tGIC_WRITE
(
addªss
,
vÆue
Ë–*––* vﬁ©ûê)–addªs†ËË–vÆuêË)

	)

181 
	#p‹tGIC_SET
(
addªss
,
vÆue
Ë–*––* vﬁ©ûê)–addªs†ËË|–vÆuêË)

	)

182 
	#p‹tGIC_READ
(
addªss
Ë–*––* vﬁ©ûê)–addªs†ËË)

	)

183 
	#p‹tGIC_CLEAR
(
addªss
,
vÆue
Ë–*––* vﬁ©ûê)–addªs†ËË&~–vÆuêË)

	)

186 
	#p‹tGIC_CONTROL_ENABLE_INTERRUPTS
 ( 0x01UL )

	)

187 
	#p‹tGIC_CONTROL_DISABLE_INTERRUPTS
 ( 0x00UL )

	)

188 
	#p‹tGIC_PRIORITY_MASK_MASK
 ( 0xF0UL )

	)

189 
	#p‹tGIC_SPURIOUS_VECTOR
 ( 1023 )

	)

190 
	#p‹tGIC_CPU_INTERRUPT_SOURCE_MASK
 ( 0x1C00UL )

	)

191 
	#p‹tGIC_VECTOR_MASK
 ( 0x3FFUL )

	)

194 
	#p‹tSYSTICK_BASE
 ( 
p‹tPERIPHBASE
 + 0x600 )

	)

195 
	#p‹tSYSTICK_LOAD
 ( ( vﬁ©ûê* ) ( 
p‹tSYSTICK_BASE
 + 0x00 ) )

	)

196 
	#p‹tSYSTICK_CONTROL
 ( ( vﬁ©ûê* ) ( 
p‹tSYSTICK_BASE
 + 0x08 ) )

	)

197 
	#p‹tSYSTICK_INTERRUPT_STATUS
 ( ( vﬁ©ûê* ) ( 
p‹tSYSTICK_BASE
 + 0x0C ) )

	)

198 
	#p‹tSYSTICK_CTRL_ENABLE_PERIODIC_INTERRUPTS
 ( 0x00000007 )

	)

199 
	#p‹tSYSTICK_PRESCALE
 ( 99 )

	)

200 
	#p‹tSYSTICK_VECTOR_ID
 ( 29 )

	)

203 
	#p‹tSGI_YIELD_VECTOR_ID
 ( 1 )

	)

204 
	#p‹tSGI_YIELD
–
xCPUID
 ) ( ( 0 << 24 ) | ( ( 1 << 16 ) << ( xCPUID ) ) | 
p‹tSGI_YIELD_VECTOR_ID
 )

	)

206 
ölöe
 
p‹tYIELD
()

208 if––
p‹tGIC_READ
–
p‹tGIC_ICDISPR_BASE
–
p‹tGIC_DISTRIBUTOR_BASE
 ) ) & 
	gp‹tSGI_YIELD_VECTOR_ID
 ) == 0UL)

210 
p‹tGIC_WRITE
–
p‹tGIC_ICDSGIR
–
p‹tGIC_DISTRIBUTOR_BASE
 ), 
p‹tSGI_YIELD
–
p‹tCORE_ID
() ) );

211 
__asm__
 
__vﬁ©ûe__
 ( "nop" );

214 
	#p‹tSGI_CLEAR_YIELD
–
pxDi°ribut‹Ba£
, 
xCPUID
 ) 
	`p‹tGIC_WRITE
–
	`p‹tGIC_ICDICPR_BASE
–pxDi°ribut‹Ba£ ), 
p‹tSGI_YIELD_VECTOR_ID
 )

	)

215 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) ( (xSwôchRequúedË? 
	`p‹tYIELD
(Ë: ()xSwôchRequúed )

	)

218 
	#p‹tPROCESSOR_MODE_MASK
 ( ~(0x1FULË)

	)

219 
	#p‹tUSER_MODE
 ( 0x10UL )

	)

220 
	#p‹tFIQ_MODE
 ( 0x11UL )

	)

221 
	#p‹tIRQ_MODE
 ( 0x12UL )

	)

222 
	#p‹tSVC_MODE
 ( 0x13UL )

	)

223 
	#p‹tMON_MODE
 ( 0x16UL )

	)

224 
	#p‹tABT_MODE
 ( 0x17UL )

	)

225 
	#p‹tUND_MODE
 ( 0x1BUL )

	)

226 
	#p‹tSYS_MODE
 ( 0x1FUL )

	)

229 
	#p‹tFIQ_STACK_SIZE
 ( 256 )

	)

230 
	#p‹tIRQ_STACK_SIZE
 ( 256 )

	)

231 
	#p‹tABORT_STACK_SIZE
 ( 256 )

	)

232 
	#p‹tSVC_STACK_SIZE
 ( 256 )

	)

234 #ifde‡
__˝lu•lus


	@Source/portable/MemMang/heap_1.c

62 
	~<°dlib.h
>

67 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

69 
	~"FªeRTOS.h
"

70 
	~"èsk.h
"

72 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


76 
	uxRTOS_HEAP


78 #i‡
p‹tBYTE_ALIGNMENT
 == 8

79 vﬁ©ûê
p‹tDOUBLE
 
	mdDummy
;

81 vﬁ©ûê
	mulDummy
;

83 
	mucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

84 } 
	gxHóp
;

86 
size_t
 
	gxNextFªeByã
 = ( size_t ) 0;

89 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

91 *
pvRëu∫
 = 
NULL
;

94 #i‡
p‹tBYTE_ALIGNMENT
 != 1

95 if–
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 )

98 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

102 
	`vTaskSu•ídAŒ
();

105 if–––
xNextFªeByã
 + 
xW™ãdSize
 ) < 
c⁄figTOTAL_HEAP_SIZE
 ) &&

106 ––
xNextFªeByã
 + 
xW™ãdSize
 ) > xNextFreeByte ) )

110 
pvRëu∫
 = &–
xHóp
.
ucHóp
[ 
xNextFªeByã
 ] );

111 
xNextFªeByã
 +
xW™ãdSize
;

114 
	`xTaskResumeAŒ
();

116 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

118 if–
pvRëu∫
 =
NULL
 )

120 
	`vAµliˇti⁄MÆlocFaûedHook
( );

121 
	`vAµliˇti⁄MÆlocFaûedHook
();

126  
pvRëu∫
;

127 
	}
}

130 
	$vP‹tFªe
–*
pv
 )

135 –Ë
pv
;

136 
	}
}

139 
	$vP‹tInôüli£Blocks
( )

142 
xNextFªeByã
 = ( 
size_t
 ) 0;

143 
	}
}

146 
size_t
 
	$xP‹tGëFªeHópSize
( )

148  ( 
c⁄figTOTAL_HEAP_SIZE
 - 
xNextFªeByã
 );

149 
	}
}

	@Source/portable/MemMang/heap_2.c

62 
	~<°dlib.h
>

67 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

69 
	~"FªeRTOS.h
"

70 
	~"èsk.h
"

72 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


76 
	uxRTOS_HEAP


78 #i‡
p‹tBYTE_ALIGNMENT
 == 8

79 vﬁ©ûê
p‹tDOUBLE
 
	mdDummy
;

81 vﬁ©ûê
	mulDummy
;

83 
	mucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

84 } 
	gxHóp
;

88 
	sA_BLOCK_LINK


90 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

91 
size_t
 
	mxBlockSize
;

92 } 
	txBlockLök
;

95 c⁄° 
	ghópSTRUCT_SIZE
 = ( –
xBlockLök
 ) + 
p‹tBYTE_ALIGNMENT
 - ( ( xBlockLink ) %ÖortBYTE_ALIGNMENT ) );

96 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
hópSTRUCT_SIZE
 * 2 ) )

	)

99 
xBlockLök
 
	gxSèπ
, 
	gxEnd
;

103 
size_t
 
	gxFªeByãsRemaöög
 = 
c⁄figTOTAL_HEAP_SIZE
;

112 
	#¥vIn£πBlockI¡oFªeLi°
–
pxBlockToIn£π
 ) \

	)

114 
xBlockLök
 *
	gpxIãøt‹
; \

115 
size_t
 
	gxBlockSize
; \

117 
	gxBlockSize
 = 
pxBlockToIn£π
->
xBlockSize
; \

121  
	gpxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
	gpxNextFªeBlock
->
	gxBlockSize
 < xBlockSize;ÖxIãøt‹ = 
pxIãøt‹
->
pxNextFªeBlock
 ) \

128 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock; \

129 
	gpxIãøt‹
->
	gpxNextFªeBlock
 = 
pxBlockToIn£π
; \

133 
	#¥vHópInô
(Ë\

	)

135 
xBlockLök
 *
	gpxFú°FªeBlock
; \

139 
	gxSèπ
.
	gpxNextFªeBlock
 = ( * ) 
xHóp
.
ucHóp
; \

140 
	gxSèπ
.
	gxBlockSize
 = ( 
size_t
 ) 0; \

143 
	gxEnd
.
	gxBlockSize
 = 
c⁄figTOTAL_HEAP_SIZE
; \

144 
	gxEnd
.
	gpxNextFªeBlock
 = 
NULL
; \

148 
	gpxFú°FªeBlock
 = ( * ) 
xHóp
.
ucHóp
; \

149 
	gpxFú°FªeBlock
->
	gxBlockSize
 = 
c⁄figTOTAL_HEAP_SIZE
; \

150 
	gpxFú°FªeBlock
->
	gpxNextFªeBlock
 = &
xEnd
; \

154 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

156 
xBlockLök
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

157 
p‹tBASE_TYPE
 
xHópHasBìnInôüli£d
 = 
pdFALSE
;

158 *
pvRëu∫
 = 
NULL
;

160 
	`vTaskSu•ídAŒ
();

164 if–
xHópHasBìnInôüli£d
 =
pdFALSE
 )

166 
	`¥vHópInô
();

167 
xHópHasBìnInôüli£d
 = 
pdTRUE
;

172 if–
xW™ãdSize
 > 0 )

174 
xW™ãdSize
 +
hópSTRUCT_SIZE
;

177 if–
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 )

180 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

184 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê< 
c⁄figTOTAL_HEAP_SIZE
 ) )

188 
pxPªviousBlock
 = &
xSèπ
;

189 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

190  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 ) )

192 
pxPªviousBlock
 = 
pxBlock
;

193 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

197 if–
pxBlock
 !&
xEnd
 )

201 
pvRëu∫
 = ( * ) ( ( ( * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
hópSTRUCT_SIZE
 );

205 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

208 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

213 
pxNewBlockLök
 = ( * ) ( ( ( * ) 
pxBlock
 ) + 
xW™ãdSize
 );

217 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

218 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

221 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

224 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

228 
	`xTaskResumeAŒ
();

230 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

232 if–
pvRëu∫
 =
NULL
 )

234 
	`vAµliˇti⁄MÆlocFaûedHook
( );

235 
	`vAµliˇti⁄MÆlocFaûedHook
();

240  
pvRëu∫
;

241 
	}
}

244 
	$vP‹tFªe
–*
pv
 )

246 *
puc
 = ( * ) 
pv
;

247 
xBlockLök
 *
pxLök
;

249 if–
pv
 )

253 
puc
 -
hópSTRUCT_SIZE
;

256 
pxLök
 = ( * ) 
puc
;

258 
	`vTaskSu•ídAŒ
();

261 
	`¥vIn£πBlockI¡oFªeLi°
–––
xBlockLök
 * ) 
pxLök
 ) );

262 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

264 
	`xTaskResumeAŒ
();

266 
	}
}

269 
size_t
 
	$xP‹tGëFªeHópSize
( )

271  
xFªeByãsRemaöög
;

272 
	}
}

275 
	$vP‹tInôüli£Blocks
( )

278 
	}
}

	@Source/portable/MemMang/heap_3.c

66 
	~<°dlib.h
>

71 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

73 
	~"FªeRTOS.h
"

74 
	~"èsk.h
"

76 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


80 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

82 *
pvRëu∫
;

84 
	`vTaskSu•ídAŒ
();

86 
pvRëu∫
 = 
	`mÆloc
–
xW™ãdSize
 );

88 
	`xTaskResumeAŒ
();

90 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

92 if–
pvRëu∫
 =
NULL
 )

94 
	`vAµliˇti⁄MÆlocFaûedHook
( );

95 
	`vAµliˇti⁄MÆlocFaûedHook
();

100  
pvRëu∫
;

101 
	}
}

104 
	$vP‹tFªe
–*
pv
 )

106 if–
pv
 )

108 
	`vTaskSu•ídAŒ
();

110 
	`‰ì
–
pv
 );

112 
	`xTaskResumeAŒ
();

114 
	}
}

	@Source/queue.c

54 
	~<°dlib.h
>

55 
	~<°rög.h
>

60 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

62 
	~"FªeRTOS.h
"

63 
	~"èsk.h
"

65 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

66 
	~"¸outöe.h
"

69 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


76 
	#queueUNLOCKED
 ( ( sig√d 
p‹tBASE_TYPE
 ) -1 )

	)

77 
	#queueLOCKED_UNMODIFIED
 ( ( sig√d 
p‹tBASE_TYPE
 ) 0 )

	)

79 
	#queueERRONEOUS_UNBLOCK
 ( -1 )

	)

82 
	#queueSEND_TO_BACK
 ( 0 )

	)

83 
	#queueSEND_TO_FRONT
 ( 1 )

	)

86 
	#pxMuãxHﬁdî
 
pcTaû


	)

87 
	#uxQueueTy≥
 
pcHód


	)

88 
	#uxRecursiveCÆlCou¡
 
pcRódFrom


	)

89 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

93 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
p‹tBASE_TYPE
 ) 0 )

	)

94 
	#queueDONT_BLOCK
 ( ( 
p‹tTickTy≥
 ) 0U )

	)

95 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
p‹tTickTy≥
 ) 0U )

	)

98 
	#queueQUEUE_TYPE_BASE
 ( 0U )

	)

99 
	#queueQUEUE_TYPE_MUTEX
 ( 1U )

	)

100 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( 2U )

	)

101 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( 3U )

	)

102 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( 4U )

	)

108 
	sQueueDeföôi⁄


110 sig√d *
	mpcHód
;

111 sig√d *
	mpcTaû
;

113 sig√d *
	mpcWrôeTo
;

114 sig√d *
	mpcRódFrom
;

116 
xLi°
 
	mxTasksWaôögToSíd
;

117 
xLi°
 
	mxTasksWaôögToRe˚ive
;

119 vﬁ©ûê
p‹tBASE_TYPE
 
	muxMesßgesWaôög
;

120 
p‹tBASE_TYPE
 
	muxLígth
;

121 
p‹tBASE_TYPE
 
	muxIãmSize
;

123 sig√d 
p‹tBASE_TYPE
 
	mxRxLock
;

124 sig√d 
p‹tBASE_TYPE
 
	mxTxLock
;

126 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

127 
	mucQueueNumbî
;

128 
	mucQueueTy≥
;

131 } 
	txQUEUE
;

139 
xQUEUE
 * 
	txQueueH™dÀ
;

146 
xQueueH™dÀ
 
	$xQueueGíîicCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
, 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

147 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSíd
–
xQueueH™dÀ
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

148 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

149 
	$vQueueDñëe
–
xQueueH™dÀ
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

150 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 *
pxHighîPri‹ôyTaskWokí
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

151 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 ) 
PRIVILEGED_FUNCTION
;

152 sig√d 
p‹tBASE_TYPE
 
	$xQueueRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

153 
xQueueH™dÀ
 
	$xQueueCª©eMuãx
–
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

154 
xQueueH™dÀ
 
	$xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 ) 
PRIVILEGED_FUNCTION
;

155 
p‹tBASE_TYPE
 
	$xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
, 
p‹tTickTy≥
 
xBlockTime
 ) 
PRIVILEGED_FUNCTION
;

156 
p‹tBASE_TYPE
 
	$xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
xMuãx
 ) 
PRIVILEGED_FUNCTION
;

157 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

158 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 ) 
PRIVILEGED_FUNCTION
;

159 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

160 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

161 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

162 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
xQueueH™dÀ
 
pxQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

163 
	$ucQueueGëQueueNumbî
–
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

164 
	$vQueueSëQueueNumbî
–
xQueueH™dÀ
 
pxQueue
, 
ucQueueNumbî
 ) 
PRIVILEGED_FUNCTION
;

165 
	$ucQueueGëQueueTy≥
–
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

171 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

172 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 
xCoRoutöePªviou¶yWokí
 ) 
PRIVILEGED_FUNCTION
;

173 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

174 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

175 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚ive
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

182 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

187 
	sQUEUE_REGISTRY_ITEM


189 sig√d *
pcQueueName
;

190 
xQueueH™dÀ
 
xH™dÀ
;

191 } 
	txQueueRegi°ryIãm
;

196 
xQueueRegi°ryIãm
 
xQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

200 
	$vQueueUƒegi°îQueue
–
xQueueH™dÀ
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

201 
	$vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcQueueName
 ) 
PRIVILEGED_FUNCTION
;

212 
	$¥vU∆ockQueue
–
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

219 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueEm±y
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

226 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueFuŒ
–c⁄° 
xQueueH™dÀ
 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

232 
	$¥vC›yD©aToQueue
–
xQUEUE
 *
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tBASE_TYPE
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

237 
	$¥vC›yD©aFromQueue
–
xQUEUE
 * c⁄° 
pxQueue
, c⁄° *
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

244 
	#¥vLockQueue
–
pxQueue
 ) \

	)

245 
	`èskENTER_CRITICAL
(); \

247 if––
pxQueue
 )->
xRxLock
 =
queueUNLOCKED
 ) \

249 –
pxQueue
 )->
xRxLock
 = 
queueLOCKED_UNMODIFIED
; \

251 if––
pxQueue
 )->
xTxLock
 =
queueUNLOCKED
 ) \

253 –
pxQueue
 )->
xTxLock
 = 
queueLOCKED_UNMODIFIED
; \

255 
	}
} \

256 
	$èskEXIT_CRITICAL
()

264 
xQueueH™dÀ
 
	$xQueueGíîicCª©e
–
p‹tBASE_TYPE
 
uxQueueLígth
, p‹tBASE_TYPE 
uxIãmSize
, 
ucQueueTy≥
 )

266 
xQUEUE
 *
pxNewQueue
;

267 
size_t
 
xQueueSizeInByãs
;

268 
xQueueH™dÀ
 
xRëu∫
 = 
NULL
;

272 –Ë
ucQueueTy≥
;

275 if–
uxQueueLígth
 > ( 
p‹tBASE_TYPE
 ) 0 )

277 
pxNewQueue
 = ( 
xQUEUE
 * ) 
	`pvP‹tMÆloc
( ( xQUEUE ) );

278 if–
pxNewQueue
 !
NULL
 )

282 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 ) + ( size_t ) 1;

284 
pxNewQueue
->
pcHód
 = ( sig√d * ) 
	`pvP‹tMÆloc
–
xQueueSizeInByãs
 );

285 if–
pxNewQueue
->
pcHód
 !
NULL
 )

289 
pxNewQueue
->
pcTaû
 =ÖxNewQueue->
pcHód
 + ( 
uxQueueLígth
 * 
uxIãmSize
 );

290 
pxNewQueue
->
uxMesßgesWaôög
 = ( 
p‹tBASE_TYPE
 ) 0U;

291 
pxNewQueue
->
pcWrôeTo
 =ÖxNewQueue->
pcHód
;

292 
pxNewQueue
->
pcRódFrom
 =ÖxNewQueue->
pcHód
 + ( ( 
uxQueueLígth
 - ( 
p‹tBASE_TYPE
 ) 1U ) * 
uxIãmSize
 );

293 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

294 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

295 
pxNewQueue
->
xRxLock
 = 
queueUNLOCKED
;

296 
pxNewQueue
->
xTxLock
 = 
queueUNLOCKED
;

297 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

299 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

304 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToSíd
 ) );

305 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToRe˚ive
 ) );

307 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

308 
xRëu∫
 = 
pxNewQueue
;

312 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

313 
	`vP‹tFªe
–
pxNewQueue
 );

318 
	`c⁄figASSERT
–
xRëu∫
 );

320  
xRëu∫
;

321 
	}
}

324 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

326 
xQueueH™dÀ
 
	$xQueueCª©eMuãx
–
ucQueueTy≥
 )

328 
xQUEUE
 *
pxNewQueue
;

332 –Ë
ucQueueTy≥
;

335 
pxNewQueue
 = ( 
xQUEUE
 * ) 
	`pvP‹tMÆloc
( ( xQUEUE ) );

336 if–
pxNewQueue
 !
NULL
 )

339 
pxNewQueue
->
pxMuãxHﬁdî
 = 
NULL
;

340 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

344 
pxNewQueue
->
pcWrôeTo
 = 
NULL
;

345 
pxNewQueue
->
pcRódFrom
 = 
NULL
;

350 
pxNewQueue
->
uxMesßgesWaôög
 = ( 
p‹tBASE_TYPE
 ) 0U;

351 
pxNewQueue
->
uxLígth
 = ( 
p‹tBASE_TYPE
 ) 1U;

352 
pxNewQueue
->
uxIãmSize
 = ( 
p‹tBASE_TYPE
 ) 0U;

353 
pxNewQueue
->
xRxLock
 = 
queueUNLOCKED
;

354 
pxNewQueue
->
xTxLock
 = 
queueUNLOCKED
;

356 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

358 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

363 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToSíd
 ) );

364 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToRe˚ive
 ) );

366 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

369 
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
p‹tTickTy≥
 ) 0U, 
queueSEND_TO_BACK
 );

373 
	`åa˚CREATE_MUTEX_FAILED
();

376 
	`c⁄figASSERT
–
pxNewQueue
 );

377  
pxNewQueue
;

378 
	}
}

383 #i‡
c⁄figUSE_RECURSIVE_MUTEXES
 == 1

385 
p‹tBASE_TYPE
 
	$xQueueGiveMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
 )

387 
p‹tBASE_TYPE
 
xRëu∫
;

389 
	`c⁄figASSERT
–
pxMuãx
 );

397 if–
pxMuãx
->
pxMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

399 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

406 –
pxMuãx
->
uxRecursiveCÆlCou¡
 )--;

409 if–
pxMuãx
->
uxRecursiveCÆlCou¡
 == 0 )

413 
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

416 
xRëu∫
 = 
pdPASS
;

421 
xRëu∫
 = 
pdFAIL
;

423 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

426  
xRëu∫
;

427 
	}
}

432 #i‡
c⁄figUSE_RECURSIVE_MUTEXES
 == 1

434 
p‹tBASE_TYPE
 
	$xQueueTakeMuãxRecursive
–
xQueueH™dÀ
 
pxMuãx
, 
p‹tTickTy≥
 
xBlockTime
 )

436 
p‹tBASE_TYPE
 
xRëu∫
;

438 
	`c⁄figASSERT
–
pxMuãx
 );

443 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

445 if–
pxMuãx
->
pxMuãxHﬁdî
 =
	`xTaskGëCuºítTaskH™dÀ
() )

447 –
pxMuãx
->
uxRecursiveCÆlCou¡
 )++;

448 
xRëu∫
 = 
pdPASS
;

452 
xRëu∫
 = 
	`xQueueGíîicRe˚ive
–
pxMuãx
, 
NULL
, 
xBlockTime
, 
pdFALSE
 );

456 if–
xRëu∫
 =
pdPASS
 )

458 –
pxMuãx
->
uxRecursiveCÆlCou¡
 )++;

462 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

466  
xRëu∫
;

467 
	}
}

472 #i‡
c⁄figUSE_COUNTING_SEMAPHORES
 == 1

474 
xQueueH™dÀ
 
	$xQueueCª©eCou¡ögSem≠h‹e
–
p‹tBASE_TYPE
 
uxCou¡VÆue
, p‹tBASE_TYPE 
uxInôülCou¡
 )

476 
xQueueH™dÀ
 
pxH™dÀ
;

478 
pxH™dÀ
 = 
	`xQueueGíîicCª©e
––
p‹tBASE_TYPE
 ) 
uxCou¡VÆue
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

480 if–
pxH™dÀ
 !
NULL
 )

482 
pxH™dÀ
->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

484 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

488 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

491 
	`c⁄figASSERT
–
pxH™dÀ
 );

492  
pxH™dÀ
;

493 
	}
}

498 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 )

500 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

501 
xTimeOutTy≥
 
xTimeOut
;

503 
	`c⁄figASSERT
–
pxQueue
 );

504 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

511 
	`èskENTER_CRITICAL
();

515 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

517 
	`åa˚QUEUE_SEND
–
pxQueue
 );

518 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

522 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

524 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

530 
	`p‹tYIELD_WITHIN_API
();

534 
	`èskEXIT_CRITICAL
();

538  
pdPASS
;

542 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

546 
	`èskEXIT_CRITICAL
();

550 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

551  
îrQUEUE_FULL
;

553 if–
xE¡ryTimeSë
 =
pdFALSE
 )

557 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

558 
xE¡ryTimeSë
 = 
pdTRUE
;

562 
	`èskEXIT_CRITICAL
();

567 
	`vTaskSu•ídAŒ
();

568 
	`¥vLockQueue
–
pxQueue
 );

571 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

573 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

575 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

576 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

583 
	`¥vU∆ockQueue
–
pxQueue
 );

590 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

592 
	`p‹tYIELD_WITHIN_API
();

598 
	`¥vU∆ockQueue
–
pxQueue
 );

599 –Ë
	`xTaskResumeAŒ
();

605 
	`¥vU∆ockQueue
–
pxQueue
 );

606 –Ë
	`xTaskResumeAŒ
();

610 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

611  
îrQUEUE_FULL
;

614 
	}
}

617 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

619 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xC›yPosôi⁄
 )

621 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

622 
xTimeOutTy≥
 
xTimeOut
;

624 
	`c⁄figASSERT
–
pxQueue
 );

625 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

629 
	`èskENTER_CRITICAL
();

633 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

635 
	`åa˚QUEUE_SEND
–
pxQueue
 );

636 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

640 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

642 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

646 
	`p‹tYIELD_WITHIN_API
();

650 
	`èskEXIT_CRITICAL
();

651  
pdPASS
;

655 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

657 
	`èskEXIT_CRITICAL
();

658  
îrQUEUE_FULL
;

660 if–
xE¡ryTimeSë
 =
pdFALSE
 )

662 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

663 
xE¡ryTimeSë
 = 
pdTRUE
;

667 
	`èskEXIT_CRITICAL
();

669 
	`èskENTER_CRITICAL
();

671 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

673 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

675 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

676 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

677 
	`p‹tYIELD_WITHIN_API
();

682 
	`èskEXIT_CRITICAL
();

683 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

684  
îrQUEUE_FULL
;

687 
	`èskEXIT_CRITICAL
();

689 
	}
}

694 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

696 sig√d 
p‹tBASE_TYPE
 
	$xQueueA…GíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 )

698 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

699 
xTimeOutTy≥
 
xTimeOut
;

700 sig√d *
pcOrigöÆRódPosôi⁄
;

702 
	`c⁄figASSERT
–
pxQueue
 );

703 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

707 
	`èskENTER_CRITICAL
();

709 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

712 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
pcRódFrom
;

714 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

716 if–
xJu°Pìkög
 =
pdFALSE
 )

718 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

721 --–
pxQueue
->
uxMesßgesWaôög
 );

723 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

725 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

729 
pxQueue
->
pxMuãxHﬁdî
 = 
	`xTaskGëCuºítTaskH™dÀ
();

734 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

736 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

738 
	`p‹tYIELD_WITHIN_API
();

744 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

748 
pxQueue
->
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

752 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

756 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

759 
	`p‹tYIELD_WITHIN_API
();

765 
	`èskEXIT_CRITICAL
();

766  
pdPASS
;

770 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

772 
	`èskEXIT_CRITICAL
();

773 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

774  
îrQUEUE_EMPTY
;

776 if–
xE¡ryTimeSë
 =
pdFALSE
 )

778 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

779 
xE¡ryTimeSë
 = 
pdTRUE
;

783 
	`èskEXIT_CRITICAL
();

785 
	`èskENTER_CRITICAL
();

787 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

789 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

791 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

793 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

795 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

797 
	`p‹tENTER_CRITICAL
();

798 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

799 
	`p‹tEXIT_CRITICAL
();

804 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

805 
	`p‹tYIELD_WITHIN_API
();

810 
	`èskEXIT_CRITICAL
();

811 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

812  
îrQUEUE_EMPTY
;

815 
	`èskEXIT_CRITICAL
();

817 
	}
}

823 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 *
pxHighîPri‹ôyTaskWokí
,Ö‹tBASE_TYPE 
xC›yPosôi⁄
 )

825 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

826 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

828 
	`c⁄figASSERT
–
pxQueue
 );

829 
	`c⁄figASSERT
–
pxHighîPri‹ôyTaskWokí
 );

830 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

837 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

839 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

841 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

843 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

847 if–
pxQueue
->
xTxLock
 =
queueUNLOCKED
 )

849 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

851 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

855 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

863 ++–
pxQueue
->
xTxLock
 );

866 
xRëu∫
 = 
pdPASS
;

870 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

871 
xRëu∫
 = 
îrQUEUE_FULL
;

874 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

876  
xRëu∫
;

877 
	}
}

880 sig√d 
p‹tBASE_TYPE
 
	$xQueueGíîicRe˚ive
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
, 
p‹tBASE_TYPE
 
xJu°Pìkög
 )

882 sig√d 
p‹tBASE_TYPE
 
xE¡ryTimeSë
 = 
pdFALSE
;

883 
xTimeOutTy≥
 
xTimeOut
;

884 sig√d *
pcOrigöÆRódPosôi⁄
;

886 
	`c⁄figASSERT
–
pxQueue
 );

887 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

895 
	`èskENTER_CRITICAL
();

899 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

902 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
pcRódFrom
;

904 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

906 if–
xJu°Pìkög
 =
pdFALSE
 )

908 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

911 --–
pxQueue
->
uxMesßgesWaôög
 );

913 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

915 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

919 
pxQueue
->
pxMuãxHﬁdî
 = 
	`xTaskGëCuºítTaskH™dÀ
();

924 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

926 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

928 
	`p‹tYIELD_WITHIN_API
();

934 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

938 
pxQueue
->
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

942 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

946 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

949 
	`p‹tYIELD_WITHIN_API
();

955 
	`èskEXIT_CRITICAL
();

956  
pdPASS
;

960 if–
xTicksToWaô
 =–
p‹tTickTy≥
 ) 0 )

964 
	`èskEXIT_CRITICAL
();

965 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

966  
îrQUEUE_EMPTY
;

968 if–
xE¡ryTimeSë
 =
pdFALSE
 )

972 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

973 
xE¡ryTimeSë
 = 
pdTRUE
;

977 
	`èskEXIT_CRITICAL
();

982 
	`vTaskSu•ídAŒ
();

983 
	`¥vLockQueue
–
pxQueue
 );

986 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

988 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

990 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

992 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

994 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

996 
	`p‹tENTER_CRITICAL
();

998 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1000 
	`p‹tEXIT_CRITICAL
();

1005 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1006 
	`¥vU∆ockQueue
–
pxQueue
 );

1007 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1009 
	`p‹tYIELD_WITHIN_API
();

1015 
	`¥vU∆ockQueue
–
pxQueue
 );

1016 –Ë
	`xTaskResumeAŒ
();

1021 
	`¥vU∆ockQueue
–
pxQueue
 );

1022 –Ë
	`xTaskResumeAŒ
();

1023 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1024  
îrQUEUE_EMPTY
;

1027 
	}
}

1030 sig√d 
p‹tBASE_TYPE
 
	$xQueueRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, * c⁄° 
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxTaskWokí
 )

1032 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1033 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

1035 
	`c⁄figASSERT
–
pxQueue
 );

1036 
	`c⁄figASSERT
–
pxTaskWokí
 );

1037 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
p‹tBASE_TYPE
 ) 0U ) ) );

1039 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1042 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

1044 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1046 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1047 --–
pxQueue
->
uxMesßgesWaôög
 );

1052 if–
pxQueue
->
xRxLock
 =
queueUNLOCKED
 )

1054 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1056 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1060 *
pxTaskWokí
 = 
pdTRUE
;

1068 ++–
pxQueue
->
xRxLock
 );

1071 
xRëu∫
 = 
pdPASS
;

1075 
xRëu∫
 = 
pdFAIL
;

1076 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1079 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1081  
xRëu∫
;

1082 
	}
}

1085 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôög
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1087 
p‹tBASE_TYPE
 
uxRëu∫
;

1089 
	`c⁄figASSERT
–
pxQueue
 );

1091 
	`èskENTER_CRITICAL
();

1092 
uxRëu∫
 = 
pxQueue
->
uxMesßgesWaôög
;

1093 
	`èskEXIT_CRITICAL
();

1095  
uxRëu∫
;

1096 
	}
}

1099 
p‹tBASE_TYPE
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1101 
p‹tBASE_TYPE
 
uxRëu∫
;

1103 
	`c⁄figASSERT
–
pxQueue
 );

1105 
uxRëu∫
 = 
pxQueue
->
uxMesßgesWaôög
;

1107  
uxRëu∫
;

1108 
	}
}

1111 
	$vQueueDñëe
–
xQueueH™dÀ
 
pxQueue
 )

1113 
	`c⁄figASSERT
–
pxQueue
 );

1115 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

1116 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

1117 
	`vP‹tFªe
–
pxQueue
->
pcHód
 );

1118 
	`vP‹tFªe
–
pxQueue
 );

1119 
	}
}

1122 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1124 
	$ucQueueGëQueueNumbî
–
xQueueH™dÀ
 
pxQueue
 )

1126  
pxQueue
->
ucQueueNumbî
;

1127 
	}
}

1132 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1134 
	$vQueueSëQueueNumbî
–
xQueueH™dÀ
 
pxQueue
, 
ucQueueNumbî
 )

1136 
pxQueue
->
ucQueueNumbî
 = ucQueueNumber;

1137 
	}
}

1142 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1144 
	$ucQueueGëQueueTy≥
–
xQueueH™dÀ
 
pxQueue
 )

1146  
pxQueue
->
ucQueueTy≥
;

1147 
	}
}

1152 
	$¥vC›yD©aToQueue
–
xQUEUE
 *
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tBASE_TYPE
 
xPosôi⁄
 )

1154 if–
pxQueue
->
uxIãmSize
 =–
p‹tBASE_TYPE
 ) 0 )

1156 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1158 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1161 
	`vTaskPri‹ôyDisöhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1162 
pxQueue
->
pxMuãxHﬁdî
 = 
NULL
;

1167 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

1169 
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( ËpxQueue->
uxIãmSize
 );

1170 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

1171 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
pcTaû
 )

1173 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

1178 
	`mem˝y
––* ) 
pxQueue
->
pcRódFrom
, 
pvIãmToQueue
, ( ËpxQueue->
uxIãmSize
 );

1179 
pxQueue
->
pcRódFrom
 -pxQueue->
uxIãmSize
;

1180 if–
pxQueue
->
pcRódFrom
 <ÖxQueue->
pcHód
 )

1182 
pxQueue
->
pcRódFrom
 = (ÖxQueue->
pcTaû
 -ÖxQueue->
uxIãmSize
 );

1186 ++–
pxQueue
->
uxMesßgesWaôög
 );

1187 
	}
}

1190 
	$¥vC›yD©aFromQueue
–
xQUEUE
 * c⁄° 
pxQueue
, c⁄° *
pvBuf„r
 )

1192 if–
pxQueue
->
uxQueueTy≥
 !
queueQUEUE_IS_MUTEX
 )

1194 
pxQueue
->
pcRódFrom
 +pxQueue->
uxIãmSize
;

1195 if–
pxQueue
->
pcRódFrom
 >pxQueue->
pcTaû
 )

1197 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
;

1199 
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

1201 
	}
}

1204 
	$¥vU∆ockQueue
–
xQueueH™dÀ
 
pxQueue
 )

1212 
	`èskENTER_CRITICAL
();

1215  
pxQueue
->
xTxLock
 > 
queueLOCKED_UNMODIFIED
 )

1219 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1223 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1227 
	`vTaskMis£dYõld
();

1230 --–
pxQueue
->
xTxLock
 );

1238 
pxQueue
->
xTxLock
 = 
queueUNLOCKED
;

1240 
	`èskEXIT_CRITICAL
();

1243 
	`èskENTER_CRITICAL
();

1245  
pxQueue
->
xRxLock
 > 
queueLOCKED_UNMODIFIED
 )

1247 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1249 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1251 
	`vTaskMis£dYõld
();

1254 --–
pxQueue
->
xRxLock
 );

1262 
pxQueue
->
xRxLock
 = 
queueUNLOCKED
;

1264 
	`èskEXIT_CRITICAL
();

1265 
	}
}

1268 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueEm±y
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1270 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1272 
	`èskENTER_CRITICAL
();

1273 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0 );

1274 
	`èskEXIT_CRITICAL
();

1276  
xRëu∫
;

1277 
	}
}

1280 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1282 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1284 
	`c⁄figASSERT
–
pxQueue
 );

1285 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0 );

1287  
xRëu∫
;

1288 
	}
}

1291 sig√d 
p‹tBASE_TYPE
 
	$¥vIsQueueFuŒ
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1293 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1295 
	`èskENTER_CRITICAL
();

1296 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 );

1297 
	`èskEXIT_CRITICAL
();

1299  
xRëu∫
;

1300 
	}
}

1303 sig√d 
p‹tBASE_TYPE
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
xQueueH™dÀ
 
pxQueue
 )

1305 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1307 
	`c⁄figASSERT
–
pxQueue
 );

1308 
xRëu∫
 = ( 
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 );

1310  
xRëu∫
;

1311 
	}
}

1314 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1315 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSíd
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1317 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1322 
	`p‹tDISABLE_INTERRUPTS
();

1324 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

1328 if–
xTicksToWaô
 > ( 
p‹tTickTy≥
 ) 0 )

1332 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

1333 
	`p‹tENABLE_INTERRUPTS
();

1334  
îrQUEUE_BLOCKED
;

1338 
	`p‹tENABLE_INTERRUPTS
();

1339  
îrQUEUE_FULL
;

1343 
	`p‹tENABLE_INTERRUPTS
();

1345 
	`p‹tNOP
();

1347 
	`p‹tDISABLE_INTERRUPTS
();

1349 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

1352 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

1353 
xRëu∫
 = 
pdPASS
;

1356 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1362 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1366 
xRëu∫
 = 
îrQUEUE_YIELD
;

1372 
xRëu∫
 = 
îrQUEUE_FULL
;

1375 
	`p‹tENABLE_INTERRUPTS
();

1377  
xRëu∫
;

1378 
	}
}

1382 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1383 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚ive
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1385 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1390 
	`p‹tDISABLE_INTERRUPTS
();

1392 if–
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0 )

1396 if–
xTicksToWaô
 > ( 
p‹tTickTy≥
 ) 0 )

1400 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

1401 
	`p‹tENABLE_INTERRUPTS
();

1402  
îrQUEUE_BLOCKED
;

1406 
	`p‹tENABLE_INTERRUPTS
();

1407  
îrQUEUE_FULL
;

1411 
	`p‹tENABLE_INTERRUPTS
();

1413 
	`p‹tNOP
();

1415 
	`p‹tDISABLE_INTERRUPTS
();

1417 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

1420 
pxQueue
->
pcRódFrom
 +pxQueue->
uxIãmSize
;

1421 if–
pxQueue
->
pcRódFrom
 >pxQueue->
pcTaû
 )

1423 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
;

1425 --–
pxQueue
->
uxMesßgesWaôög
 );

1426 
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

1428 
xRëu∫
 = 
pdPASS
;

1431 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1437 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1439 
xRëu∫
 = 
îrQUEUE_YIELD
;

1445 
xRëu∫
 = 
pdFAIL
;

1448 
	`p‹tENABLE_INTERRUPTS
();

1450  
xRëu∫
;

1451 
	}
}

1457 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1458 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRSídFromISR
–
xQueueH™dÀ
 
pxQueue
, c⁄° *
pvIãmToQueue
, sig√d 
p‹tBASE_TYPE
 
xCoRoutöePªviou¶yWokí
 )

1462 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

1464 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

1468 if–
xCoRoutöePªviou¶yWokí
 =
pdFALSE
 )

1470 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1472 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1474  
pdTRUE
;

1480  
xCoRoutöePªviou¶yWokí
;

1481 
	}
}

1485 #i‡
c⁄figUSE_CO_ROUTINES
 == 1

1486 sig√d 
p‹tBASE_TYPE
 
	$xQueueCRRe˚iveFromISR
–
xQueueH™dÀ
 
pxQueue
, *
pvBuf„r
, sig√d 
p‹tBASE_TYPE
 *
pxCoRoutöeWokí
 )

1488 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

1492 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
p‹tBASE_TYPE
 ) 0 )

1495 
pxQueue
->
pcRódFrom
 +pxQueue->
uxIãmSize
;

1496 if–
pxQueue
->
pcRódFrom
 >pxQueue->
pcTaû
 )

1498 
pxQueue
->
pcRódFrom
 =ÖxQueue->
pcHód
;

1500 --–
pxQueue
->
uxMesßgesWaôög
 );

1501 
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

1503 if––*
pxCoRoutöeWokí
 ) =
pdFALSE
 )

1505 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1507 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1509 *
pxCoRoutöeWokí
 = 
pdTRUE
;

1514 
xRëu∫
 = 
pdPASS
;

1518 
xRëu∫
 = 
pdFAIL
;

1521  
xRëu∫
;

1522 
	}
}

1526 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1528 
	$vQueueAddToRegi°ry
–
xQueueH™dÀ
 
xQueue
, sig√d *
pcQueueName
 )

1530 
p‹tBASE_TYPE
 
ux
;

1534  
ux
 = ( 
p‹tBASE_TYPE
 ) 0U; ux < ( p‹tBASE_TYPE ) 
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

1536 if–
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =
NULL
 )

1539 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =ÖcQueueName;

1540 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = 
xQueue
;

1544 
	}
}

1549 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1551 
	$vQueueUƒegi°îQueue
–
xQueueH™dÀ
 
xQueue
 )

1553 
p‹tBASE_TYPE
 
ux
;

1557  
ux
 = ( 
p‹tBASE_TYPE
 ) 0U; ux < ( p‹tBASE_TYPE ) 
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

1559 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

1562 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

1567 
	}
}

1572 #i‡
c⁄figUSE_TIMERS
 == 1

1574 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
xQueueH™dÀ
 
pxQueue
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1590 
	`¥vLockQueue
–
pxQueue
 );

1591 if–
pxQueue
->
uxMesßgesWaôög
 =–
p‹tBASE_TYPE
 ) 0U )

1594 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1596 
	`¥vU∆ockQueue
–
pxQueue
 );

1597 
	}
}

	@Source/tasks.c

55 
	~<°dio.h
>

56 
	~<°dlib.h
>

57 
	~<°rög.h
>

62 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

64 
	~"FªeRTOS.h
"

65 
	~"èsk.h
"

66 
	~"timîs.h
"

67 
	~"SèckMa¸os.h
"

69 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


74 
	#tskIDLE_STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

80 
	stskTaskC⁄åﬁBlock


82 vﬁ©ûê
p‹tSTACK_TYPE
 *
	mpxT›OfSèck
;

84 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

85 
xMPU_SETTINGS
 
	mxMPUSëtögs
;

88 
xLi°Iãm
 
	mxGíîicLi°Iãm
;

89 
xLi°Iãm
 
	mxEvítLi°Iãm
;

90 
p‹tBASE_TYPE
 
	muxPri‹ôy
;

91 
p‹tSTACK_TYPE
 *
	mpxSèck
;

92 sig√d 
	mpcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

94 #i‡–
p‹tSTACK_GROWTH
 > 0 )

95 
p‹tSTACK_TYPE
 *
	mpxEndOfSèck
;

98 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

99 
p‹tBASE_TYPE
 
	muxCrôiˇlNe°ög
;

102 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

103 
p‹tBASE_TYPE
 
	muxTCBNumbî
;

104 
p‹tBASE_TYPE
 
	muxTaskNumbî
;

107 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

108 
p‹tBASE_TYPE
 
	muxBa£Pri‹ôy
;

111 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

112 
pdTASK_HOOK_CODE
 
	mpxTaskTag
;

115 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

116 
	mulRunTimeCou¡î
;

119 } 
	ttskTCB
;

126 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


127 

	)

131 
PRIVILEGED_DATA
 
tskTCB
 * vﬁ©ûê
	gpxCuºítTCB
 = 
NULL
;

135 
PRIVILEGED_DATA
 
xLi°
 
	gpxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

136 
PRIVILEGED_DATA
 
xLi°
 
	gxDñayedTaskLi°1
;

137 
PRIVILEGED_DATA
 
xLi°
 
	gxDñayedTaskLi°2
;

138 
PRIVILEGED_DATA
 
xLi°
 * vﬁ©ûê
	gpxDñayedTaskLi°
 ;

139 
PRIVILEGED_DATA
 
xLi°
 * vﬁ©ûê
	gpxOvîÊowDñayedTaskLi°
;

140 
PRIVILEGED_DATA
 
xLi°
 
	gxPídögRódyLi°
;

142 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

144 
PRIVILEGED_DATA
 
xLi°
 
	gxTasksWaôögTîmö©i⁄
;

145 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxTasksDñëed
 = ( portBASE_TYPE ) 0U;

149 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

151 
PRIVILEGED_DATA
 
xLi°
 
	gxSu•ídedTaskLi°
;

155 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

157 
PRIVILEGED_DATA
 
xTaskH™dÀ
 
	gxIdÀTaskH™dÀ
 = 
NULL
;

162 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxCuºítNumbîOfTasks
 = ( portBASE_TYPE ) 0U;

163 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tTickTy≥
 
	gxTickCou¡
 = (ÖortTickType ) 0U;

164 
PRIVILEGED_DATA
 
p‹tBASE_TYPE
 
	guxT›U£dPri‹ôy
 = 
tskIDLE_PRIORITY
;

165 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

166 
PRIVILEGED_DATA
 vﬁ©ûêsig√d 
p‹tBASE_TYPE
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

167 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxScheduÀrSu•íded
 = ( p‹tBASE_TYPE ) 
pdFALSE
;

168 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	guxMis£dTicks
 = ( portBASE_TYPE ) 0U;

169 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	gxMis£dYõld
 = (Ö‹tBASE_TYPE ) 
pdFALSE
;

170 
PRIVILEGED_DATA
 vﬁ©ûê
p‹tBASE_TYPE
 
	gxNumOfOvîÊows
 = (ÖortBASE_TYPE ) 0;

171 
PRIVILEGED_DATA
 
p‹tBASE_TYPE
 
	guxTCBNumbî
 = ( portBASE_TYPE ) 0U;

172 
PRIVILEGED_DATA
 
p‹tTickTy≥
 
	gxNextTaskUnblockTime
 = (Ö‹tTickTy≥ ) 
p‹tMAX_DELAY
;

174 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

176 
PRIVILEGED_DATA
 
	gpcSètsSåög
[ 50 ] ;

177 
PRIVILEGED_DATA
 
	gulTaskSwôchedInTime
 = 0UL;

178 
	$¥vGíî©eRunTimeSètsF‹TasksInLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, 
ulTŸÆRunTime
 ) 
PRIVILEGED_FUNCTION
;

188 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

193 
	#tskBLOCKED_CHAR
 ( ( sig√d Ë'B' )

	)

194 
	#tskREADY_CHAR
 ( ( sig√d Ë'R' )

	)

195 
	#tskDELETED_CHAR
 ( ( sig√d Ë'D' )

	)

196 
	#tskSUSPENDED_CHAR
 ( ( sig√d Ë'S' )

	)

207 
	#¥vAddTaskToRódyQueue
–
pxTCB
 ) \

	)

208 if––
pxTCB
 )->
uxPri‹ôy
 > 
uxT›RódyPri‹ôy
 ) \

210 
uxT›RódyPri‹ôy
 = ( 
pxTCB
 )->
uxPri‹ôy
; \

211 
	}
} \

212 
vLi°In£πEnd
––
xLi°
 * ) &–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xGíîicLi°Iãm
 ) )

223 
	#¥vCheckDñayedTasks
(Ë\

	)

225 
p‹tTickTy≥
 
	gxIãmVÆue
; \

229 if–
	gxTickCou¡
 >
xNextTaskUnblockTime
 ) \

233 if–
li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 ) \

239 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
; \

248 
	gpxTCB
 = ( 
tskTCB
 * ) 
li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 ); \

249 
	gxIãmVÆue
 = 
li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ); \

251 if–
	gxTickCou¡
 < 
	gxIãmVÆue
 ) \

257 
	gxNextTaskUnblockTime
 = 
xIãmVÆue
; \

262 
vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ); \

265 if–
	gpxTCB
->
	gxEvítLi°Iãm
.
	gpvC⁄èöî
 !
NULL
 ) \

267 
vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) ); \

269 
¥vAddTaskToRódyQueue
–
pxTCB
 ); \

282 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? ( 
tskTCB
 * ) 
pxCuºítTCB
 : (ÅskTCB * ) (ÖxH™dÀ ) )

	)

285 
vAµliˇti⁄SèckOvîÊowHook
–
xTaskH™dÀ
 *
pxTask
, sig√d *
pcTaskName
 );

286 
vAµliˇti⁄TickHook
( );

294 
	$¥vInôüli£TCBV¨übÀs
–
tskTCB
 *
pxTCB
, c⁄° sig√d * c⁄° 
pcName
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
, 
usSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

300 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

313 
	`p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 );

322 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

324 
	$¥vDñëeTCB
–
tskTCB
 *
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

333 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

339 
	$¥vAddCuºítTaskToDñayedLi°
–
p‹tTickTy≥
 
xTimeToWake
 ) 
PRIVILEGED_FUNCTION
;

345 
tskTCB
 *
	$¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
 ) 
PRIVILEGED_FUNCTION
;

356 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

358 
	$¥vLi°TaskWôhöSögÀLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, sig√d 
cSètus
 ) 
PRIVILEGED_FUNCTION
;

367 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

369 
	$usTaskCheckFªeSèckS∑˚
–c⁄° * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

382 sig√d 
p‹tBASE_TYPE
 
	$xTaskGíîicCª©e
–
pdTASK_CODE
 
pxTaskCode
, c⁄° sig√d * c⁄° 
pcName
, 
usSèckDïth
, *
pvP¨amëîs
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, 
xTaskH™dÀ
 *
pxCª©edTask
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 )

384 sig√d 
p‹tBASE_TYPE
 
xRëu∫
;

385 
tskTCB
 * 
pxNewTCB
;

387 
	`c⁄figASSERT
–
pxTaskCode
 );

388 
	`c⁄figASSERT
––
uxPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

392 
pxNewTCB
 = 
	`¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
puxSèckBuf„r
 );

394 if–
pxNewTCB
 !
NULL
 )

396 
p‹tSTACK_TYPE
 *
pxT›OfSèck
;

398 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

400 
p‹tBASE_TYPE
 
xRunPrivûeged
;

401 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

403 
xRunPrivûeged
 = 
pdTRUE
;

407 
xRunPrivûeged
 = 
pdFALSE
;

409 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

416 #if–
p‹tSTACK_GROWTH
 < 0 )

418 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
 + ( 
usSèckDïth
 - ( ) 1 );

419 
pxT›OfSèck
 = ( 
p‹tSTACK_TYPE
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( (Ö‹tPOINTER_SIZE_TYPE ) ~
p‹tBYTE_ALIGNMENT_MASK
 ) );

422 
	`c⁄figASSERT
––––Ë
pxT›OfSèck
 & ( Ë
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

426 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

429 
	`c⁄figASSERT
––––Ë
pxNewTCB
->
pxSèck
 & ( Ë
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

434 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
usSèckDïth
 - 1 );

439 
	`¥vInôüli£TCBV¨übÀs
–
pxNewTCB
, 
pcName
, 
uxPri‹ôy
, 
xRegi⁄s
, 
usSèckDïth
 );

445 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

447 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

451 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

456 
	`p‹tALIGNMENT_ASSERT_pxCuºítTCB
––––Ë
pxNewTCB
->
pxT›OfSèck
 & ( Ë
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

458 if––* ) 
pxCª©edTask
 !
NULL
 )

463 *
pxCª©edTask
 = ( 
xTaskH™dÀ
 ) 
pxNewTCB
;

468 
	`èskENTER_CRITICAL
();

470 
uxCuºítNumbîOfTasks
++;

471 if–
pxCuºítTCB
 =
NULL
 )

475 
pxCuºítTCB
 = 
pxNewTCB
;

477 if–
uxCuºítNumbîOfTasks
 =–
p‹tBASE_TYPE
 ) 1 )

482 
	`¥vInôüli£TaskLi°s
();

490 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

492 if–
pxCuºítTCB
->
uxPri‹ôy
 <= uxPriority )

494 
pxCuºítTCB
 = 
pxNewTCB
;

501 if–
pxNewTCB
->
uxPri‹ôy
 > 
uxT›U£dPri‹ôy
 )

503 
uxT›U£dPri‹ôy
 = 
pxNewTCB
->
uxPri‹ôy
;

506 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

509 
pxNewTCB
->
uxTCBNumbî
 = uxTCBNumber;

512 
uxTCBNumbî
++;

514 
	`¥vAddTaskToRódyQueue
–
pxNewTCB
 );

516 
xRëu∫
 = 
pdPASS
;

517 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

519 
	`èskEXIT_CRITICAL
();

523 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

524 
	`åa˚TASK_CREATE_FAILED
();

527 if–
xRëu∫
 =
pdPASS
 )

529 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

533 if–
pxCuºítTCB
->
uxPri‹ôy
 < uxPriority )

535 
	`p‹tYIELD_WITHIN_API
();

540  
xRëu∫
;

541 
	}
}

544 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

546 
	$vTaskDñëe
–
xTaskH™dÀ
 
pxTaskToDñëe
 )

548 
tskTCB
 *
pxTCB
;

550 
	`èskENTER_CRITICAL
();

554 if–
pxTaskToDñëe
 =
pxCuºítTCB
 )

556 
pxTaskToDñëe
 = 
NULL
;

560 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTaskToDñëe
 );

566 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

569 if–
pxTCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 !
NULL
 )

571 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

574 
	`vLi°In£πEnd
––
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

579 ++
uxTasksDñëed
;

583 
uxTCBNumbî
++;

585 
	`åa˚TASK_DELETE
–
pxTCB
 );

587 
	`èskEXIT_CRITICAL
();

590 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

592 if––* ) 
pxTaskToDñëe
 =
NULL
 )

594 
	`p‹tYIELD_WITHIN_API
();

597 
	}
}

610 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

612 
	$vTaskDñayU¡û
–
p‹tTickTy≥
 * c⁄° 
pxPªviousWakeTime
,Ö‹tTickTy≥ 
xTimeIn¸emít
 )

614 
p‹tTickTy≥
 
xTimeToWake
;

615 
p‹tBASE_TYPE
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

617 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

618 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0U ) );

620 
	`vTaskSu•ídAŒ
();

623 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

625 if–
xTickCou¡
 < *
pxPªviousWakeTime
 )

632 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xTickCou¡
 ) )

634 
xShouldDñay
 = 
pdTRUE
;

642 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xTickCou¡
 ) )

644 
xShouldDñay
 = 
pdTRUE
;

649 *
pxPªviousWakeTime
 = 
xTimeToWake
;

651 if–
xShouldDñay
 !
pdFALSE
 )

653 
	`åa˚TASK_DELAY_UNTIL
();

658 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

659 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

662 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

666 if–
xAÃódyYõlded
 =
pdFALSE
 )

668 
	`p‹tYIELD_WITHIN_API
();

670 
	}
}

675 #i‡–
INCLUDE_vTaskDñay
 == 1 )

677 
	$vTaskDñay
–
p‹tTickTy≥
 
xTicksToDñay
 )

679 
p‹tTickTy≥
 
xTimeToWake
;

680 sig√d 
p‹tBASE_TYPE
 
xAÃódyYõlded
 = 
pdFALSE
;

683 if–
xTicksToDñay
 > ( 
p‹tTickTy≥
 ) 0U )

685 
	`vTaskSu•ídAŒ
();

687 
	`åa˚TASK_DELAY
();

699 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToDñay
;

704 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

705 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

707 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

712 if–
xAÃódyYõlded
 =
pdFALSE
 )

714 
	`p‹tYIELD_WITHIN_API
();

716 
	}
}

721 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

723 
p‹tBASE_TYPE
 
	$uxTaskPri‹ôyGë
–
xTaskH™dÀ
 
pxTask
 )

725 
tskTCB
 *
pxTCB
;

726 
p‹tBASE_TYPE
 
uxRëu∫
;

728 
	`èskENTER_CRITICAL
();

732 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTask
 );

733 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

735 
	`èskEXIT_CRITICAL
();

737  
uxRëu∫
;

738 
	}
}

743 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

745 
	$vTaskPri‹ôySë
–
xTaskH™dÀ
 
pxTask
, 
p‹tBASE_TYPE
 
uxNewPri‹ôy
 )

747 
tskTCB
 *
pxTCB
;

748 
p‹tBASE_TYPE
 
uxCuºítPri‹ôy
;

749 
p‹tBASE_TYPE
 
xYõldRequúed
 = 
pdFALSE
;

751 
	`c⁄figASSERT
––
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

754 if–
uxNewPri‹ôy
 >
c⁄figMAX_PRIORITIES
 )

756 
uxNewPri‹ôy
 = 
c⁄figMAX_PRIORITIES
 - ( 
p‹tBASE_TYPE
 ) 1U;

759 
	`èskENTER_CRITICAL
();

761 if–
pxTask
 =
pxCuºítTCB
 )

763 
pxTask
 = 
NULL
;

768 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTask
 );

770 
	`åa˚TASK_PRIORITY_SET
–
pxTCB
, 
uxNewPri‹ôy
 );

772 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

774 
uxCuºítPri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

778 
uxCuºítPri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

782 if–
uxCuºítPri‹ôy
 !
uxNewPri‹ôy
 )

786 if–
uxNewPri‹ôy
 > 
uxCuºítPri‹ôy
 )

788 if–
pxTask
 !
NULL
 )

794 
xYõldRequúed
 = 
pdTRUE
;

797 if–
pxTask
 =
NULL
 )

801 
xYõldRequúed
 = 
pdTRUE
;

806 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

810 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

812 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

816 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

820 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

824 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
uxNewPri‹ôy
 ) );

830 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxCuºítPri‹ôy
 ] ), &–
pxTCB
->
xGíîicLi°Iãm
 ) ) )

835 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

836 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

839 if–
xYõldRequúed
 =
pdTRUE
 )

841 
	`p‹tYIELD_WITHIN_API
();

845 
	`èskEXIT_CRITICAL
();

846 
	}
}

851 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

853 
	$vTaskSu•íd
–
xTaskH™dÀ
 
pxTaskToSu•íd
 )

855 
tskTCB
 *
pxTCB
;

857 
	`èskENTER_CRITICAL
();

861 if–
pxTaskToSu•íd
 =
pxCuºítTCB
 )

863 
pxTaskToSu•íd
 = 
NULL
;

867 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
pxTaskToSu•íd
 );

869 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

872 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

875 if–
pxTCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 !
NULL
 )

877 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

880 
	`vLi°In£πEnd
––
xLi°
 * ) &
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

882 
	`èskEXIT_CRITICAL
();

884 if––* ) 
pxTaskToSu•íd
 =
NULL
 )

886 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

889 
	`p‹tYIELD_WITHIN_API
();

896 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

902 
pxCuºítTCB
 = 
NULL
;

906 
	`vTaskSwôchC⁄ãxt
();

910 
	}
}

915 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

917 sig√d 
p‹tBASE_TYPE
 
	$xTaskIsTaskSu•íded
–
xTaskH™dÀ
 
xTask
 )

919 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFALSE
;

920 c⁄° 
tskTCB
 * c⁄° 
pxTCB
 = (ÅskTCB * ) 
xTask
;

923 
	`c⁄figASSERT
–
xTask
 );

927 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

930 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdTRUE
 )

936 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdTRUE
 )

938 
xRëu∫
 = 
pdTRUE
;

943  
xRëu∫
;

944 
	}
}

949 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

951 
	$vTaskResume
–
xTaskH™dÀ
 
pxTaskToResume
 )

953 
tskTCB
 *
pxTCB
;

956 
	`c⁄figASSERT
–
pxTaskToResume
 );

960 
pxTCB
 = ( 
tskTCB
 * ) 
pxTaskToResume
;

964 if––
pxTCB
 !
NULL
 ) && (ÖxTCB !
pxCuºítTCB
 ) )

966 
	`èskENTER_CRITICAL
();

968 if–
	`xTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

970 
	`åa˚TASK_RESUME
–
pxTCB
 );

974 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

975 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

978 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

982 
	`p‹tYIELD_WITHIN_API
();

986 
	`èskEXIT_CRITICAL
();

988 
	}
}

994 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

996 
p‹tBASE_TYPE
 
	$xTaskResumeFromISR
–
xTaskH™dÀ
 
pxTaskToResume
 )

998 
p‹tBASE_TYPE
 
xYõldRequúed
 = 
pdFALSE
;

999 
tskTCB
 *
pxTCB
;

1000 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

1002 
	`c⁄figASSERT
–
pxTaskToResume
 );

1004 
pxTCB
 = ( 
tskTCB
 * ) 
pxTaskToResume
;

1006 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1008 if–
	`xTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

1010 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1012 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1014 
xYõldRequúed
 = ( 
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority );

1015 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1016 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

1023 
	`vLi°In£πEnd
––
xLi°
 * ) &–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1027 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1029  
xYõldRequúed
;

1030 
	}
}

1042 
	$vTaskSèπScheduÀr
( )

1044 
p‹tBASE_TYPE
 
xRëu∫
;

1047 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

1051 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
, ( sig√d * ) "IDLE", 
tskIDLE_STACK_SIZE
, ( * ) 
NULL
, ( 
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ), &
xIdÀTaskH™dÀ
 );

1056 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
, ( sig√d * ) "IDLE", 
tskIDLE_STACK_SIZE
, ( * ) 
NULL
, ( 
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ), NULL );

1060 #i‡–
c⁄figUSE_TIMERS
 == 1 )

1062 if–
xRëu∫
 =
pdPASS
 )

1064 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

1069 if–
xRëu∫
 =
pdPASS
 )

1079 
	`p‹tDISABLE_INTERRUPTS
();

1081 
xScheduÀrRu¬ög
 = 
pdTRUE
;

1082 
xTickCou¡
 = ( 
p‹tTickTy≥
 ) 0U;

1087 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

1091 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

1103 
	`c⁄figASSERT
–
xRëu∫
 );

1104 
	}
}

1107 
	$vTaskEndScheduÀr
( )

1112 
	`p‹tDISABLE_INTERRUPTS
();

1113 
xScheduÀrRu¬ög
 = 
pdFALSE
;

1114 
	`vP‹tEndScheduÀr
();

1115 
	}
}

1118 
	$vTaskSu•ídAŒ
( )

1122 ++
uxScheduÀrSu•íded
;

1123 
	}
}

1126 sig√d 
p‹tBASE_TYPE
 
	$xTaskResumeAŒ
( )

1128 
tskTCB
 *
pxTCB
;

1129 sig√d 
p‹tBASE_TYPE
 
xAÃódyYõlded
 = 
pdFALSE
;

1133 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

1140 
	`èskENTER_CRITICAL
();

1142 --
uxScheduÀrSu•íded
;

1144 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1146 if–
uxCuºítNumbîOfTasks
 > ( 
p‹tBASE_TYPE
 ) 0U )

1148 
p‹tBASE_TYPE
 
xYõldRequúed
 = 
pdFALSE
;

1152  
	`li°LIST_IS_EMPTY
––
xLi°
 * ) &
xPídögRódyLi°
 ) =
pdFALSE
 )

1154 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–––
xLi°
 * ) &
xPídögRódyLi°
 ) );

1155 
	`vLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1156 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1157 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

1161 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1163 
xYõldRequúed
 = 
pdTRUE
;

1170 if–
uxMis£dTicks
 > ( 
p‹tBASE_TYPE
 ) 0U )

1172  
uxMis£dTicks
 > ( 
p‹tBASE_TYPE
 ) 0U )

1174 
	`vTaskIn¸emítTick
();

1175 --
uxMis£dTicks
;

1181 #i‡
c⁄figUSE_PREEMPTION
 == 1

1183 
xYõldRequúed
 = 
pdTRUE
;

1188 if––
xYõldRequúed
 =
pdTRUE
 ) || ( 
xMis£dYõld
 ==ÖdTRUE ) )

1190 
xAÃódyYõlded
 = 
pdTRUE
;

1191 
xMis£dYõld
 = 
pdFALSE
;

1192 
	`p‹tYIELD_WITHIN_API
();

1197 
	`èskEXIT_CRITICAL
();

1199  
xAÃódyYõlded
;

1200 
	}
}

1213 
p‹tTickTy≥
 
	$xTaskGëTickCou¡
( )

1215 
p‹tTickTy≥
 
xTicks
;

1218 
	`èskENTER_CRITICAL
();

1220 
xTicks
 = 
xTickCou¡
;

1222 
	`èskEXIT_CRITICAL
();

1224  
xTicks
;

1225 
	}
}

1228 
p‹tTickTy≥
 
	$xTaskGëTickCou¡FromISR
( )

1230 
p‹tTickTy≥
 
xRëu∫
;

1231 
p‹tBASE_TYPE
 
uxSavedI¡îru±Sètus
;

1233 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1234 
xRëu∫
 = 
xTickCou¡
;

1235 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1237  
xRëu∫
;

1238 
	}
}

1241 
p‹tBASE_TYPE
 
	$uxTaskGëNumbîOfTasks
( )

1245  
uxCuºítNumbîOfTasks
;

1246 
	}
}

1249 #i‡–
INCLUDE_pcTaskGëTaskName
 == 1 )

1251 sig√d *
	$pcTaskGëTaskName
–
xTaskH™dÀ
 
xTaskToQuîy
 )

1253 
tskTCB
 *
pxTCB
;

1256 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

1257 
	`c⁄figASSERT
–
pxTCB
 );

1258  &–
pxTCB
->
pcTaskName
[ 0 ] );

1259 
	}
}

1264 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1266 
	$vTaskLi°
–sig√d *
pcWrôeBuf„r
 )

1268 
p‹tBASE_TYPE
 
uxQueue
;

1273 
	`vTaskSu•ídAŒ
();

1278 *
pcWrôeBuf„r
 = ( signed ) 0x00;

1279 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( const * ) "\r\n" );

1281 
uxQueue
 = 
uxT›U£dPri‹ôy
 + ( 
p‹tBASE_TYPE
 ) 1U;

1285 
uxQueue
--;

1287 if–
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxQueue
 ] ) ) =
pdFALSE
 )

1289 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
tskREADY_CHAR
 );

1291 } 
uxQueue
 > ( Ë
tskIDLE_PRIORITY
 );

1293 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) =
pdFALSE
 )

1295 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxDñayedTaskLi°
, 
tskBLOCKED_CHAR
 );

1298 if–
	`li°LIST_IS_EMPTY
–
pxOvîÊowDñayedTaskLi°
 ) =
pdFALSE
 )

1300 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxOvîÊowDñayedTaskLi°
, 
tskBLOCKED_CHAR
 );

1303 #if–
INCLUDE_vTaskDñëe
 == 1 )

1305 if–
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 ) =
pdFALSE
 )

1307 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, &
xTasksWaôögTîmö©i⁄
, 
tskDELETED_CHAR
 );

1312 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1314 if–
	`li°LIST_IS_EMPTY
–&
xSu•ídedTaskLi°
 ) =
pdFALSE
 )

1316 
	`¥vLi°TaskWôhöSögÀLi°
–
pcWrôeBuf„r
, &
xSu•ídedTaskLi°
, 
tskSUSPENDED_CHAR
 );

1318 
	}
}

1321 
xTaskResumeAŒ
();

1327 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1329 
	$vTaskGëRunTimeSèts
–sig√d *
pcWrôeBuf„r
 )

1331 
p‹tBASE_TYPE
 
uxQueue
;

1332 
ulTŸÆRunTime
;

1337 
	`vTaskSu•ídAŒ
();

1339 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


1340 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

1342 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

1347 
ulTŸÆRunTime
 /= 100UL;

1353 *
pcWrôeBuf„r
 = ( signed ) 0x00;

1354 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( const * ) "\r\n" );

1356 
uxQueue
 = 
uxT›U£dPri‹ôy
 + ( 
p‹tBASE_TYPE
 ) 1U;

1360 
uxQueue
--;

1362 if–
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxQueue
 ] ) ) =
pdFALSE
 )

1364 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
ulTŸÆRunTime
 );

1366 } 
uxQueue
 > ( Ë
tskIDLE_PRIORITY
 );

1368 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) =
pdFALSE
 )

1370 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxDñayedTaskLi°
, 
ulTŸÆRunTime
 );

1373 if–
	`li°LIST_IS_EMPTY
–
pxOvîÊowDñayedTaskLi°
 ) =
pdFALSE
 )

1375 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, ( 
xLi°
 * ) 
pxOvîÊowDñayedTaskLi°
, 
ulTŸÆRunTime
 );

1378 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1380 if–
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 ) =
pdFALSE
 )

1382 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, &
xTasksWaôögTîmö©i⁄
, 
ulTŸÆRunTime
 );

1387 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1389 if–
	`li°LIST_IS_EMPTY
–&
xSu•ídedTaskLi°
 ) =
pdFALSE
 )

1391 
	`¥vGíî©eRunTimeSètsF‹TasksInLi°
–
pcWrôeBuf„r
, &
xSu•ídedTaskLi°
, 
ulTŸÆRunTime
 );

1396 
	`xTaskResumeAŒ
();

1397 
	}
}

1402 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

1404 
xTaskH™dÀ
 
	$xTaskGëIdÀTaskH™dÀ
( )

1408 
	`c⁄figASSERT
––
xIdÀTaskH™dÀ
 !
NULL
 ) );

1409  
xIdÀTaskH™dÀ
;

1410 
	}
}

1419 
	$vTaskIn¸emítTick
( )

1421 
tskTCB
 * 
pxTCB
;

1426 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1428 ++
xTickCou¡
;

1429 if–
xTickCou¡
 =–
p‹tTickTy≥
 ) 0U )

1431 
xLi°
 *
pxTemp
;

1436 
	`c⁄figASSERT
––
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) );

1438 
pxTemp
 = 
pxDñayedTaskLi°
;

1439 
pxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
;

1440 
pxOvîÊowDñayedTaskLi°
 = 
pxTemp
;

1441 
xNumOfOvîÊows
++;

1443 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

1450 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

1458 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

1459 
xNextTaskUnblockTime
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1464 
	`¥vCheckDñayedTasks
();

1468 ++
uxMis£dTicks
;

1472 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1474 
	`vAµliˇti⁄TickHook
();

1479 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1483 if–
uxMis£dTicks
 =–
p‹tBASE_TYPE
 ) 0U )

1485 
	`vAµliˇti⁄TickHook
();

1490 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

1491 
	}
}

1494 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1496 
	$vTaskSëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
, 
pdTASK_HOOK_CODE
 
pxHookFun˘i⁄
 )

1498 
tskTCB
 *
xTCB
;

1501 if–
xTask
 =
NULL
 )

1503 
xTCB
 = ( 
tskTCB
 * ) 
pxCuºítTCB
;

1507 
xTCB
 = ( 
tskTCB
 * ) 
xTask
;

1512 
	`èskENTER_CRITICAL
();

1513 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

1514 
	`èskEXIT_CRITICAL
();

1515 
	}
}

1520 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1522 
pdTASK_HOOK_CODE
 
	$xTaskGëAµliˇti⁄TaskTag
–
xTaskH™dÀ
 
xTask
 )

1524 
tskTCB
 *
xTCB
;

1525 
pdTASK_HOOK_CODE
 
xRëu∫
;

1528 if–
xTask
 =
NULL
 )

1530 
xTCB
 = ( 
tskTCB
 * ) 
pxCuºítTCB
;

1534 
xTCB
 = ( 
tskTCB
 * ) 
xTask
;

1539 
	`èskENTER_CRITICAL
();

1540 
xRëu∫
 = 
xTCB
->
pxTaskTag
;

1541 
	`èskEXIT_CRITICAL
();

1543  
xRëu∫
;

1544 
	}
}

1549 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1551 
p‹tBASE_TYPE
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
xTaskH™dÀ
 
xTask
, *
pvP¨amëî
 )

1553 
tskTCB
 *
xTCB
;

1554 
p‹tBASE_TYPE
 
xRëu∫
;

1557 if–
xTask
 =
NULL
 )

1559 
xTCB
 = ( 
tskTCB
 * ) 
pxCuºítTCB
;

1563 
xTCB
 = ( 
tskTCB
 * ) 
xTask
;

1566 if–
xTCB
->
pxTaskTag
 !
NULL
 )

1568 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

1572 
xRëu∫
 = 
pdFAIL
;

1575  
xRëu∫
;

1576 
	}
}

1581 
	$vTaskSwôchC⁄ãxt
( )

1583 if–
uxScheduÀrSu•íded
 !–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1587 
xMis£dYõld
 = 
pdTRUE
;

1591 
	`åa˚TASK_SWITCHED_OUT
();

1593 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1595 
ulTempCou¡î
;

1597 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


1598 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTempCou¡î
 );

1600 
ulTempCou¡î
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

1608 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTempCou¡î
 - 
ulTaskSwôchedInTime
 );

1609 
ulTaskSwôchedInTime
 = 
ulTempCou¡î
;

1613 
	`èskFIRST_CHECK_FOR_STACK_OVERFLOW
();

1614 
	`èskSECOND_CHECK_FOR_STACK_OVERFLOW
();

1617  
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) ) )

1619 
	`c⁄figASSERT
–
uxT›RódyPri‹ôy
 );

1620 --
uxT›RódyPri‹ôy
;

1625 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) );

1627 
	`åa˚TASK_SWITCHED_IN
();

1629 
	}
}

1632 
	$vTaskPœ˚OnEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1634 
p‹tTickTy≥
 
xTimeToWake
;

1636 
	`c⁄figASSERT
–
pxEvítLi°
 );

1644 
	`vLi°In£π
––
xLi°
 * ) 
pxEvítLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

1649 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

1652 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1654 if–
xTicksToWaô
 =
p‹tMAX_DELAY
 )

1659 
	`vLi°In£πEnd
––
xLi°
 * ) &
xSu•ídedTaskLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

1665 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

1666 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

1673 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

1674 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

1677 
	}
}

1680 #i‡
c⁄figUSE_TIMERS
 == 1

1682 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
, 
p‹tTickTy≥
 
xTicksToWaô
 )

1684 
p‹tTickTy≥
 
xTimeToWake
;

1686 
	`c⁄figASSERT
–
pxEvítLi°
 );

1698 
	`vLi°In£πEnd
––
xLi°
 * ) 
pxEvítLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

1703 
	`vLi°Remove
––
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

1707 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

1708 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

1709 
	}
}

1714 sig√d 
p‹tBASE_TYPE
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
xLi°
 * c⁄° 
pxEvítLi°
 )

1716 
tskTCB
 *
pxUnblockedTCB
;

1717 
p‹tBASE_TYPE
 
xRëu∫
;

1732 
pxUnblockedTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

1733 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

1734 
	`vLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

1736 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

1738 
	`vLi°Remove
–&–
pxUnblockedTCB
->
xGíîicLi°Iãm
 ) );

1739 
	`¥vAddTaskToRódyQueue
–
pxUnblockedTCB
 );

1745 
	`vLi°In£πEnd
––
xLi°
 * ) &–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

1748 if–
pxUnblockedTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1754 
xRëu∫
 = 
pdTRUE
;

1758 
xRëu∫
 = 
pdFALSE
;

1761  
xRëu∫
;

1762 
	}
}

1765 
	$vTaskSëTimeOutSèã
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
 )

1767 
	`c⁄figASSERT
–
pxTimeOut
 );

1768 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

1769 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

1770 
	}
}

1773 
p‹tBASE_TYPE
 
	$xTaskCheckF‹TimeOut
–
xTimeOutTy≥
 * c⁄° 
pxTimeOut
, 
p‹tTickTy≥
 * c⁄° 
pxTicksToWaô
 )

1775 
p‹tBASE_TYPE
 
xRëu∫
;

1777 
	`c⁄figASSERT
–
pxTimeOut
 );

1778 
	`c⁄figASSERT
–
pxTicksToWaô
 );

1780 
	`èskENTER_CRITICAL
();

1782 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1786 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

1788 
xRëu∫
 = 
pdFALSE
;

1793 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( ( 
p‹tTickTy≥
 ) 
xTickCou¡
 >–p‹tTickTy≥ )ÖxTimeOut->
xTimeOnE¡îög
 ) )

1799 
xRëu∫
 = 
pdTRUE
;

1801 if–––
p‹tTickTy≥
 ) ( (Ö‹tTickTy≥ ) 
xTickCou¡
 - (Ö‹tTickTy≥ ) 
pxTimeOut
->
xTimeOnE¡îög
 ) ) < (Ö‹tTickTy≥ ) *
pxTicksToWaô
 )

1804 *
pxTicksToWaô
 -––
p‹tTickTy≥
 ) 
xTickCou¡
 - (Ö‹tTickTy≥ ) 
pxTimeOut
->
xTimeOnE¡îög
 );

1805 
	`vTaskSëTimeOutSèã
–
pxTimeOut
 );

1806 
xRëu∫
 = 
pdFALSE
;

1810 
xRëu∫
 = 
pdTRUE
;

1813 
	`èskEXIT_CRITICAL
();

1815  
xRëu∫
;

1816 
	}
}

1819 
	$vTaskMis£dYõld
( )

1821 
xMis£dYõld
 = 
pdTRUE
;

1822 
	}
}

1825 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1826 
p‹tBASE_TYPE
 
	$uxTaskGëTaskNumbî
–
xTaskH™dÀ
 
xTask
 )

1828 
p‹tBASE_TYPE
 
uxRëu∫
;

1829 
tskTCB
 *
pxTCB
;

1831 if–
xTask
 !
NULL
 )

1833 
pxTCB
 = ( 
tskTCB
 * ) 
xTask
;

1834 
uxRëu∫
 = 
pxTCB
->
uxTaskNumbî
;

1838 
uxRëu∫
 = 0U;

1841  
uxRëu∫
;

1842 
	}
}

1846 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1847 
	$vTaskSëTaskNumbî
–
xTaskH™dÀ
 
xTask
, 
p‹tBASE_TYPE
 
uxH™dÀ
 )

1849 
tskTCB
 *
pxTCB
;

1851 if–
xTask
 !
NULL
 )

1853 
pxTCB
 = ( 
tskTCB
 * ) 
xTask
;

1854 
pxTCB
->
uxTaskNumbî
 = 
uxH™dÀ
;

1856 
	}
}

1871 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

1874 –Ë
pvP¨amëîs
;

1879 
	`¥vCheckTasksWaôögTîmö©i⁄
();

1881 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

1887 
	`èskYIELD
();

1891 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

1902 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
p‹tBASE_TYPE
 ) 1 )

1904 
	`èskYIELD
();

1909 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

1911 
	`vAµliˇti⁄IdÀHook
( );

1918 
	`vAµliˇti⁄IdÀHook
();

1922 
	}
}

1936 
	$¥vInôüli£TCBV¨übÀs
–
tskTCB
 *
pxTCB
, c⁄° sig√d * c⁄° 
pcName
, 
p‹tBASE_TYPE
 
uxPri‹ôy
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
, 
usSèckDïth
 )

1939 #i‡
c⁄figMAX_TASK_NAME_LEN
 > 1

1942 
	`°∫˝y
––* ) 
pxTCB
->
pcTaskName
, ( c⁄° * ) 
pcName
, ( Ë
c⁄figMAX_TASK_NAME_LEN
 );

1945 
pxTCB
->
pcTaskName
[ ( Ë
c⁄figMAX_TASK_NAME_LEN
 - ( ) 1 ] = ( signed ) '\0';

1949 if–
uxPri‹ôy
 >
c⁄figMAX_PRIORITIES
 )

1951 
uxPri‹ôy
 = 
c⁄figMAX_PRIORITIES
 - ( 
p‹tBASE_TYPE
 ) 1U;

1954 
pxTCB
->
uxPri‹ôy
 = uxPriority;

1955 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1957 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

1961 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1962 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1966 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xGíîicLi°Iãm
 ),ÖxTCB );

1969 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
uxPri‹ôy
 );

1970 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xEvítLi°Iãm
 ),ÖxTCB );

1972 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

1974 
pxTCB
->
uxCrôiˇlNe°ög
 = ( 
p‹tBASE_TYPE
 ) 0U;

1978 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

1980 
pxTCB
->
pxTaskTag
 = 
NULL
;

1984 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

1986 
pxTCB
->
ulRunTimeCou¡î
 = 0UL;

1990 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

1992 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxTCB->
pxSèck
, 
usSèckDïth
 );

1996 –Ë
xRegi⁄s
;

1997 –Ë
usSèckDïth
;

2000 
	}
}

2003 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

2005 
	$vTaskAŒoˇãMPURegi⁄s
–
xTaskH™dÀ
 
xTaskToModify
, c⁄° 
xMem‹yRegi⁄
 * c⁄° 
xRegi⁄s
 )

2007 
tskTCB
 *
pxTCB
;

2009 if–
xTaskToModify
 =
pxCuºítTCB
 )

2011 
xTaskToModify
 = 
NULL
;

2015 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

2017 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

2018 
	}
}

2022 
	$¥vInôüli£TaskLi°s
( )

2024 
p‹tBASE_TYPE
 
uxPri‹ôy
;

2026  
uxPri‹ôy
 = ( 
p‹tBASE_TYPE
 ) 0U; uxPri‹ôy < 
c⁄figMAX_PRIORITIES
; uxPriority++ )

2028 
	`vLi°Inôüli£
––
xLi°
 * ) &–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

2031 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedTaskLi°1
 );

2032 
	`vLi°Inôüli£
––
xLi°
 * ) &
xDñayedTaskLi°2
 );

2033 
	`vLi°Inôüli£
––
xLi°
 * ) &
xPídögRódyLi°
 );

2035 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2037 
	`vLi°Inôüli£
––
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
 );

2041 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2043 
	`vLi°Inôüli£
––
xLi°
 * ) &
xSu•ídedTaskLi°
 );

2049 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

2050 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

2051 
	}
}

2054 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

2056 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2058 
p‹tBASE_TYPE
 
xLi°IsEm±y
;

2062 if–
uxTasksDñëed
 > ( 
p‹tBASE_TYPE
 ) 0U )

2064 
	`vTaskSu•ídAŒ
();

2065 
xLi°IsEm±y
 = 
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 );

2066 
	`xTaskResumeAŒ
();

2068 if–
xLi°IsEm±y
 =
pdFALSE
 )

2070 
tskTCB
 *
pxTCB
;

2072 
	`èskENTER_CRITICAL
();

2074 
pxTCB
 = ( 
tskTCB
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–––
xLi°
 * ) &
xTasksWaôögTîmö©i⁄
 ) );

2075 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2076 --
uxCuºítNumbîOfTasks
;

2077 --
uxTasksDñëed
;

2079 
	`èskEXIT_CRITICAL
();

2081 
	`¥vDñëeTCB
–
pxTCB
 );

2086 
	}
}

2089 
	$¥vAddCuºítTaskToDñayedLi°
–
p‹tTickTy≥
 
xTimeToWake
 )

2092 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

2094 if–
xTimeToWake
 < 
xTickCou¡
 )

2097 
	`vLi°In£π
––
xLi°
 * ) 
pxOvîÊowDñayedTaskLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2102 
	`vLi°In£π
––
xLi°
 * ) 
pxDñayedTaskLi°
, ( 
xLi°Iãm
 * ) &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2107 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

2109 
xNextTaskUnblockTime
 = 
xTimeToWake
;

2112 
	}
}

2115 
tskTCB
 *
	$¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
p‹tSTACK_TYPE
 *
puxSèckBuf„r
 )

2117 
tskTCB
 *
pxNewTCB
;

2121 
pxNewTCB
 = ( 
tskTCB
 * ) 
	`pvP‹tMÆloc
( (ÅskTCB ) );

2123 if–
pxNewTCB
 !
NULL
 )

2128 
pxNewTCB
->
pxSèck
 = ( 
p‹tSTACK_TYPE
 * ) 
	`pvP‹tMÆlocAlig√d
––––
size_t
 )
usSèckDïth
 ) * –p‹tSTACK_TYPE ) ), 
puxSèckBuf„r
 );

2130 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

2133 
	`vP‹tFªe
–
pxNewTCB
 );

2134 
pxNewTCB
 = 
NULL
;

2139 
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
usSèckDïth
 * –
p‹tSTACK_TYPE
 ) );

2143  
pxNewTCB
;

2144 
	}
}

2147 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2149 
	$¥vLi°TaskWôhöSögÀLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, sig√d 
cSètus
 )

2151 vﬁ©ûê
tskTCB
 *
pxNextTCB
, *
pxFú°TCB
;

2152 
usSèckRemaöög
;

2153 
PRIVILEGED_DATA
 
pcSètusSåög
[ 50 ];

2156 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2159 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2160 #i‡–
p‹tSTACK_GROWTH
 > 0 )

2162 
usSèckRemaöög
 = 
	`usTaskCheckFªeSèckS∑˚
––* ) 
pxNextTCB
->
pxEndOfSèck
 );

2166 
usSèckRemaöög
 = 
	`usTaskCheckFªeSèckS∑˚
––* ) 
pxNextTCB
->
pxSèck
 );

2170 
	`•rötf
–
pcSètusSåög
, ( * ) "%s\t\t%c\t%u\t%u\t%u\r\n", 
pxNextTCB
->
pcTaskName
, 
cSètus
, ( ËpxNextTCB->
uxPri‹ôy
, 
usSèckRemaöög
, ( ËpxNextTCB->
uxTCBNumbî
 );

2171 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( * ) 
pcSètusSåög
 );

2173 }  
pxNextTCB
 !
pxFú°TCB
 );

2174 
	}
}

2179 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2181 
	$¥vGíî©eRunTimeSètsF‹TasksInLi°
–c⁄° sig√d *
pcWrôeBuf„r
, 
xLi°
 *
pxLi°
, 
ulTŸÆRunTime
 )

2183 vﬁ©ûê
tskTCB
 *
pxNextTCB
, *
pxFú°TCB
;

2184 
ulSètsAsPî˚¡age
;

2187 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2191 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2194 if–
ulTŸÆRunTime
 > 0UL )

2197 if–
pxNextTCB
->
ulRunTimeCou¡î
 == 0UL )

2200 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t0\t\t0%%\r\n", 
pxNextTCB
->
pcTaskName
 );

2207 
ulSètsAsPî˚¡age
 = 
pxNextTCB
->
ulRunTimeCou¡î
 / 
ulTŸÆRunTime
;

2209 if–
ulSètsAsPî˚¡age
 > 0UL )

2211 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


2213 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%lu\t\t%lu%%\r\n", 
pxNextTCB
->
pcTaskName
,ÖxNextTCB->
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

2219 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%u\t\t%u%%\r\n", 
pxNextTCB
->
pcTaskName
, ( ËpxNextTCB->
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

2227 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


2229 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%lu\t\t<1%%\r\n", 
pxNextTCB
->
pcTaskName
,ÖxNextTCB->
ulRunTimeCou¡î
 );

2235 
	`•rötf
–
pcSètsSåög
, ( * ) "%s\t\t%u\t\t<1%%\r\n", 
pxNextTCB
->
pcTaskName
, ( ËpxNextTCB->
ulRunTimeCou¡î
 );

2241 
	`°rˇt
––* ) 
pcWrôeBuf„r
, ( * ) 
pcSètsSåög
 );

2244 }  
pxNextTCB
 !
pxFú°TCB
 );

2245 
	}
}

2250 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

2252 
	$usTaskCheckFªeSèckS∑˚
–c⁄° * 
pucSèckByã
 )

2254 
usCou¡
 = 0U;

2256  *
pucSèckByã
 =
tskSTACK_FILL_BYTE
 )

2258 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

2259 
usCou¡
++;

2262 
usCou¡
 /–
p‹tSTACK_TYPE
 );

2264  
usCou¡
;

2265 
	}
}

2270 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

2272 
p‹tBASE_TYPE
 
	$uxTaskGëSèckHighW©îM¨k
–
xTaskH™dÀ
 
xTask
 )

2274 
tskTCB
 *
pxTCB
;

2275 *
pcEndOfSèck
;

2276 
p‹tBASE_TYPE
 
uxRëu∫
;

2278 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

2280 #i‡
p‹tSTACK_GROWTH
 < 0

2282 
pcEndOfSèck
 = ( * ) 
pxTCB
->
pxSèck
;

2286 
pcEndOfSèck
 = ( * ) 
pxTCB
->
pxEndOfSèck
;

2290 
uxRëu∫
 = ( 
p‹tBASE_TYPE
 ) 
	`usTaskCheckFªeSèckS∑˚
–
pcEndOfSèck
 );

2292  
uxRëu∫
;

2293 
	}
}

2298 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2300 
	$¥vDñëeTCB
–
tskTCB
 *
pxTCB
 )

2304 
	`p‹tCLEAN_UP_TCB
–
pxTCB
 );

2308 
	`vP‹tFªeAlig√d
–
pxTCB
->
pxSèck
 );

2309 
	`vP‹tFªe
–
pxTCB
 );

2310 
	}
}

2317 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

2319 
xTaskH™dÀ
 
	$xTaskGëCuºítTaskH™dÀ
( )

2321 
xTaskH™dÀ
 
xRëu∫
;

2326 
xRëu∫
 = 
pxCuºítTCB
;

2328  
xRëu∫
;

2329 
	}
}

2335 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

2337 
p‹tBASE_TYPE
 
	$xTaskGëScheduÀrSèã
( )

2339 
p‹tBASE_TYPE
 
xRëu∫
;

2341 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

2343 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

2347 if–
uxScheduÀrSu•íded
 =–
p‹tBASE_TYPE
 ) 
pdFALSE
 )

2349 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

2353 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

2357  
xRëu∫
;

2358 
	}
}

2363 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2365 
	$vTaskPri‹ôyInhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 )

2367 
tskTCB
 * c⁄° 
pxTCB
 = (ÅskTCB * ) 
pxMuãxHﬁdî
;

2369 
	`c⁄figASSERT
–
pxMuãxHﬁdî
 );

2371 if–
pxTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

2374 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 ) 
pxCuºítTCB
->
uxPri‹ôy
 );

2378 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxTCB
->
uxPri‹ôy
 ] ), &–pxTCB->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

2380 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2383 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

2384 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

2389 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

2392 
	`åa˚TASK_PRIORITY_INHERIT
–
pxTCB
, 
pxCuºítTCB
->
uxPri‹ôy
 );

2394 
	}
}

2399 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2401 
	$vTaskPri‹ôyDisöhîô
–
xTaskH™dÀ
 * c⁄° 
pxMuãxHﬁdî
 )

2403 
tskTCB
 * c⁄° 
pxTCB
 = (ÅskTCB * ) 
pxMuãxHﬁdî
;

2405 if–
pxMuãxHﬁdî
 !
NULL
 )

2407 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

2411 
	`vLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2415 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

2416 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

2417 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), 
c⁄figMAX_PRIORITIES
 - ( 
p‹tTickTy≥
 )ÖxTCB->
uxPri‹ôy
 );

2418 
	`¥vAddTaskToRódyQueue
–
pxTCB
 );

2421 
	}
}

2426 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

2428 
	$vTaskE¡îCrôiˇl
( )

2430 
	`p‹tDISABLE_INTERRUPTS
();

2432 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

2434 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

2436 
	}
}

2441 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

2443 
	$vTaskExôCrôiˇl
( )

2445 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

2447 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0U )

2449 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

2451 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0U )

2453 
	`p‹tENABLE_INTERRUPTS
();

2457 
	}
}

	@Source/timers.c

57 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

59 
	~"FªeRTOS.h
"

60 
	~"èsk.h
"

61 
	~"queue.h
"

62 
	~"timîs.h
"

64 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


70 #i‡–
c⁄figUSE_TIMERS
 == 1 )

73 
	#tmrNO_DELAY
 ( 
p‹tTickTy≥
 ) 0U

	)

76 
	stmrTimîC⁄åﬁ


78 c⁄° sig√d *
	mpcTimîName
;

79 
xLi°Iãm
 
	mxTimîLi°Iãm
;

80 
p‹tTickTy≥
 
	mxTimîPîiodInTicks
;

81 
p‹tBASE_TYPE
 
	muxAutoRñﬂd
;

82 *
	mpvTimîID
;

83 
tmrTIMER_CALLBACK
 
	mpxCÆlbackFun˘i⁄
;

84 } 
	txTIMER
;

88 
	stmrTimîQueueMesßge


90 
p‹tBASE_TYPE
 
	mxMesßgeID
;

91 
p‹tTickTy≥
 
	mxMesßgeVÆue
;

92 
xTIMER
 * 
	mpxTimî
;

93 } 
	txTIMER_MESSAGE
;

99 
PRIVILEGED_DATA
 
xLi°
 
	gxA˘iveTimîLi°1
;

100 
PRIVILEGED_DATA
 
xLi°
 
	gxA˘iveTimîLi°2
;

101 
PRIVILEGED_DATA
 
xLi°
 *
	gpxCuºítTimîLi°
;

102 
PRIVILEGED_DATA
 
xLi°
 *
	gpxOvîÊowTimîLi°
;

105 
PRIVILEGED_DATA
 
xQueueH™dÀ
 
	gxTimîQueue
 = 
NULL
;

107 #i‡–
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 == 1 )

109 
PRIVILEGED_DATA
 
xTaskH™dÀ
 
	gxTimîTaskH™dÀ
 = 
NULL
;

119 
	$¥vCheckF‹VÆidLi°AndQueue
–Ë
PRIVILEGED_FUNCTION
;

126 
	$¥vTimîTask
–*
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

132 
	$¥vPro˚ssRe˚ivedComm™ds
–Ë
PRIVILEGED_FUNCTION
;

138 
p‹tBASE_TYPE
 
	$¥vIn£πTimîInA˘iveLi°
–
xTIMER
 *
pxTimî
, 
p‹tTickTy≥
 
xNextExpúyTime
,Ö‹tTickTy≥ 
xTimeNow
,Ö‹tTickTy≥ 
xComm™dTime
 ) 
PRIVILEGED_FUNCTION
;

144 
	$¥vPro˚ssExpúedTimî
–
p‹tTickTy≥
 
xNextExpúeTime
,Ö‹tTickTy≥ 
xTimeNow
 ) 
PRIVILEGED_FUNCTION
;

150 
	$¥vSwôchTimîLi°s
–
p‹tTickTy≥
 
xLa°Time
 ) 
PRIVILEGED_FUNCTION
;

156 
p‹tTickTy≥
 
	$¥vSam∂eTimeNow
–
p‹tBASE_TYPE
 *
pxTimîLi°sWîeSwôched
 ) 
PRIVILEGED_FUNCTION
;

164 
p‹tTickTy≥
 
	$¥vGëNextExpúeTime
–
p‹tBASE_TYPE
 *
pxLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

170 
	$¥vPro˚ssTimîOrBlockTask
–
p‹tTickTy≥
 
xNextExpúeTime
, 
p‹tBASE_TYPE
 
xLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

174 
p‹tBASE_TYPE
 
	$xTimîCª©eTimîTask
( )

176 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFAIL
;

182 
	`¥vCheckF‹VÆidLi°AndQueue
();

184 if–
xTimîQueue
 !
NULL
 )

186 #i‡–
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 == 1 )

190 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
, ( c⁄° sig√d * ) "Tm∏Svc", ( Ë
c⁄figTIMER_TASK_STACK_DEPTH
, 
NULL
, ( 
p‹tBASE_TYPE
 ) 
c⁄figTIMER_TASK_PRIORITY
, &
xTimîTaskH™dÀ
 );

195 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
, ( c⁄° sig√d * ) "Tm∏Svc", ( Ë
c⁄figTIMER_TASK_STACK_DEPTH
, 
NULL
, ( 
p‹tBASE_TYPE
 ) 
c⁄figTIMER_TASK_PRIORITY
, NULL);

200 
	`c⁄figASSERT
–
xRëu∫
 );

201  
xRëu∫
;

202 
	}
}

205 
xTimîH™dÀ
 
	$xTimîCª©e
–c⁄° sig√d *
pcTimîName
, 
p‹tTickTy≥
 
xTimîPîiodInTicks
, 
p‹tBASE_TYPE
 
uxAutoRñﬂd
, *
pvTimîID
, 
tmrTIMER_CALLBACK
 
pxCÆlbackFun˘i⁄
 )

207 
xTIMER
 *
pxNewTimî
;

210 if–
xTimîPîiodInTicks
 =–
p‹tTickTy≥
 ) 0U )

212 
pxNewTimî
 = 
NULL
;

213 
	`c⁄figASSERT
––
xTimîPîiodInTicks
 > 0 ) );

217 
pxNewTimî
 = ( 
xTIMER
 * ) 
	`pvP‹tMÆloc
( ( xTIMER ) );

218 if–
pxNewTimî
 !
NULL
 )

222 
	`¥vCheckF‹VÆidLi°AndQueue
();

225 
pxNewTimî
->
pcTimîName
 =ÖcTimerName;

226 
pxNewTimî
->
xTimîPîiodInTicks
 = xTimerPeriodInTicks;

227 
pxNewTimî
->
uxAutoRñﬂd
 = uxAutoReload;

228 
pxNewTimî
->
pvTimîID
 =ÖvTimerID;

229 
pxNewTimî
->
pxCÆlbackFun˘i⁄
 =ÖxCallbackFunction;

230 
	`vLi°Inôüli£Iãm
–&–
pxNewTimî
->
xTimîLi°Iãm
 ) );

232 
	`åa˚TIMER_CREATE
–
pxNewTimî
 );

236 
	`åa˚TIMER_CREATE_FAILED
();

240  ( 
xTimîH™dÀ
 ) 
pxNewTimî
;

241 
	}
}

244 
p‹tBASE_TYPE
 
	$xTimîGíîicComm™d
–
xTimîH™dÀ
 
xTimî
, 
p‹tBASE_TYPE
 
xComm™dID
, 
p‹tTickTy≥
 
xO±i⁄ÆVÆue
, sig√dÖ‹tBASE_TYPE *
pxHighîPri‹ôyTaskWokí
,Ö‹tTickTy≥ 
xBlockTime
 )

246 
p‹tBASE_TYPE
 
xRëu∫
 = 
pdFAIL
;

247 
xTIMER_MESSAGE
 
xMesßge
;

251 if–
xTimîQueue
 !
NULL
 )

254 
xMesßge
.
xMesßgeID
 = 
xComm™dID
;

255 
xMesßge
.
xMesßgeVÆue
 = 
xO±i⁄ÆVÆue
;

256 
xMesßge
.
pxTimî
 = ( 
xTIMER
 * ) 
xTimî
;

258 if–
pxHighîPri‹ôyTaskWokí
 =
NULL
 )

260 if–
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_RUNNING
 )

262 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xBlockTime
 );

266 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 );

271 
xRëu∫
 = 
	`xQueueSídToBackFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

274 
	`åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xComm™dID
, 
xO±i⁄ÆVÆue
, 
xRëu∫
 );

277  
xRëu∫
;

278 
	}
}

281 #i‡–
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 == 1 )

283 
xTaskH™dÀ
 
	$xTimîGëTimîD´m⁄TaskH™dÀ
( )

287 
	`c⁄figASSERT
––
xTimîTaskH™dÀ
 !
NULL
 ) );

288  
xTimîTaskH™dÀ
;

289 
	}
}

294 
	$¥vPro˚ssExpúedTimî
–
p‹tTickTy≥
 
xNextExpúeTime
,Ö‹tTickTy≥ 
xTimeNow
 )

296 
xTIMER
 *
pxTimî
;

297 
p‹tBASE_TYPE
 
xResu…
;

301 
pxTimî
 = ( 
xTIMER
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

302 
	`vLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

303 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

307 if–
pxTimî
->
uxAutoRñﬂd
 =–
p‹tBASE_TYPE
 ) 
pdTRUE
 )

315 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xNextExpúeTime
 +ÖxTimî->
xTimîPîiodInTicks
 ), 
xTimeNow
, xNextExpúeTimêË=
pdTRUE
 )

319 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

320 
	`c⁄figASSERT
–
xResu…
 );

321 –Ë
xResu…
;

326 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
xTimîH™dÀ
 )ÖxTimer );

327 
	}
}

330 
	$¥vTimîTask
–*
pvP¨amëîs
 )

332 
p‹tTickTy≥
 
xNextExpúeTime
;

333 
p‹tBASE_TYPE
 
xLi°WasEm±y
;

336 –Ë
pvP¨amëîs
;

342 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

346 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

349 
	`¥vPro˚ssRe˚ivedComm™ds
();

351 
	}
}

354 
	$¥vPro˚ssTimîOrBlockTask
–
p‹tTickTy≥
 
xNextExpúeTime
, 
p‹tBASE_TYPE
 
xLi°WasEm±y
 )

356 
p‹tTickTy≥
 
xTimeNow
;

357 
p‹tBASE_TYPE
 
xTimîLi°sWîeSwôched
;

359 
	`vTaskSu•ídAŒ
();

366 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

367 if–
xTimîLi°sWîeSwôched
 =
pdFALSE
 )

370 if––
xLi°WasEm±y
 =
pdFALSE
 ) && ( 
xNextExpúeTime
 <
xTimeNow
 ) )

372 
	`xTaskResumeAŒ
();

373 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
xTimeNow
 );

383 
	`vQueueWaôF‹MesßgeRe°ri˘ed
–
xTimîQueue
, ( 
xNextExpúeTime
 - 
xTimeNow
 ) );

385 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

391 
	`p‹tYIELD_WITHIN_API
();

397 
	`xTaskResumeAŒ
();

400 
	}
}

403 
p‹tTickTy≥
 
	$¥vGëNextExpúeTime
–
p‹tBASE_TYPE
 *
pxLi°WasEm±y
 )

405 
p‹tTickTy≥
 
xNextExpúeTime
;

414 *
pxLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 );

415 if–*
pxLi°WasEm±y
 =
pdFALSE
 )

417 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

422 
xNextExpúeTime
 = ( 
p‹tTickTy≥
 ) 0U;

425  
xNextExpúeTime
;

426 
	}
}

429 
p‹tTickTy≥
 
	$¥vSam∂eTimeNow
–
p‹tBASE_TYPE
 *
pxTimîLi°sWîeSwôched
 )

431 
p‹tTickTy≥
 
xTimeNow
;

432 
p‹tTickTy≥
 
xLa°Time
 = (ÖortTickType ) 0U;

434 
xTimeNow
 = 
	`xTaskGëTickCou¡
();

436 if–
xTimeNow
 < 
xLa°Time
 )

438 
	`¥vSwôchTimîLi°s
–
xLa°Time
 );

439 *
pxTimîLi°sWîeSwôched
 = 
pdTRUE
;

443 *
pxTimîLi°sWîeSwôched
 = 
pdFALSE
;

446 
xLa°Time
 = 
xTimeNow
;

448  
xTimeNow
;

449 
	}
}

452 
p‹tBASE_TYPE
 
	$¥vIn£πTimîInA˘iveLi°
–
xTIMER
 *
pxTimî
, 
p‹tTickTy≥
 
xNextExpúyTime
,Ö‹tTickTy≥ 
xTimeNow
,Ö‹tTickTy≥ 
xComm™dTime
 )

454 
p‹tBASE_TYPE
 
xPro˚ssTimîNow
 = 
pdFALSE
;

456 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xNextExpúyTime
 );

457 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

459 if–
xNextExpúyTime
 <
xTimeNow
 )

463 if–––
p‹tTickTy≥
 ) ( 
xTimeNow
 - 
xComm™dTime
 ) ) >
pxTimî
->
xTimîPîiodInTicks
 )

467 
xPro˚ssTimîNow
 = 
pdTRUE
;

471 
	`vLi°In£π
–
pxOvîÊowTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

476 if––
xTimeNow
 < 
xComm™dTime
 ) && ( 
xNextExpúyTime
 >= xCommandTime ) )

481 
xPro˚ssTimîNow
 = 
pdTRUE
;

485 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

489  
xPro˚ssTimîNow
;

490 
	}
}

493 
	$¥vPro˚ssRe˚ivedComm™ds
( )

495 
xTIMER_MESSAGE
 
xMesßge
;

496 
xTIMER
 *
pxTimî
;

497 
p‹tBASE_TYPE
 
xTimîLi°sWîeSwôched
, 
xResu…
;

498 
p‹tTickTy≥
 
xTimeNow
;

502 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

504  
	`xQueueRe˚ive
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 ) !
pdFAIL
 )

506 
pxTimî
 = 
xMesßge
.pxTimer;

511 if–
pxTimî
 !
NULL
 )

513 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) =
pdFALSE
 )

516 
	`vLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

520 
	`åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßge
.
xMesßgeID
, xMesßge.
xMesßgeVÆue
 );

522  
xMesßge
.
xMesßgeID
 )

524 
tmrCOMMAND_START
 :

526 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, 
xMesßge
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
, xMesßge.xMesßgeVÆuêË=
pdTRUE
 )

530 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
xTimîH™dÀ
 )ÖxTimer );

532 if–
pxTimî
->
uxAutoRñﬂd
 =–
p‹tBASE_TYPE
 ) 
pdTRUE
 )

534 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START
, 
xMesßge
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
NULL
, 
tmrNO_DELAY
 );

535 
	`c⁄figASSERT
–
xResu…
 );

536 –Ë
xResu…
;

541 
tmrCOMMAND_STOP
 :

546 
tmrCOMMAND_CHANGE_PERIOD
 :

547 
pxTimî
->
xTimîPîiodInTicks
 = 
xMesßge
.
xMesßgeVÆue
;

548 
	`c⁄figASSERT
––
pxTimî
->
xTimîPîiodInTicks
 > 0 ) );

549 
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xTimeNow
 +ÖxTimî->
xTimîPîiodInTicks
 ), xTimeNow, xTimeNow );

552 
tmrCOMMAND_DELETE
 :

555 
	`vP‹tFªe
–
pxTimî
 );

563 
	}
}

566 
	$¥vSwôchTimîLi°s
–
p‹tTickTy≥
 
xLa°Time
 )

568 
p‹tTickTy≥
 
xNextExpúeTime
, 
xRñﬂdTime
;

569 
xLi°
 *
pxTemp
;

570 
xTIMER
 *
pxTimî
;

571 
p‹tBASE_TYPE
 
xResu…
;

574 –Ë
xLa°Time
;

580  
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 ) =
pdFALSE
 )

582 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

585 
pxTimî
 = ( 
xTIMER
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

586 
	`vLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

591 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
xTimîH™dÀ
 )ÖxTimer );

593 if–
pxTimî
->
uxAutoRñﬂd
 =–
p‹tBASE_TYPE
 ) 
pdTRUE
 )

601 
xRñﬂdTime
 = ( 
xNextExpúeTime
 + 
pxTimî
->
xTimîPîiodInTicks
 );

602 if–
xRñﬂdTime
 > 
xNextExpúeTime
 )

604 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xRñﬂdTime
 );

605 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

606 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

610 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

611 
	`c⁄figASSERT
–
xResu…
 );

612 –Ë
xResu…
;

617 
pxTemp
 = 
pxCuºítTimîLi°
;

618 
pxCuºítTimîLi°
 = 
pxOvîÊowTimîLi°
;

619 
pxOvîÊowTimîLi°
 = 
pxTemp
;

620 
	}
}

623 
	$¥vCheckF‹VÆidLi°AndQueue
( )

628 
	`èskENTER_CRITICAL
();

630 if–
xTimîQueue
 =
NULL
 )

632 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

633 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

634 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

635 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

636 
xTimîQueue
 = 
	`xQueueCª©e
––
p‹tBASE_TYPE
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
xTIMER_MESSAGE
 ) );

639 
	`èskEXIT_CRITICAL
();

640 
	}
}

643 
p‹tBASE_TYPE
 
	$xTimîIsTimîA˘ive
–
xTimîH™dÀ
 
xTimî
 )

645 
p‹tBASE_TYPE
 
xTimîIsInA˘iveLi°
;

646 
xTIMER
 *
pxTimî
 = ( xTIMER * ) 
xTimî
;

649 
	`èskENTER_CRITICAL
();

654 
xTimîIsInA˘iveLi°
 = !–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) );

656 
	`èskEXIT_CRITICAL
();

658  
xTimîIsInA˘iveLi°
;

659 
	}
}

662 *
	$pvTimîGëTimîID
–
xTimîH™dÀ
 
xTimî
 )

664 
xTIMER
 *
pxTimî
 = ( xTIMER * ) 
xTimî
;

666  
pxTimî
->
pvTimîID
;

667 
	}
}

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #ifde‡
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT
 \

96 || 
deföed
 
_LIBC_TEST


97 #ifde‡
__LDBL_COMPAT


99 #ifde‡
__USE_ISOC99


100 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

101 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

102 #ifde‡
__REDIRECT_NTH


103 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

104 
__∆dbl_√xâow¨df
)

105 
	`__©åibuã__
 ((
__c⁄°__
));

106 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

107 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

108 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

109 (
__x
, 
__y
),

110 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 #unde‡
__MATHDECL_1


115 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

116 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

117 
¨gs
, 
Æüs
)

	)

118 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

119 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

125 #i‚de‡
_Ml⁄g_doubÀ_


126 
	#_Ml⁄g_doubÀ_
 

	)

128 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

129 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

130 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

131 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

132 
	#__MATH_DECLARE_LDOUBLE
 1

	)

133 
	~<bôs/m©hˇŒs.h
>

134 #unde‡
_MdoubÀ_


135 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


136 #unde‡
_MdoubÀ_END_NAMESPACE


137 #unde‡
__MATH_PRECNAME


142 #unde‡
__MATHDECL_1


143 #unde‡
__MATHDECL


144 #unde‡
__MATHCALL


147 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


149 
signgam
;

154 #ifde‡
__USE_ISOC99


192 
FP_NAN
 =

193 
	#FP_NAN
 0

	)

194 
FP_NAN
,

195 
FP_INFINITE
 =

196 
	#FP_INFINITE
 1

	)

197 
FP_INFINITE
,

198 
FP_ZERO
 =

199 
	#FP_ZERO
 2

	)

200 
FP_ZERO
,

201 
FP_SUBNORMAL
 =

202 
	#FP_SUBNORMAL
 3

	)

203 
FP_SUBNORMAL
,

204 
FP_NORMAL
 =

205 
	#FP_NORMAL
 4

	)

206 
FP_NORMAL


210 #ifde‡
__NO_LONG_DOUBLE_MATH


211 
	#Â˛assify
(
x
) \

212 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

214 
	#Â˛assify
(
x
) \

215 ( (
x
) ==  () \

216 ? 
	`__Â˛assifyf
 (
x
) \

217 :  (
x
) ==  () \

218 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

222 #ifde‡
__NO_LONG_DOUBLE_MATH


223 
	#signbô
(
x
) \

224 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

226 
	#signbô
(
x
) \

227 ( (
x
) ==  () \

228 ? 
	`__signbôf
 (
x
) \

229 :  (
x
) ==  () \

230 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

234 #ifde‡
__NO_LONG_DOUBLE_MATH


235 
	#isföôe
(
x
) \

236 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

238 
	#isföôe
(
x
) \

239 ( (
x
) ==  () \

240 ? 
	`__föôef
 (
x
) \

241 :  (
x
) ==  () \

242 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

246 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

250 #ifde‡
__NO_LONG_DOUBLE_MATH


251 
	#i¢™
(
x
) \

252 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

254 
	#i¢™
(
x
) \

255 ( (
x
) ==  () \

256 ? 
	`__i¢™f
 (
x
) \

257 :  (
x
) ==  () \

258 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

262 #ifde‡
__NO_LONG_DOUBLE_MATH


263 
	#isöf
(
x
) \

264 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

266 
	#isöf
(
x
) \

267 ( (
x
) ==  () \

268 ? 
	`__isöff
 (
x
) \

269 :  (
x
) ==  () \

270 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

274 
	#MATH_ERRNO
 1

	)

275 
	#MATH_ERREXCEPT
 2

	)

280 #i‚de‡
__FAST_MATH__


281 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

286 #ifde‡
__USE_GNU


288 #ifde‡
__NO_LONG_DOUBLE_MATH


289 
	#issig«lög
(
x
) \

290 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

292 
	#issig«lög
(
x
) \

293 ( (
x
) ==  () \

294 ? 
	`__issig«lögf
 (
x
) \

295 :  (
x
) ==  () \

296 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

300 #ifdef 
__USE_MISC


304 
_IEEE_
 = -1,

305 
_SVID_
,

306 
_XOPEN_
,

307 
_POSIX_
,

308 
_ISOC_


309 } 
	t_LIB_VERSION_TYPE
;

314 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

318 #ifde‡
__USE_MISC


324 #ifde‡
__˝lu•lus


325 
__ex˚±i⁄


327 
ex˚±i⁄


330 
ty≥
;

331 *
«me
;

332 
¨g1
;

333 
¨g2
;

334 
ªtvÆ
;

335 
	}
};

337 #ifde‡
__˝lu•lus


338 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

340 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

343 
	#X_TLOSS
 1.41484755040568800000e+16

	)

346 
	#DOMAIN
 1

	)

347 
	#SING
 2

	)

348 
	#OVERFLOW
 3

	)

349 
	#UNDERFLOW
 4

	)

350 
	#TLOSS
 5

	)

351 
	#PLOSS
 6

	)

354 
	#HUGE
 3.40282347e+38F

	)

358 #ifde‡
__USE_XOPEN


360 
	#MAXFLOAT
 3.40282347e+38F

	)

367 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


368 
	#M_E
 2.7182818284590452354

	)

369 
	#M_LOG2E
 1.4426950408889634074

	)

370 
	#M_LOG10E
 0.43429448190325182765

	)

371 
	#M_LN2
 0.69314718055994530942

	)

372 
	#M_LN10
 2.30258509299404568402

	)

373 
	#M_PI
 3.14159265358979323846

	)

374 
	#M_PI_2
 1.57079632679489661923

	)

375 
	#M_PI_4
 0.78539816339744830962

	)

376 
	#M_1_PI
 0.31830988618379067154

	)

377 
	#M_2_PI
 0.63661977236758134308

	)

378 
	#M_2_SQRTPI
 1.12837916709551257390

	)

379 
	#M_SQRT2
 1.41421356237309504880

	)

380 
	#M_SQRT1_2
 0.70710678118654752440

	)

386 #ifde‡
__USE_GNU


387 
	#M_El
 2.718281828459045235360287471352662498L

	)

388 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

389 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

390 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

391 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

392 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

393 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

394 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

395 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

396 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

397 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

398 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

399 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

406 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


407 
	#__NO_MATH_INLINES
 1

	)

410 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

417 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

418 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

419 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

420 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

421 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

422 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

426 #ifde‡
__USE_EXTERN_INLINES


427 
	~<bôs/m©hölöe.h
>

432 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

433 
	~<bôs/m©h-föôe.h
>

436 #ifde‡
__USE_ISOC99


440 #i‚de‡
isgª©î


441 
	#isgª©î
(
x
, 
y
) \

442 (
__exãnsi⁄__
 \

443 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

444 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

448 #i‚de‡
isgª©îequÆ


449 
	#isgª©îequÆ
(
x
, 
y
) \

450 (
__exãnsi⁄__
 \

451 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

452 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

456 #i‚de‡
i¶ess


457 
	#i¶ess
(
x
, 
y
) \

458 (
__exãnsi⁄__
 \

459 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

460 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

464 #i‚de‡
i¶es£quÆ


465 
	#i¶es£quÆ
(
x
, 
y
) \

466 (
__exãnsi⁄__
 \

467 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

468 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

472 #i‚de‡
i¶essgª©î


473 
	#i¶essgª©î
(
x
, 
y
) \

474 (
__exãnsi⁄__
 \

475 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

476 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

480 #i‚de‡
isun‹dîed


481 
	#isun‹dîed
(
u
, 
v
) \

482 (
__exãnsi⁄__
 \

483 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

484 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

489 
	g__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


175 *
	$°rdup
 (c⁄° *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 c⁄° *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 c⁄° *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 const *

228 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 const *

255 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 const *

307 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

324 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

326 #ifde‡
__OPTIMIZE__


327 
__exã∫_Æways_ölöe
 *

328 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


330  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

333 
__exã∫_Æways_ölöe
 const *

334 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


336  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

339 
	}
}

341 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

348 
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
__END_NAMESPACE_STD


353 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

354 c⁄° *
__ª°ri˘
 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

357 #ifde‡
__USE_POSIX


358 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

359 **
__ª°ri˘
 
__ßve_±r
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

363 #ifde‡
__USE_GNU


365 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


366 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

369 c⁄° *
__√edÀ
)

370 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

372 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

373 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

377 #ifde‡
__USE_GNU


381 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

382 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

387 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

390 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

391 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

392 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

396 
__BEGIN_NAMESPACE_STD


398 
size_t
 
	$°æí
 (c⁄° *
__s
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

400 
__END_NAMESPACE_STD


402 #ifdef 
__USE_XOPEN2K8


405 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

406 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 
__BEGIN_NAMESPACE_STD


412 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

413 
__END_NAMESPACE_STD


414 #ifde‡
__USE_XOPEN2K


422 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


425 #ifde‡
__REDIRECT_NTH


426 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

427 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

428 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

430 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

431 
__THROW
 
	`__n⁄nuŒ
 ((2));

432 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

437 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

442 #ifde‡
__USE_XOPEN2K8


444 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

450 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

452 #ifde‡
__USE_MISC


454 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

458 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

461 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

462 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

465 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


468 *
	`ödex
 (*
__s
, 
__c
)

469 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

471 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

473 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


474 
__exã∫_Æways_ölöe
 *

475 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


477  
	`__buûtö_ödex
 (
__s
, 
__c
);

480 
__exã∫_Æways_ölöe
 const *

481 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


483  
	`__buûtö_ödex
 (
__s
, 
__c
);

486 
	}
}

488 *
	$ödex
 (c⁄° *
__s
, 
__c
)

489 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

493 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


496 *
	`rödex
 (*
__s
, 
__c
)

497 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

499 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

501 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


502 
__exã∫_Æways_ölöe
 *

503 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


505  
	`__buûtö_rödex
 (
__s
, 
__c
);

508 
__exã∫_Æways_ölöe
 const *

509 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


511  
	`__buûtö_rödex
 (
__s
, 
__c
);

514 
	}
}

516 *
	$rödex
 (c⁄° *
__s
, 
__c
)

517 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

522 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

526 #ifdef 
__USE_GNU


527 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

533 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

538 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

541 #ifdef 
__USE_GNU


544 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

548 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

549 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

553 #ifdef 
__USE_MISC


556 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

557 c⁄° *
__ª°ri˘
 
__dñim
)

558 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

561 #ifdef 
__USE_XOPEN2K8


563 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

566 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

574 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 #ifdef 
__USE_GNU


583 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

584 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

587 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #i‚de‡
ba£«me


597 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


598 "C++" *
	$ba£«me
 (*
__fûíame
)

599 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

600 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

601 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

610 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

611 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


631 
	~<bôs/°rög.h
>

634 
	~<bôs/°rög2.h
>

637 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


639 
	~<bôs/°rög3.h
>

643 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_ATFILE


30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

33 #ifde‡
__USE_ATFILE


34 
	#__√ed_time•ec


	)

36 
	~<time.h
>

39 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


42 #i‚de‡
__dev_t_deföed


43 
__dev_t
 
	tdev_t
;

44 
	#__dev_t_deföed


	)

47 #i‚de‡
__gid_t_deföed


48 
__gid_t
 
	tgid_t
;

49 
	#__gid_t_deföed


	)

52 #i‚de‡
__öo_t_deföed


53 #i‚de‡
__USE_FILE_OFFSET64


54 
__öo_t
 
	töo_t
;

56 
__öo64_t
 
	töo_t
;

58 
	#__öo_t_deföed


	)

61 #i‚de‡
__mode_t_deföed


62 
__mode_t
 
	tmode_t
;

63 
	#__mode_t_deföed


	)

66 #i‚de‡
__∆ök_t_deföed


67 
__∆ök_t
 
	t∆ök_t
;

68 
	#__∆ök_t_deföed


	)

71 #i‚de‡
__off_t_deföed


72 #i‚de‡
__USE_FILE_OFFSET64


73 
__off_t
 
	toff_t
;

75 
__off64_t
 
	toff_t
;

77 
	#__off_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

86 #ifde‡
__USE_UNIX98


87 #i‚de‡
__blk˙t_t_deföed


88 #i‚de‡
__USE_FILE_OFFSET64


89 
__blk˙t_t
 
	tblk˙t_t
;

91 
__blk˙t64_t
 
	tblk˙t_t
;

93 
	#__blk˙t_t_deföed


	)

96 #i‚de‡
__blksize_t_deföed


97 
__blksize_t
 
	tblksize_t
;

98 
	#__blksize_t_deföed


	)

102 
	g__BEGIN_DECLS


104 
	~<bôs/°©.h
>

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


107 
	#S_IFMT
 
__S_IFMT


	)

108 
	#S_IFDIR
 
__S_IFDIR


	)

109 
	#S_IFCHR
 
__S_IFCHR


	)

110 
	#S_IFBLK
 
__S_IFBLK


	)

111 
	#S_IFREG
 
__S_IFREG


	)

112 #ifde‡
__S_IFIFO


113 
	#S_IFIFO
 
__S_IFIFO


	)

115 #ifde‡
__S_IFLNK


116 
	#S_IFLNK
 
__S_IFLNK


	)

118 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

119 && 
deföed
 
	g__S_IFSOCK


120 
	#S_IFSOCK
 
__S_IFSOCK


	)

126 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

128 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

129 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

130 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

131 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

132 #ifde‡
__S_IFIFO


133 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

135 #ifde‡
__S_IFLNK


136 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

139 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


140 
	#S_ISLNK
(
mode
Ë0

	)

143 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

144 && 
deföed
 
	g__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

146 #ñi‡
deföed
 
__USE_XOPEN2K


147 
	#S_ISSOCK
(
mode
Ë0

	)

154 #ifdef 
__USE_POSIX199309


155 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

156 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

157 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

163 
	#S_ISUID
 
__S_ISUID


	)

164 
	#S_ISGID
 
__S_ISGID


	)

166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
	#S_ISVTX
 
__S_ISVTX


	)

171 
	#S_IRUSR
 
__S_IREAD


	)

172 
	#S_IWUSR
 
__S_IWRITE


	)

173 
	#S_IXUSR
 
__S_IEXEC


	)

175 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

177 #ifde‡
__USE_MISC


178 
	#S_IREAD
 
S_IRUSR


	)

179 
	#S_IWRITE
 
S_IWUSR


	)

180 
	#S_IEXEC
 
S_IXUSR


	)

183 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

184 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

185 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

187 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

189 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

190 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

191 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

193 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

196 #ifdef 
__USE_MISC


198 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

199 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

200 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

202 
	#S_BLKSIZE
 512

	)

206 #i‚de‡
__USE_FILE_OFFSET64


208 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

209 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

213 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

215 #ifde‡
__REDIRECT_NTH


216 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

218 
	`__n⁄nuŒ
 ((1, 2));

219 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
°©64


	)

223 
	#f°©
 
f°©64


	)

226 #ifde‡
__USE_LARGEFILE64


227 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

229 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

232 #ifde‡
__USE_ATFILE


236 #i‚de‡
__USE_FILE_OFFSET64


237 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

238 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

239 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

243 
°©
 *
__ª°ri˘
 
__buf
,

244 
__Êag
),

245 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

247 
	#f°©©
 
f°©©64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

258 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


262 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

263 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

265 #ifde‡
__REDIRECT_NTH


266 
	`__REDIRECT_NTH
 (
l°©
,

267 (c⁄° *
__ª°ri˘
 
__fûe
,

268 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 
	#l°©
 
l°©64


	)

274 #ifde‡
__USE_LARGEFILE64


275 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

276 
°©64
 *
__ª°ri˘
 
__buf
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

283 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #ifde‡
__USE_MISC


290 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 #ifde‡
__USE_POSIX


296 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

299 #ifde‡
__USE_ATFILE


302 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

303 
__Êag
)

304 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

313 #ifdef 
__USE_GNU


316 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

320 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 #ifde‡
__USE_ATFILE


327 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2));

334 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


335 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_ATFILE


342 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

343 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

352 #ifde‡
__USE_ATFILE


356 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 #ifde‡
__USE_ATFILE


363 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

364 c⁄° 
time•ec
 
__times
[2],

365 
__Êags
)

366 
__THROW
 
	`__n⁄nuŒ
 ((2));

369 #ifde‡
__USE_XOPEN2K8


371 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

389 #i‚de‡
_STAT_VER


390 
	#_STAT_VER
 0

	)

392 #i‚de‡
_MKNOD_VER


393 
	#_MKNOD_VER
 0

	)

397 #i‚de‡
__USE_FILE_OFFSET64


398 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

399 
__THROW
 
	`__n⁄nuŒ
 ((3));

400 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

401 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

402 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
, 
__Êag
)

406 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

410 
°©
 *
__°©_buf
), 
__fx°©64
)

411 
	`__n⁄nuŒ
 ((3));

412 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__x°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__lx°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

419 c⁄° *
__fûíame
,

420 
°©
 *
__°©_buf
, 
__Êag
),

421 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

424 
	#__fx°©
 
__fx°©64


	)

425 
	#__x°©
 
__x°©64


	)

426 
	#__lx°©
 
__lx°©64


	)

430 #ifde‡
__USE_LARGEFILE64


431 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

433 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

434 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

435 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
, 
__Êag
)

439 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

441 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

442 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

444 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

445 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

446 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

448 #ifde‡
__USE_EXTERN_INLINES


451 
__exã∫_ölöe
 

452 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

454  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

455 
	}
}

457 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


458 
__exã∫_ölöe
 

459 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

461  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

462 
	}
}

465 
__exã∫_ölöe
 

466 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

468  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

469 
	}
}

471 #ifde‡
__USE_ATFILE


472 
__exã∫_ölöe
 

473 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

474 
__Êag
))

476  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

477 
	}
}

480 #ifde‡
__USE_MISC


481 
__exã∫_ölöe
 

482 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

484  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

485 
	}
}

488 #ifde‡
__USE_ATFILE


489 
__exã∫_ölöe
 

490 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

491 
__dev_t
 
__dev
))

493  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

494 
	}
}

497 #i‡
deföed
 
__USE_LARGEFILE64
 \

498 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

499 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

500 
__exã∫_ölöe
 

501 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

503  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

504 
	}
}

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


507 
__exã∫_ölöe
 

508 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

510  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

511 
	}
}

514 
__exã∫_ölöe
 

515 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

517  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

518 
	}
}

520 #ifde‡
__USE_ATFILE


521 
__exã∫_ölöe
 

522 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

523 
__Êag
))

525  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

526 
	}
}

533 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_MISC


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_MISC


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #ifde‡
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #ifde‡
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_MISC


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_MISC
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_MISC


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_MISC


886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

255 && 
deföed
 
	g__exã∫_Æways_ölöe
)

257 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

259 #ifde‡
__USE_ISOC99


260 
__loˇl_signgam
 = 0;

261  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

263  
	`lgamma_r
 (
__d
, &
signgam
);

265 
	}
}

266 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

268 #ifde‡
__USE_ISOC99


269 
__loˇl_signgam
 = 0;

270  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

272  
	`lgammaf_r
 (
__d
, &
signgam
);

274 
	}
}

275 #ifde‡
__MATH_DECLARE_LDOUBLE


276 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

278 #ifde‡
__USE_ISOC99


279 
__loˇl_signgam
 = 0;

280  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

282  
	`lgammÆ_r
 (
__d
, &
signgam
);

284 
	}
}

288 #i‡((
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
) \

289 && 
deföed
 
	g__exã∫_Æways_ölöe
)

291 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

293 #ifde‡
__USE_ISOC99


294 
__loˇl_signgam
 = 0;

295  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

297  
	`lgamma_r
 (
__d
, &
signgam
);

299 
	}
}

300 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

302 #ifde‡
__USE_ISOC99


303 
__loˇl_signgam
 = 0;

304  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

306  
	`lgammaf_r
 (
__d
, &
signgam
);

308 
	}
}

309 #ifde‡
__MATH_DECLARE_LDOUBLE


310 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

312 #ifde‡
__USE_ISOC99


313 
__loˇl_signgam
 = 0;

314  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

316  
	`lgammÆ_r
 (
__d
, &
signgam
);

318 
	}
}

323 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

324 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

325 #ifde‡
__MATH_DECLARE_LDOUBLE


326 #ifde‡
__NO_LONG_DOUBLE_MATH


327 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

329 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

334 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

335 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

336 #ifde‡
__MATH_DECLARE_LDOUBLE


337 #ifde‡
__NO_LONG_DOUBLE_MATH


338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

340 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

344 #ifde‡
__USE_ISOC99


346 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

347 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

348 #ifde‡
__MATH_DECLARE_LDOUBLE


349 #ifde‡
__NO_LONG_DOUBLE_MATH


350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

352 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

358 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

359 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

360 #ifde‡
__MATH_DECLARE_LDOUBLE


361 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

365 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

366 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

367 #ifde‡
__MATH_DECLARE_LDOUBLE


368 #ifde‡
__NO_LONG_DOUBLE_MATH


369 
__REDIRECT_NTH
 (
powl
, (, ),

370 
__pow_föôe
);

372 
__REDIRECT_NTH
 (
powl
, (, ),

373 
__powl_föôe
);

378 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

379 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

380 #ifde‡
__MATH_DECLARE_LDOUBLE


381 #ifde‡
__NO_LONG_DOUBLE_MATH


382 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

383 
__ªmaödî_föôe
);

385 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

386 
__ªmaödîl_föôe
);

390 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


392 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

393 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

394 #ifde‡
__MATH_DECLARE_LDOUBLE


395 #ifde‡
__NO_LONG_DOUBLE_MATH


396 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

397 
__sˇlb_föôe
);

399 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

400 
__sˇlbl_föôe
);

406 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

407 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

408 #ifde‡
__MATH_DECLARE_LDOUBLE


409 #ifde‡
__NO_LONG_DOUBLE_MATH


410 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

412 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

417 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

418 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

419 #ifde‡
__MATH_DECLARE_LDOUBLE


420 #ifde‡
__NO_LONG_DOUBLE_MATH


421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

423 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

427 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


429 
__gamma_r_föôe
 (, *);

430 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

432 
__loˇl_signgam
 = 0;

433 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

434  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

435 
	}
}

436 
__gammaf_r_föôe
 (, *);

437 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

439 
__loˇl_signgam
 = 0;

440 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

441  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

442 
	}
}

443 #ifde‡
__MATH_DECLARE_LDOUBLE


444 
__gammÆ_r_föôe
 (, *);

445 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

447 
__loˇl_signgam
 = 0;

448 #ifde‡
__NO_LONG_DOUBLE_MATH


449 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

451 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

453  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

454 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #ifde‡
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #ifde‡
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

33 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

34 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

35 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

36 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

37 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

38 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

39 || 
deföed
 
	g__btvî2__
)

43 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

44 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

46 #i‚de‡
__STRING_INLINE


47 #i‚de‡
__exã∫_ölöe


48 
	#__STRING_INLINE
 
ölöe


	)

50 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

55 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

56 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(
§c
))[
idx
])

	)

66 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

67 
	#mem˝y
(
de°
, 
§c
, 
n
) \

68 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

69 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

70 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

71 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

72 ((
n
) == 0 \

73 ? (
de°
) \

74 : (((
n
) % 4 == 0) \

75 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

76 : (((
n
) % 2 == 0) \

77 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

78 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

80 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

81 
size_t
 
__n
);

83 
__STRING_INLINE
 *

84 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

86 
__d0
, 
__d1
;

87 *
__tmp
 = 
__de°
;

88 
__asm__
 
__vﬁ©ûe__


96 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

97 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

99  
__de°
;

100 
	}
}

102 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

103 
size_t
 
__n
);

105 
__STRING_INLINE
 *

106 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

108 
__d0
, 
__d1
;

109 *
__tmp
 = 
__de°
;

110 
__asm__
 
__vﬁ©ûe__


123 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

124 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

126  
__de°
;

127 
	}
}

129 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

131 
__STRING_INLINE
 *

132 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

134 
__d0
, 
__d1
, 
__d2
;

135 *
__tmp
 = 
__de°
;

136 
__asm__
 
__vﬁ©ûe__


147 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

148 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

149 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

150 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

152  
__de°
;

153 
	}
}

155 
	#_HAVE_STRING_ARCH_memmove
 1

	)

156 #i‚de‡
_FORCE_INLINES


159 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

161 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

162 
	`__asm__
 ("memmove");

164 
__STRING_INLINE
 *

165 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

167 
__d0
, 
__d1
, 
__d2
;

168 *
__tmp
 = 
__de°
;

169 i‡(
__de°
 < 
__§c
)

170 
__asm__
 
__vﬁ©ûe__


173 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

174 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

175 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

176 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

178 
__asm__
 
__vﬁ©ûe__


182 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

183 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

184 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

185 "2" (
__n
 - 1 + (*Ë
__tmp
),

186 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

187  
__de°
;

188 
	}
}

192 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

193 #i‚de‡
_FORCE_INLINES


194 #i‚de‡
__PIC__


196 
__STRING_INLINE
 

197 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

199 
__d0
, 
__d1
, 
__d2
;

200 
__ªs
;

201 
__asm__
 
__vﬁ©ûe__


209 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

210 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

211 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

212 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

214  
__ªs
;

215 
	}
}

220 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

221 
	#_USE_STRING_ARCH_mem£t
 1

	)

222 
	#mem£t
(
s
, 
c
, 
n
) \

223 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

224 ? ((
n
) == 1 \

225 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

226 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

227 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

228 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

229 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

230 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

231 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

232 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

233 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

235 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

236 *((*Ë
__s
Ë(Ë(
c
); \

237 
__s
; })

	)

239 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

240 ({ *
__s
 = (
s
); \

242 
__ui
; \

243 
__usi
; \

244 
__uc
; \

245 } *
__u
 = 
__s
; \

246 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

252 i‡((
n
) == 3 || (n) >= 5) \

253 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

256 
n
) \

259 
__u
->
__ui
 = 
__c
; \

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

262 
__u
->
__ui
 = 
__c
; \

263 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

265 
__u
->
__ui
 = 
__c
; \

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

268 
__u
->
__usi
 = (Ë
__c
; \

269 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

270 
__u
->
__uc
 = (Ë
__c
; \

274 
__u
->
__ui
 = 
__c
; \

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

277 
__u
->
__ui
 = 
__c
; \

278 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

280 
__u
->
__ui
 = 
__c
; \

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

283 
__u
->
__usi
 = (Ë
__c
; \

287 
__u
->
__ui
 = 
__c
; \

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

290 
__u
->
__ui
 = 
__c
; \

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

293 
__u
->
__ui
 = 
__c
; \

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

296 
__u
->
__uc
 = (Ë
__c
; \

300 
__u
->
__ui
 = 
__c
; \

301 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

303 
__u
->
__ui
 = 
__c
; \

304 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

306 
__u
->
__ui
 = 
__c
; \

307 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

309 
__u
->
__ui
 = 
__c
; \

314 
__s
; })

	)

316 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

317 (((
n
) % 4 == 0) \

318 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

319 
n
) \

320 : (((
n
) % 2 == 0) \

321 ? 
	`__mem£t_c˙_by2
 (
s
, \

322 ((Ë((Ë(
c
))) * 0x01010101,\

323 
n
) \

324 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

326 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

327 
size_t
 
__n
);

329 
__STRING_INLINE
 *

330 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

332 *
__tmp
 = 
__s
;

333 
__d0
;

334 #ifde‡
__i686__


335 
__asm__
 
__vﬁ©ûe__


338 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

339 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

340 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

343 
__asm__
 
__vﬁ©ûe__


349 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

350 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

351 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

354  
__s
;

355 
	}
}

357 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

358 
size_t
 
__n
);

360 
__STRING_INLINE
 *

361 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

363 
__d0
, 
__d1
;

364 *
__tmp
 = 
__s
;

365 #ifde‡
__i686__


366 
__asm__
 
__vﬁ©ûe__


370 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

371 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

372 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

375 
__asm__
 
__vﬁ©ûe__


381 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

382 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

383 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

386  
__s
;

387 
	}
}

389 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

390 (((
n
) % 4 == 0) \

391 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

392 : (((
n
) % 2 == 0) \

393 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

394 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

396 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

398 
__STRING_INLINE
 *

399 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

401 *
__tmp
 = 
__s
;

402 
__d0
;

403 
__asm__
 
__vﬁ©ûe__


413 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

414 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

415 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

417  
__s
;

418 
	}
}

420 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

422 
__STRING_INLINE
 *

423 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

425 
__d0
, 
__d1
;

426 *
__tmp
 = 
__s
;

427 
__asm__
 
__vﬁ©ûe__


438 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

439 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

440 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

442  
__s
;

443 
	}
}

447 
	#_HAVE_STRING_ARCH_memchr
 1

	)

448 #i‚de‡
_FORCE_INLINES


449 
__STRING_INLINE
 *

450 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

452 
__d0
;

453 #ifde‡
__i686__


454 
__d1
;

456 *
__ªs
;

457 i‡(
__n
 == 0)

458  
NULL
;

459 #ifde‡
__i686__


460 
__asm__
 
__vﬁ©ûe__


464 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

465 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

466 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

469 
__asm__
 
__vﬁ©ûe__


475 : "=D" (
__ªs
), "=&c" (
__d0
)

476 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

477 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

480  
__ªs
 - 1;

481 
	}
}

484 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

485 #i‚de‡
_FORCE_INLINES


486 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

488 
__STRING_INLINE
 *

489 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

491 
__d0
;

492 #ifde‡
__i686__


493 
__d1
;

495 *
__ªs
;

496 i‡(
__n
 == 0)

497  
NULL
;

498 #ifde‡
__i686__


499 
__asm__
 
__vﬁ©ûe__


505 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

506 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

507 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

510 
__asm__
 
__vﬁ©ûe__


517 : "=D" (
__ªs
), "=&c" (
__d0
)

518 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

519 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

522  
__ªs
;

523 
	}
}

524 #ifde‡
__USE_GNU


525 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

530 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

531 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

533 #i‚de‡
_FORCE_INLINES


534 
__STRING_INLINE
 *

535 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

537 
__d0
;

538 *
__ªs
;

539 
__asm__
 
__vﬁ©ûe__


542 : "=D" (
__ªs
), "=&c" (
__d0
)

543 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

544 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

546  
__ªs
 - 1;

547 
	}
}

548 #ifde‡
__USE_GNU


549 
__STRING_INLINE
 *

550 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

552  
	`__øwmemchr
 (
__s
, 
__c
);

553 
	}
}

559 
	#_HAVE_STRING_ARCH_°æí
 1

	)

560 
	#°æí
(
°r
) \

561 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

562 ? 
	`__buûtö_°æí
 (
°r
) \

563 : 
	`__°æí_g
 (
°r
)))

	)

564 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

566 
__STRING_INLINE
 
size_t


567 
	$__°æí_g
 (c⁄° *
__°r
)

569 
__dummy
;

570 c⁄° *
__tmp
 = 
__°r
;

571 
__asm__
 
__vﬁ©ûe__


577 : "Ù" (
__tmp
), "=&q" (
__dummy
)

578 : "0" (
__°r
),

579 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

581  
__tmp
 - 
__°r
 - 1;

582 
	}
}

586 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

587 
	#°r˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

591 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

592 (c⁄° *Ë(
§c
), \

593 
	`°æí
 (
§c
) + 1)) \

594 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

596 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

597 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

599 
__ui
; \

600 
__usi
; \

601 
__uc
; \

602 
__c
; \

603 } *
__u
 = (*Ë
__de°
; \

604 
§˛í
) \

607 
__u
->
__uc
 = '\0'; \

610 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

613 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

614 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

615 
__u
->
__uc
 = '\0'; \

618 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__uc
 = '\0'; \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

635 
__u
->
__uc
 = '\0'; \

638 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

640 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

643 (*Ë
__de°
; }))

	)

645 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

647 
__STRING_INLINE
 *

648 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

650 *
__tmp
 = 
__de°
;

651 
__dummy
;

652 
__asm__
 
__vﬁ©ûe__


661 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

662 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

663 : "0" (
__§c
), "1" (
__tmp
),

664 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

666  
__de°
;

667 
	}
}

670 #ifde‡
__USE_GNU


671 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

673 
	#__°p˝y
(
de°
, 
§c
) \

674 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

675 ? (
	`°æí
 (
§c
) + 1 <= 8 \

676 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

677 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

678 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

679 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

680 ((
§˛í
) % 4 == 0 \

681 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

682 : ((
§˛í
) % 2 == 0 \

683 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

684 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

687 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

689 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

690 (
	`__exãnsi⁄__
 ({ union { \

691 
__ui
; \

692 
__usi
; \

693 
__uc
; \

694 
__c
; \

695 } *
__u
 = (*Ë(
de°
); \

696 
§˛í
) \

699 
__u
->
__uc
 = '\0'; \

702 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

703 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

706 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

708 
__u
->
__uc
 = '\0'; \

711 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__uc
 = '\0'; \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

723 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

726 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

727 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

728 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

730 
__u
->
__uc
 = '\0'; \

733 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

735 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

736 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

739 (*Ë
__u
; }))

	)

741 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

742 
size_t
 
__§˛í
);

744 
__STRING_INLINE
 *

745 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

747 *
__tmp
 = 
__de°
;

748 
__d0
, 
__d1
;

749 
__asm__
 
__vﬁ©ûe__


757 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

758 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

760  
__tmp
;

761 
	}
}

763 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

764 
size_t
 
__§˛í
);

766 
__STRING_INLINE
 *

767 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

769 *
__tmp
 = 
__de°
;

770 
__d0
, 
__d1
;

771 
__asm__
 
__vﬁ©ûe__


784 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

785 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

786 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

787 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

789  
__tmp
 + 2;

790 
	}
}

792 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

793 
size_t
 
__§˛í
);

795 
__STRING_INLINE
 *

796 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

798 
__d0
, 
__d1
;

799 *
__tmp
 = 
__de°
;

800 
__asm__
 
__vﬁ©ûe__


811 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

812 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

813 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

814 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

816  
__tmp
;

817 
	}
}

819 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

821 
__STRING_INLINE
 *

822 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

824 *
__tmp
 = 
__de°
;

825 
__dummy
;

826 
__asm__
 
__vﬁ©ûe__


835 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

836 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

837 : "0" (
__§c
), "1" (
__tmp
),

838 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

840  
__tmp
 - 1;

841 
	}
}

846 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

847 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

848 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

849 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

850 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

851 (c⁄° *Ë(
§c
), 
n
) \

852 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

853 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

854 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

855 (((
§˛í
) % 4 == 0) \

856 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

857 : (((
§˛í
) % 2 == 0) \

858 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

859 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

861 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

862 
size_t
 
__§˛í
, size_à
__n
);

864 
__STRING_INLINE
 *

865 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

867 *
__tmp
 = 
__de°
;

868 
__dummy1
, 
__dummy2
;

869 
__asm__
 
__vﬁ©ûe__


877 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

878 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

879 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

880 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

882 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

883  
__de°
;

884 
	}
}

886 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

887 
size_t
 
__§˛í
, size_à
__n
);

889 
__STRING_INLINE
 *

890 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

892 *
__tmp
 = 
__de°
;

893 
__dummy1
, 
__dummy2
;

894 
__asm__
 
__vﬁ©ûe__


907 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

908 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

909 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

910 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

912 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

913  
__de°
;

914 
	}
}

916 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

917 
size_t
 
__§˛í
, size_à
__n
);

919 
__STRING_INLINE
 *

920 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

922 
__d0
, 
__d1
;

923 *
__tmp
 = 
__de°
;

924 
__asm__
 
__vﬁ©ûe__


935 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

936 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

937 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

938 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

940 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

941  
__de°
;

942 
	}
}

944 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

945 
size_t
 
__n
);

947 
__STRING_INLINE
 *

948 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

950 *
__tmp
 = 
__de°
;

951 
__dummy
;

952 i‡(
__n
 > 0)

953 
__asm__
 
__vﬁ©ûe__


969 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

970 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

973  
__de°
;

974 
	}
}

978 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

979 
	#°rˇt
(
de°
, 
§c
) \

980 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

981 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

982 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

984 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

985 
size_t
 
__§˛í
);

987 
__STRING_INLINE
 *

988 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

990 #ifde‡
__i686__


991 
__d0
;

992 *
__tmp
;

993 
__asm__
 
__vﬁ©ûe__


995 : "=D" (
__tmp
), "=&c" (
__d0
),

996 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

997 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

998 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1000 --
__tmp
;

1002 *
__tmp
 = 
__de°
 - 1;

1003 
__asm__
 
__vﬁ©ûe__


1008 : "Ù" (
__tmp
),

1009 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1010 : "0" (
__tmp
),

1011 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1014 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1015  
__de°
;

1016 
	}
}

1018 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1020 
__STRING_INLINE
 *

1021 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1023 *
__tmp
 = 
__de°
 - 1;

1024 
__dummy
;

1025 
__asm__
 
__vﬁ©ûe__


1037 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1038 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1039 : "1" (
__tmp
), "2" (
__§c
),

1040 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1042  
__de°
;

1043 
	}
}

1047 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1048 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1049 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1050 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1051 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1052 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1053 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1054 (c⁄° *Ë(
§c
), \

1055 (
n
)Ë0, 
__de°
)) \

1056 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1058 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1059 
size_t
 
__n
);

1061 
__STRING_INLINE
 *

1062 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1064 *
__tmp
 = 
__de°
;

1065 
__dummy
;

1066 #ifde‡
__i686__


1067 
__asm__
 
__vﬁ©ûe__


1081 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1082 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1085 --
__tmp
;

1086 
__asm__
 
__vﬁ©ûe__


1103 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1104 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1107  
__de°
;

1108 
	}
}

1112 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1113 
	#°rcmp
(
s1
, 
s2
) \

1114 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1115 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1116 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1117 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1118 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1119 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1120 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1121 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1122 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1123 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1124 (c⁄° *Ë(
s2
), \

1125 
	`°æí
 (
s1
)) \

1126 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1127 (c⁄° *Ë(
s2
), \

1128 
	`°æí
 (
s1
))) \

1129 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1130 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1131 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1132 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1133 (c⁄° *Ë(
s2
), \

1134 
	`°æí
 (
s2
)) \

1135 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1136 (c⁄° *Ë(
s2
), \

1137 
	`°æí
 (
s2
))) \

1138 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1140 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1141 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1142 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1145 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1147 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1148 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1149 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1152 
__ªsu…
; }))

	)

1154 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1155 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1156 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1157 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1160 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1162 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1163 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1164 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1167 
__ªsu…
; }))

	)

1169 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1170 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1171 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1172 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1175 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1177 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1178 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1179 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1182 
__ªsu…
; }))

	)

1184 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1186 
__STRING_INLINE
 

1187 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1189 
__ªs
;

1190 
__asm__
 
__vﬁ©ûe__


1206 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1207 : "1" (
__s1
), "2" (
__s2
),

1208 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1209 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1211  
__ªs
;

1212 
	}
}

1216 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1217 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1219 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1220 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1221 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1222 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1224 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1225 
size_t
 
__n
);

1227 
__STRING_INLINE
 

1228 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1230 
__ªs
;

1231 
__asm__
 
__vﬁ©ûe__


1250 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1251 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1252 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1253 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1255  
__ªs
;

1256 
	}
}

1260 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1261 
	#_USE_STRING_ARCH_°rchr
 1

	)

1262 
	#°rchr
(
s
, 
c
) \

1263 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1264 ? ((
c
) == '\0' \

1265 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1266 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1267 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1269 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1271 
__STRING_INLINE
 *

1272 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1274 
__d0
;

1275 *
__ªs
;

1276 
__asm__
 
__vﬁ©ûe__


1286 : "Ù" (
__ªs
), "=&a" (
__d0
)

1287 : "0" (
__s
), "1" (
__c
),

1288 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1290  
__ªs
;

1291 
	}
}

1293 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1295 
__STRING_INLINE
 *

1296 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1298 
__d0
;

1299 *
__ªs
;

1300 
__asm__
 
__vﬁ©ûe__


1311 : "Ù" (
__ªs
), "=&a" (
__d0
)

1312 : "0" (
__s
), "1" (
__c
),

1313 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1315  
__ªs
;

1316 
	}
}

1320 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1321 
	#__°rch∫ul
(
s
, 
c
) \

1322 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1323 ? ((
c
) == '\0' \

1324 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1325 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1326 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1328 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1330 
__STRING_INLINE
 *

1331 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1333 
__d0
;

1334 *
__ªs
;

1335 
__asm__
 
__vﬁ©ûe__


1345 : "Ù" (
__ªs
), "=&a" (
__d0
)

1346 : "0" (
__s
), "1" (
__c
),

1347 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1349  
__ªs
;

1350 
	}
}

1352 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1354 
__STRING_INLINE
 *

1355 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1357 
__d0
;

1358 *
__ªs
;

1359 
__asm__
 
__vﬁ©ûe__


1370 : "Ù" (
__ªs
), "=&a" (
__d0
)

1371 : "0" (
__s
), "1" (
__c
),

1372 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1374  
__ªs
;

1375 
	}
}

1376 #ifde‡
__USE_GNU


1377 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1383 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1384 
	#ödex
(
s
, 
c
) \

1385 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1386 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1387 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1392 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1393 
	#°ºchr
(
s
, 
c
) \

1394 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1395 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1396 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1398 #ifde‡
__i686__


1399 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1401 
__STRING_INLINE
 *

1402 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1404 
__d0
, 
__d1
;

1405 *
__ªs
;

1406 
__asm__
 
__vﬁ©ûe__


1414 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1415 : "0" (1), "1" (
__s
), "2" (
__c
),

1416 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1418  
__ªs
 - 1;

1419 
	}
}

1421 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1423 
__STRING_INLINE
 *

1424 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1426 
__d0
, 
__d1
;

1427 *
__ªs
;

1428 
__asm__
 
__vﬁ©ûe__


1437 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1438 : "0" (1), "1" (
__s
), "2" (
__c
),

1439 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1441  
__ªs
 - 1;

1442 
	}
}

1444 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1446 
__STRING_INLINE
 *

1447 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1449 
__d0
, 
__d1
;

1450 *
__ªs
;

1451 
__asm__
 
__vﬁ©ûe__


1461 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1462 : "0" (0), "1" (
__s
), "2" (
__c
),

1463 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1465  
__ªs
;

1466 
	}
}

1468 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1470 
__STRING_INLINE
 *

1471 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1473 
__d0
, 
__d1
;

1474 *
__ªs
;

1475 
__asm__
 
__vﬁ©ûe__


1486 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1487 : "0" (0), "1" (
__s
), "2" (
__c
),

1488 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1490  
__ªs
;

1491 
	}
}

1495 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1497 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1498 
	#rödex
(
s
, 
c
) \

1499 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1500 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1501 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1507 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1508 
	#°rc•n
(
s
, 
ªje˘
) \

1509 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1510 ? ((
ªje˘
)[0] == '\0' \

1511 ? 
	`°æí
 (
s
) \

1512 : ((
ªje˘
)[1] == '\0' \

1513 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1514 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1515 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1517 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1519 #i‚de‡
_FORCE_INLINES


1520 
__STRING_INLINE
 
size_t


1521 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1523 
__d0
;

1524 *
__ªs
;

1525 
__asm__
 
__vﬁ©ûe__


1534 : "Ù" (
__ªs
), "=&a" (
__d0
)

1535 : "0" (
__s
), "1" (
__ªje˘
),

1536 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1538  (
__ªs
 - 1Ë- 
__s
;

1539 
	}
}

1542 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1543 
size_t
 
__ªje˘_Àn
);

1545 
__STRING_INLINE
 
size_t


1546 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1548 
__d0
, 
__d1
, 
__d2
;

1549 c⁄° *
__ªs
;

1550 
__asm__
 
__vﬁ©ûe__


1561 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1562 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1564  (
__ªs
 - 1Ë- 
__s
;

1565 
	}
}

1567 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1568 #ifde‡
__PIC__


1570 
__STRING_INLINE
 
size_t


1571 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1573 
__d0
, 
__d1
, 
__d2
;

1574 c⁄° *
__ªs
;

1575 
__asm__
 
__vﬁ©ûe__


1592 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1593 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1595  (
__ªs
 - 1Ë- 
__s
;

1596 
	}
}

1598 
__STRING_INLINE
 
size_t


1599 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1601 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1602 c⁄° *
__ªs
;

1603 
__asm__
 
__vﬁ©ûe__


1617 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1618 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1621  (
__ªs
 - 1Ë- 
__s
;

1622 
	}
}

1628 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1629 
	#°r•n
(
s
, 
ac˚±
) \

1630 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1631 ? ((
ac˚±
)[0] == '\0' \

1632 ? ((Ë(
s
), 0) \

1633 : ((
ac˚±
)[1] == '\0' \

1634 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1635 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1636 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1638 #i‚de‡
_FORCE_INLINES


1639 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1641 
__STRING_INLINE
 
size_t


1642 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1644 
__d0
;

1645 *
__ªs
;

1647 
__asm__
 
__vﬁ©ûe__


1653 : "Ù" (
__ªs
), "=&q" (
__d0
)

1654 : "0" (
__s
), "1" (
__ac˚±
),

1655 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1657  (
__ªs
 - 1Ë- 
__s
;

1658 
	}
}

1661 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1662 
size_t
 
__ac˚±_Àn
);

1664 
__STRING_INLINE
 
size_t


1665 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1667 
__d0
, 
__d1
, 
__d2
;

1668 c⁄° *
__ªs
;

1669 
__asm__
 
__vﬁ©ûe__


1680 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1681 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1684 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1685 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1687  (
__ªs
 - 1Ë- 
__s
;

1688 
	}
}

1690 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1691 #ifde‡
__PIC__


1693 
__STRING_INLINE
 
size_t


1694 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1696 
__d0
, 
__d1
, 
__d2
;

1697 c⁄° *
__ªs
;

1698 
__asm__
 
__vﬁ©ûe__


1714 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1715 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1717  (
__ªs
 - 1Ë- 
__s
;

1718 
	}
}

1720 
__STRING_INLINE
 
size_t


1721 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1723 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1724 c⁄° *
__ªs
;

1725 
__asm__
 
__vﬁ©ûe__


1739 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1740 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1742  (
__ªs
 - 1Ë- 
__s
;

1743 
	}
}

1748 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1749 
	#°Ωbrk
(
s
, 
ac˚±
) \

1750 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1751 ? ((
ac˚±
)[0] == '\0' \

1752 ? ((Ë(
s
), (*) 0) \

1753 : ((
ac˚±
)[1] == '\0' \

1754 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1755 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1756 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1758 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1759 
size_t
 
__ac˚±_Àn
);

1761 
__STRING_INLINE
 *

1762 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1764 
__d0
, 
__d1
, 
__d2
;

1765 *
__ªs
;

1766 
__asm__
 
__vﬁ©ûe__


1781 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1782 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1784  
__ªs
;

1785 
	}
}

1787 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1788 #ifde‡
__PIC__


1790 
__STRING_INLINE
 *

1791 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1793 
__d0
, 
__d1
, 
__d2
;

1794 *
__ªs
;

1795 
__asm__
 
__vﬁ©ûe__


1816 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1817 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1819  
__ªs
;

1820 
	}
}

1822 
__STRING_INLINE
 *

1823 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1825 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1826 *
__ªs
;

1827 
__asm__
 
__vﬁ©ûe__


1846 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1847 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1849  
__ªs
;

1850 
	}
}

1855 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1856 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1857 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1858 ? ((
√edÀ
)[0] == '\0' \

1859 ? (
hay°ack
) \

1860 : ((
√edÀ
)[1] == '\0' \

1861 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1862 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1863 
	`°æí
 (
√edÀ
)))) \

1864 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1868 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1869 c⁄° 
__√edÀ
[],

1870 
size_t
 
__√edÀ_Àn
);

1872 
__STRING_INLINE
 *

1873 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1874 
size_t
 
__√edÀ_Àn
)

1876 
__d0
, 
__d1
, 
__d2
;

1877 *
__ªs
;

1878 
__asm__
 
__vﬁ©ûe__


1891 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1892 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1894  
__ªs
;

1895 
	}
}

1897 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1898 c⁄° *
__√edÀ
);

1899 #ifde‡
__PIC__


1901 
__STRING_INLINE
 *

1902 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1904 
__d0
, 
__d1
, 
__d2
;

1905 *
__ªs
;

1906 
__asm__
 
__vﬁ©ûe__


1925 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1926 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1927 "d" (
__√edÀ
)

1929  
__ªs
;

1930 
	}
}

1932 
__STRING_INLINE
 *

1933 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1935 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1936 *
__ªs
;

1937 
__asm__
 
__vﬁ©ûe__


1954 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1955 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1956 "b" (
__√edÀ
)

1958  
__ªs
;

1959 
	}
}

1965 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1966 #ifde‡
__i686__


1967 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1968 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1969 ? 
	`__buûtö_ffs
 (
w‹d
) \

1970 : ({ 
__˙t
, 
__tmp
; \

1971 
__asm__
 
__vﬁ©ûe__
 \

1974 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1975 : "rm" (
w‹d
), "1" (-1)); \

1976 
__˙t
 + 1; }))

	)

1978 #i‚de‡
ff¶


1979 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1984 #i‚de‡
_FORCE_INLINES


1985 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

231 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

232 
	#_POSIX_SOURCE
 1

	)

233 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

234 
	#_POSIX_C_SOURCE
 2

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

236 
	#_POSIX_C_SOURCE
 199506L

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

238 
	#_POSIX_C_SOURCE
 200112L

	)

240 
	#_POSIX_C_SOURCE
 200809L

	)

242 
	#__USE_POSIX_IMPLICITLY
 1

	)

245 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 21

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((Ë((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
))

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && 
IS_IN
 (
libc
)

89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 
	~<bôs/w‹dsize.h
>

404 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


405 
	#__LDBL_COMPAT
 1

	)

406 #ifde‡
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

409 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

410 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

411 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

412 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

413 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

414 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

415 
	#__LDBL_REDIR_DECL
(
«me
) \

416 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

417 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

418 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

419 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

423 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


424 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

425 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

426 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

427 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

428 
	#__LDBL_REDIR_DECL
(
«me
)

	)

429 #ifde‡
__REDIRECT


430 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

431 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

432 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

28 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


29 #i‡(!
IS_IN
 (
libc
Ë&& !IS_IN (
lib±hªad
)Ë|| !
deföed
 
_LIBC


30 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

32 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

35 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

45 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

46 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

50 #i‡
deföed
 
_LIBC
 && (
IS_IN
 (
libc
Ë|| IS_IN (
lib±hªad
))

51 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
, 
NAME
) \

52 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

53 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

54 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

56 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

58 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

59 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

63 #i‡
deföed
 
_LIBC
 && (
IS_IN
 (
libc
Ë|| IS_IN (
lib±hªad
))

64 
	#__libc_lock_öô_ªcursive
(
NAME
) \

65 ((Ë((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
))

	)

67 
	#__libc_lock_öô_ªcursive
(
NAME
) \

69 i‡(
__±hªad_muãx_öô
 !
NULL
) \

71 
±hªad_muãx©å_t
 
__©å
; \

72 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

73 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

74 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

75 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

77 } 0)

	)

81 #i‡
deföed
 
_LIBC
 && (
IS_IN
 (
libc
Ë|| IS_IN (
lib±hªad
))

82 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

84 
	#__libc_lock_föi_ªcursive
(
NAME
) \

85 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

89 #i‡
deföed
 
_LIBC
 && (
IS_IN
 (
libc
Ë|| IS_IN (
lib±hªad
))

90 
	#__libc_lock_lock_ªcursive
(
NAME
) \

92 *
£lf
 = 
THREAD_SELF
; \

93 i‡((
NAME
).
ow√r
 !
£lf
) \

95 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

96 (
NAME
).
ow√r
 = 
£lf
; \

98 ++(
NAME
).
˙t
; \

99 } 0)

	)

101 
	#__libc_lock_lock_ªcursive
(
NAME
) \

102 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

106 #i‡
deföed
 
_LIBC
 && (
IS_IN
 (
libc
Ë|| IS_IN (
lib±hªad
))

107 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

109 
ªsu…
 = 0; \

110 *
£lf
 = 
THREAD_SELF
; \

111 i‡((
NAME
).
ow√r
 !
£lf
) \

113 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

115 (
NAME
).
ow√r
 = 
£lf
; \

116 (
NAME
).
˙t
 = 1; \

119 
ªsu…
 = 
EBUSY
; \

122 ++(
NAME
).
˙t
; \

123 
ªsu…
; \

124 })

	)

126 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (
IS_IN
 (
libc
Ë|| IS_IN (
lib±hªad
))

133 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

135 i‡(--(
NAME
).
˙t
 == 0) \

137 (
NAME
).
ow√r
 = 
NULL
; \

138 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

140 } 0)

	)

142 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

143 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

150 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

151 (*
routöe
Ë(*), *
¨g
);

152 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

153 
execuã
);

156 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

157 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

158 
_avaû
; \

159 i‡(
DOIT
) { \

160 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

161 i‡(
_avaû
) { \

162 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

163 
ARG
)); \

165 
_buf„r
.
__routöe
 = (
FCT
); \

166 
_buf„r
.
__¨g
 = (
ARG
); \

169 
_avaû
 = 0; \

170 }

	)

173 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

174 i‡(
_avaû
) { \

175 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

176 } i‡(
DOIT
) \

177 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

178 
	}

	)
}

183 #ifde‡
_LIBC


184 
	~"libc-lockP.h
"

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

95 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

96 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

115 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


118 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

121 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


127 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


128 #i‡
__WORDSIZE
 == 64

129 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

134 
	#PTHREAD_RWLOCK_INITIALIZER
 \

135 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

136 #ifde‡
__USE_GNU


137 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


138 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

139 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

140 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

142 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


143 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

144 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

145 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

148 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

149 0 } }

	)

159 
	mPTHREAD_INHERIT_SCHED
,

160 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

161 
	mPTHREAD_EXPLICIT_SCHED


162 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

169 
	mPTHREAD_SCOPE_SYSTEM
,

170 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

171 
	mPTHREAD_SCOPE_PROCESS


172 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

179 
	mPTHREAD_PROCESS_PRIVATE
,

180 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

181 
	mPTHREAD_PROCESS_SHARED


182 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

188 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

192 
	s_±hªad_˛ónup_buf„r


194 (*
	m__routöe
) (*);

195 *
	m__¨g
;

196 
	m__ˇn˚…y≥
;

197 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

203 
	mPTHREAD_CANCEL_ENABLE
,

204 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

205 
	mPTHREAD_CANCEL_DISABLE


206 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

210 
	mPTHREAD_CANCEL_DEFERRED
,

211 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

212 
	mPTHREAD_CANCEL_ASYNCHRONOUS


213 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

215 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

219 
	#PTHREAD_ONCE_INIT
 0

	)

222 #ifde‡
__USE_XOPEN2K


226 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

230 
__BEGIN_DECLS


235 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

236 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

237 *(*
__°¨t_routöe
) (*),

238 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

244 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

252 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

254 #ifde‡
__USE_GNU


257 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

265 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

266 c⁄° 
time•ec
 *
__ab°ime
);

273 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

277 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

280 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

281 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

297 *
__dëach°©e
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

302 
__dëach°©e
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

308 
size_t
 *
__gu¨dsize
)

309 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

312 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

313 
size_t
 
__gu¨dsize
)

314 
__THROW
 
	`__n⁄nuŒ
 ((1));

318 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

319 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

324 c⁄° 
sched_∑øm
 *
__ª°ri˘


325 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

328 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


329 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__öhîô
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

343 
__öhîô
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

348 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

349 *
__ª°ri˘
 
__sc›e
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

353 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


358 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

365 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

366 *
__°ackaddr
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

370 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


371 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

378 
size_t
 
__°acksize
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1));

381 #ifde‡
__USE_XOPEN2K


383 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

384 **
__ª°ri˘
 
__°ackaddr
,

385 
size_t
 *
__ª°ri˘
 
__°acksize
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

391 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

392 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

395 #ifde‡
__USE_GNU


398 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

399 
size_t
 
__˝u£tsize
,

400 c⁄° 
˝u_£t_t
 *
__˝u£t
)

401 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

405 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

406 
size_t
 
__˝u£tsize
,

407 
˝u_£t_t
 *
__˝u£t
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

411 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

412 
__THROW
 
	`__n⁄nuŒ
 ((1));

416 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1));

422 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

432 c⁄° 
sched_∑øm
 *
__∑øm
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

437 *
__ª°ri˘
 
__pﬁicy
,

438 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

442 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

443 
__THROW
;

446 #ifde‡
__USE_GNU


448 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

449 
size_t
 
__buÊí
)

450 
__THROW
 
	`__n⁄nuŒ
 ((2));

453 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

458 #ifde‡
__USE_UNIX98


460 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

463 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

466 #ifde‡
__USE_GNU


471 
	$±hªad_yõld
 (Ë
__THROW
;

476 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

477 c⁄° 
˝u_£t_t
 *
__˝u£t
)

478 
__THROW
 
	`__n⁄nuŒ
 ((3));

481 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

482 
˝u_£t_t
 *
__˝u£t
)

483 
__THROW
 
	`__n⁄nuŒ
 ((3));

496 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

497 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

508 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

512 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

515 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

520 
	`±hªad_ã°ˇn˚l
 ();

529 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

530 
__mask_was_ßved
;

531 } 
__ˇn˚l_jmp_buf
[1];

532 *
__∑d
[4];

533 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

536 #i‚de‡
__˛ónup_f˘_©åibuã


537 
	#__˛ónup_f˘_©åibuã


	)

542 
	s__±hªad_˛ónup_‰ame


544 (*
__ˇn˚l_routöe
) (*);

545 *
__ˇn˚l_¨g
;

546 
__do_ô
;

547 
__ˇn˚l_ty≥
;

550 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


551 #ifde‡
__˝lu•lus


553 ˛as†
	c__±hªad_˛ónup_˛ass


555 (*
__ˇn˚l_routöe
) (*);

556 *
__ˇn˚l_¨g
;

557 
__do_ô
;

558 
__ˇn˚l_ty≥
;

560 
public
:

561 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

562 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

563 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

564 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

565 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

566 &
__ˇn˚l_ty≥
); 
	}
}

567 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

577 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

579 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

583 
	#±hªad_˛ónup_p›
(
execuã
) \

584 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

585 } 0)

	)

587 #ifde‡
__USE_GNU


591 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

593 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

594 
__˛‰ame
.
	`__de„r
 ()

	)

599 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

600 
__˛‰ame
.
	`__ª°‹e
 (); \

601 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

602 } 0)

	)

609 
__exã∫_ölöe
 

610 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

612 i‡(
__‰ame
->
__do_ô
)

613 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

614 
	}
}

623 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

625 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

626 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

627 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

628 .
__do_ô
 = 1 };

	)

632 
	#±hªad_˛ónup_p›
(
execuã
) \

633 
__˛‰ame
.
__do_ô
 = (
execuã
); \

634 } 0)

	)

636 #ifde‡
__USE_GNU


640 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

642 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

643 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

644 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

645 .
__do_ô
 = 1 }; \

646 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

647 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

652 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

653 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

654 
__˛‰ame
.
__do_ô
 = (
execuã
); \

655 } 0)

	)

666 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

668 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

669 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

670 *
__ˇn˚l_¨g
 = (
¨g
); \

671 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

672 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

673 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

675 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

676 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

680 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

681 dÿ{

	)

682 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

683 
__˛ónup_f˘_©åibuã
;

687 
	#±hªad_˛ónup_p›
(
execuã
) \

690 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

691 i‡(
execuã
) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 } 0)

	)

694 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

695 
__˛ónup_f˘_©åibuã
;

697 #ifde‡
__USE_GNU


701 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

703 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

704 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

705 *
__ˇn˚l_¨g
 = (
¨g
); \

706 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

707 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

708 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

716 dÿ{

	)

717 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
;

723 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

726 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

727 i‡(
execuã
) \

728 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

729 
	}
} 0)

	)

730 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

731 
__˛ónup_f˘_©åibuã
;

735 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

736 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

737 #i‚de‡
SHARED


738 
	`__©åibuã__
 ((
__wók__
))

744 
__jmp_buf_èg
;

745 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

751 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

752 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

753 
__THROW
 
	`__n⁄nuŒ
 ((1));

756 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROW
 
	`__n⁄nuŒ
 ((1));

760 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

761 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

764 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

765 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

767 #ifde‡
__USE_XOPEN2K


769 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 c⁄° 
time•ec
 *
__ª°ri˘


771 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

775 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

776 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

780 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

781 
__ª°ri˘
 
__muãx
,

782 *
__ª°ri˘
 
__¥io˚ûög
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

787 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

788 
__¥io˚ûög
,

789 *
__ª°ri˘
 
__ﬁd_˚ûög
)

790 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

793 #ifde‡
__USE_XOPEN2K8


795 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

796 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 #ifde‡
__USE_GNU


798 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

809 
__THROW
 
	`__n⁄nuŒ
 ((1));

812 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1));

816 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

817 
__ª°ri˘
 
__©å
,

818 *
__ª°ri˘
 
__psh¨ed
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

822 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

823 
__psh¨ed
)

824 
__THROW
 
	`__n⁄nuŒ
 ((1));

826 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


828 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


829 
__©å
, *
__ª°ri˘
 
__köd
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

835 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

836 
__THROW
 
	`__n⁄nuŒ
 ((1));

840 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

841 
__ª°ri˘
 
__©å
,

842 *
__ª°ri˘
 
__¥Ÿocﬁ
)

843 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

848 
__¥Ÿocﬁ
)

849 
__THROW
 
	`__n⁄nuŒ
 ((1));

852 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

853 
__ª°ri˘
 
__©å
,

854 *
__ª°ri˘
 
__¥io˚ûög
)

855 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

858 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

859 
__¥io˚ûög
)

860 
__THROW
 
	`__n⁄nuŒ
 ((1));

862 #ifde‡
__USE_XOPEN2K


864 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

865 *
__robu°√ss
)

866 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 #ifde‡
__USE_GNU


868 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

869 *
__robu°√ss
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

874 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

875 
__robu°√ss
)

876 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 #ifde‡
__USE_GNU


878 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

879 
__robu°√ss
)

880 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


890 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


892 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

895 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1));

899 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

900 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

906 #ifde‡
__USE_XOPEN2K


908 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

909 c⁄° 
time•ec
 *
__ª°ri˘


910 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

914 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

915 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

919 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

921 #ifde‡
__USE_XOPEN2K


923 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

924 c⁄° 
time•ec
 *
__ª°ri˘


925 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

929 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

930 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

936 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

937 
__THROW
 
	`__n⁄nuŒ
 ((1));

940 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

945 
__ª°ri˘
 
__©å
,

946 *
__ª°ri˘
 
__psh¨ed
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

950 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

951 
__psh¨ed
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

956 
__ª°ri˘
 
__©å
,

957 *
__ª°ri˘
 
__¥ef
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

961 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

962 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

970 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

971 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

972 
__THROW
 
	`__n⁄nuŒ
 ((1));

975 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

976 
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

980 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

983 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

984 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

991 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

992 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

993 
	`__n⁄nuŒ
 ((1, 2));

1002 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1003 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1004 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1005 
	`__n⁄nuŒ
 ((1, 2, 3));

1010 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1014 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1015 
__THROW
 
	`__n⁄nuŒ
 ((1));

1018 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1019 
__ª°ri˘
 
__©å
,

1020 *
__ª°ri˘
 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1024 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1025 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 #ifde‡
__USE_XOPEN2K


1029 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1030 
__ª°ri˘
 
__©å
,

1031 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1032 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1035 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1036 
__˛ockid_t
 
__˛ock_id
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1041 #ifde‡
__USE_XOPEN2K


1046 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1055 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1059 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1070 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1071 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1072 
__©å
, 
__cou¡
)

1073 
__THROW
 
	`__n⁄nuŒ
 ((1));

1076 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1077 
__THROW
 
	`__n⁄nuŒ
 ((1));

1080 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1081 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((1));

1093 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1094 
__ª°ri˘
 
__©å
,

1095 *
__ª°ri˘
 
__psh¨ed
)

1096 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1099 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1100 
__psh¨ed
)

1101 
__THROW
 
	`__n⁄nuŒ
 ((1));

1113 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1114 (*
__de°r_fun˘i⁄
) (*))

1115 
__THROW
 
	`__n⁄nuŒ
 ((1));

1118 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1121 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1124 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1125 c⁄° *
__poöãr
Ë
__THROW
 ;

1128 #ifde‡
__USE_XOPEN2K


1130 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1131 
__˛ockid_t
 *
__˛ock_id
)

1132 
__THROW
 
	`__n⁄nuŒ
 ((2));

1147 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1148 (*
__∑ª¡
) (),

1149 (*
__chûd
Ë()Ë
__THROW
;

1152 #ifde‡
__USE_EXTERN_INLINES


1154 
__exã∫_ölöe
 

1155 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1157  
__thªad1
 =
__thªad2
;

1158 
	}
}

1161 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@
1
.
1
/usr/include
149
4336
Demo/Common/Minimal/BlockQ.c
Demo/Common/Minimal/GenQTest.c
Demo/Common/Minimal/PollQ.c
Demo/Common/Minimal/QPeek.c
Demo/Common/Minimal/TimerDemo.c
Demo/Common/Minimal/blocktim.c
Demo/Common/Minimal/comtest.c
Demo/Common/Minimal/countsem.c
Demo/Common/Minimal/death.c
Demo/Common/Minimal/dynamic.c
Demo/Common/Minimal/flash.c
Demo/Common/Minimal/flop.c
Demo/Common/Minimal/integer.c
Demo/Common/Minimal/recmutex.c
Demo/Common/Minimal/semtest.c
Demo/Common/include/BlockQ.h
Demo/Common/include/GenQTest.h
Demo/Common/include/PollQ.h
Demo/Common/include/QPeek.h
Demo/Common/include/TimerDemo.h
Demo/Common/include/blocktim.h
Demo/Common/include/comtest2.h
Demo/Common/include/countsem.h
Demo/Common/include/death.h
Demo/Common/include/dynamic.h
Demo/Common/include/fileIO.h
Demo/Common/include/flash.h
Demo/Common/include/flop.h
Demo/Common/include/integer.h
Demo/Common/include/mevents.h
Demo/Common/include/partest.h
Demo/Common/include/print.h
Demo/Common/include/recmutex.h
Demo/Common/include/semtest.h
Demo/Common/include/serial.h
Demo/MT3628_Cortex_A9SPCore/FreeRTOSConfig.h
Demo/MT3628_Cortex_A9SPCore/empty_crt.c
Demo/MT3628_Cortex_A9SPCore/main.c
Demo/MT3628_Cortex_A9SPCore/serial.c
Demo/MT3628_Cortex_A9SPCore/uart.c
Demo/Versatile_Express_Cortex_A9MPCore/FreeRTOSConfig.h
Demo/Versatile_Express_Cortex_A9MPCore/main.c
Demo/Versatile_Express_Cortex_A9MPCore/pl011.c
Demo/Versatile_Express_Cortex_A9MPCore/pl031_rtc.c
Demo/Versatile_Express_Cortex_A9MPCore/printf-stdarg.c
Demo/Versatile_Express_Cortex_A9MPCore/serial.c
Demo/Versatile_Express_Cortex_A9MPCore/sp804_timer.c
Demo/Versatile_Express_Cortex_A9MPCore/uart.c
Source/croutine.c
Source/include/FreeRTOS.h
Source/include/StackMacros.h
Source/include/croutine.h
Source/include/list.h
Source/include/mpu_wrappers.h
Source/include/portable.h
Source/include/projdefs.h
Source/include/queue.h
Source/include/semphr.h
Source/include/task.h
Source/include/timers.h
Source/list.c
Source/portable/GCC/ARM_CA9/port.c
Source/portable/GCC/ARM_CA9/portmacro.h
Source/portable/GCC/ARM_Cortex-A9/port.c
Source/portable/GCC/ARM_Cortex-A9/portmacro.h
Source/portable/MemMang/heap_1.c
Source/portable/MemMang/heap_2.c
Source/portable/MemMang/heap_3.c
Source/queue.c
Source/tasks.c
Source/timers.c
/usr/include/ctype.h
/usr/include/math.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libc-lock.h
/usr/include/bits/timex.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/wchar.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
